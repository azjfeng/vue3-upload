(()=>{"use strict";var e={874:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.computed=function(e){var n,t;return(0,r.isFunction)(e)?(n=e,t=r.NOOP):(n=e.get,t=e.set),new Se(n,t,(0,r.isFunction)(e)||!e.set)},n.customRef=function(e){return new _e(e)},n.effect=v,n.enableTracking=O,n.isProxy=function(e){return fe(e)||de(e)},n.isReactive=fe,n.isReadonly=de,n.isRef=he,n.markRaw=function(e){return(0,r.def)(e,"__v_skip",!0),e},n.pauseTracking=_,n.proxyRefs=function(e){return fe(e)?e:new Proxy(e,be)},n.reactive=ce,n.readonly=le,n.ref=function(e){return ge(e)},n.resetTracking=w,n.shallowReactive=function(e){return se(e,!1,B,oe)},n.shallowReadonly=function(e){return se(e,!0,L,ae)},n.shallowRef=function(e){return ge(e,!0)},n.stop=function(e){e.active&&(g(e),e.options.onStop&&e.options.onStop(),e.active=!1)},n.toRaw=pe,n.toRef=we,n.toRefs=function(e){var n=(0,r.isArray)(e)?new Array(e.length):{};for(var t in e)n[t]=we(e,t);return n},n.track=S,n.trigger=E,n.triggerRef=function(e){E(pe(e),"set","value",void 0)},n.unref=ye,n.ITERATE_KEY=void 0;var r=t(420);function o(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function a(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,n,t){return n&&a(e.prototype,n),t&&a(e,t),e}function u(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var c,l=new WeakMap,s=[],f=Symbol("");n.ITERATE_KEY=f;var d=Symbol("");function p(e){return e&&!0===e._isEffect}function v(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r.EMPTY_OBJ;p(e)&&(e=e.raw);var t=m(e,n);return n.lazy||t(),t}var h=0;function m(e,n){var t=function(){if(!t.active)return n.scheduler?void 0:e();if(!s.includes(t)){g(t);try{return O(),s.push(t),c=t,e()}finally{s.pop(),w(),c=s[s.length-1]}}};return t.id=h++,t.allowRecurse=!!n.allowRecurse,t._isEffect=!0,t.active=!0,t.raw=e,t.deps=[],t.options=n,t}function g(e){var n=e.deps;if(n.length){for(var t=0;t<n.length;t++)n[t].delete(e);n.length=0}}var y=!0,b=[];function _(){b.push(y),y=!1}function O(){b.push(y),y=!0}function w(){var e=b.pop();y=void 0===e||e}function S(e,n,t){if(y&&void 0!==c){var r=l.get(e);r||l.set(e,r=new Map);var o=r.get(t);o||r.set(t,o=new Set),o.has(c)||(o.add(c),c.deps.push(o))}}function E(e,n,t,o,a,i){var u=l.get(e);if(u){var s=new Set,p=function(e){e&&e.forEach((function(e){(e!==c||e.allowRecurse)&&s.add(e)}))};if("clear"===n)u.forEach(p);else if("length"===t&&(0,r.isArray)(e))u.forEach((function(e,n){("length"===n||n>=o)&&p(e)}));else switch(void 0!==t&&p(u.get(t)),n){case"add":(0,r.isArray)(e)?(0,r.isIntegerKey)(t)&&p(u.get("length")):(p(u.get(f)),(0,r.isMap)(e)&&p(u.get(d)));break;case"delete":(0,r.isArray)(e)||(p(u.get(f)),(0,r.isMap)(e)&&p(u.get(d)));break;case"set":(0,r.isMap)(e)&&p(u.get(f))}s.forEach((function(e){e.options.scheduler?e.options.scheduler(e):e()}))}}var C=new Set(Object.getOwnPropertyNames(Symbol).map((function(e){return Symbol[e]})).filter(r.isSymbol)),A=R(),T=R(!1,!0),P=R(!0),x=R(!0,!0),k={};function R(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return function(t,o,a){if("__v_isReactive"===o)return!e;if("__v_isReadonly"===o)return e;if("__v_raw"===o&&a===(e?ue:ie).get(t))return t;var i=(0,r.isArray)(t);if(i&&(0,r.hasOwn)(k,o))return Reflect.get(k,o,a);var u=Reflect.get(t,o,a);return((0,r.isSymbol)(o)?C.has(o):"__proto__"===o||"__v_isRef"===o)?u:(e||S(t,0,o),n?u:he(u)?i&&(0,r.isIntegerKey)(o)?u:u.value:(0,r.isObject)(u)?e?le(u):ce(u):u)}}["includes","indexOf","lastIndexOf"].forEach((function(e){var n=Array.prototype[e];k[e]=function(){for(var e=pe(this),t=0,r=this.length;t<r;t++)S(e,0,t+"");for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];var u=n.apply(e,a);return-1===u||!1===u?n.apply(e,a.map(pe)):u}})),["push","pop","shift","unshift","splice"].forEach((function(e){var n=Array.prototype[e];k[e]=function(){_();for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var o=n.apply(this,t);return w(),o}}));var j=F(),M=F(!0);function F(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return function(n,t,o,a){var i=n[t];if(!e&&(o=pe(o),!(0,r.isArray)(n)&&he(i)&&!he(o)))return i.value=o,!0;var u=(0,r.isArray)(n)&&(0,r.isIntegerKey)(t)?Number(t)<n.length:(0,r.hasOwn)(n,t),c=Reflect.set(n,t,o,a);return n===pe(a)&&(u?(0,r.hasChanged)(o,i)&&E(n,"set",t,o):E(n,"add",t,o)),c}}var N={get:A,set:j,deleteProperty:function(e,n){var t=(0,r.hasOwn)(e,n),o=(e[n],Reflect.deleteProperty(e,n));return o&&t&&E(e,"delete",n,void 0),o},has:function(e,n){var t=Reflect.has(e,n);return(0,r.isSymbol)(n)&&C.has(n)||S(e,0,n),t},ownKeys:function(e){return S(e,0,(0,r.isArray)(e)?"length":f),Reflect.ownKeys(e)}},I={get:P,set:function(e,n){return!0},deleteProperty:function(e,n){return!0}},B=(0,r.extend)({},N,{get:T,set:M}),L=(0,r.extend)({},I,{get:x}),U=function(e){return(0,r.isObject)(e)?ce(e):e},V=function(e){return(0,r.isObject)(e)?le(e):e},D=function(e){return e},H=function(e){return Reflect.getPrototypeOf(e)};function z(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=pe(e=e.__v_raw),a=pe(n);n!==a&&!t&&S(o,0,n),!t&&S(o,0,a);var i=H(o),u=i.has,c=t?V:r?D:U;return u.call(o,n)?c(e.get(n)):u.call(o,a)?c(e.get(a)):void 0}function Y(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=this.__v_raw,r=pe(t),o=pe(e);return e!==o&&!n&&S(r,0,e),!n&&S(r,0,o),e===o?t.has(e):t.has(e)||t.has(o)}function $(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e=e.__v_raw,!n&&S(pe(e),0,f),Reflect.get(e,"size",e)}function G(e){e=pe(e);var n=pe(this),t=H(n).has.call(n,e),r=n.add(e);return t||E(n,"add",e,e),r}function K(e,n){n=pe(n);var t=pe(this),o=H(t),a=o.has,i=o.get,u=a.call(t,e);u||(e=pe(e),u=a.call(t,e));var c=i.call(t,e),l=t.set(e,n);return u?(0,r.hasChanged)(n,c)&&E(t,"set",e,n):E(t,"add",e,n),l}function J(e){var n=pe(this),t=H(n),r=t.has,o=t.get,a=r.call(n,e);a||(e=pe(e),a=r.call(n,e)),o&&o.call(n,e);var i=n.delete(e);return a&&E(n,"delete",e,void 0),i}function q(){var e=pe(this),n=0!==e.size,t=e.clear();return n&&E(e,"clear",void 0,void 0),t}function W(e,n){return function(t,r){var o=this,a=o.__v_raw,i=pe(a),u=e?V:n?D:U;return!e&&S(i,0,f),a.forEach((function(e,n){return t.call(r,u(e),u(n),o)}))}}function Z(e,n,t){return function(){var o=this.__v_raw,a=pe(o),i=(0,r.isMap)(a),c="entries"===e||e===Symbol.iterator&&i,l="keys"===e&&i,s=o[e].apply(o,arguments),p=n?V:t?D:U;return!n&&S(a,0,l?d:f),u({next:function(){var e=s.next(),n=e.value,t=e.done;return t?{value:n,done:t}:{value:c?[p(n[0]),p(n[1])]:p(n),done:t}}},Symbol.iterator,(function(){return this}))}}function X(e){return function(){return"delete"!==e&&this}}var Q={get:function(e){return z(this,e)},get size(){return $(this)},has:Y,add:G,set:K,delete:J,clear:q,forEach:W(!1,!1)},ee={get:function(e){return z(this,e,!1,!0)},get size(){return $(this)},has:Y,add:G,set:K,delete:J,clear:q,forEach:W(!1,!0)},ne={get:function(e){return z(this,e,!0)},get size(){return $(this,!0)},has:function(e){return Y.call(this,e,!0)},add:X("add"),set:X("set"),delete:X("delete"),clear:X("clear"),forEach:W(!0,!1)};function te(e,n){var t=n?ee:e?ne:Q;return function(n,o,a){return"__v_isReactive"===o?!e:"__v_isReadonly"===o?e:"__v_raw"===o?n:Reflect.get((0,r.hasOwn)(t,o)&&o in n?t:n,o,a)}}["keys","values","entries",Symbol.iterator].forEach((function(e){Q[e]=Z(e,!1,!1),ne[e]=Z(e,!0,!1),ee[e]=Z(e,!1,!0)}));var re={get:te(!1,!1)},oe={get:te(!1,!0)},ae={get:te(!0,!1)},ie=new WeakMap,ue=new WeakMap;function ce(e){return e&&e.__v_isReadonly?e:se(e,!1,N,re)}function le(e){return se(e,!0,I,ae)}function se(e,n,t,o){if(!(0,r.isObject)(e))return e;if(e.__v_raw&&(!n||!e.__v_isReactive))return e;var a=n?ue:ie,i=a.get(e);if(i)return i;var u,c=(u=e).__v_skip||!Object.isExtensible(u)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((0,r.toRawType)(u));if(0===c)return e;var l=new Proxy(e,2===c?o:t);return a.set(e,l),l}function fe(e){return de(e)?fe(e.__v_raw):!(!e||!e.__v_isReactive)}function de(e){return!(!e||!e.__v_isReadonly)}function pe(e){return e&&pe(e.__v_raw)||e}var ve=function(e){return(0,r.isObject)(e)?ce(e):e};function he(e){return Boolean(e&&!0===e.__v_isRef)}var me=function(){function e(n){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];o(this,e),this._rawValue=n,this._shallow=t,this.__v_isRef=!0,this._value=t?n:ve(n)}return i(e,[{key:"value",get:function(){return S(pe(this),0,"value"),this._value},set:function(e){(0,r.hasChanged)(pe(e),this._rawValue)&&(this._rawValue=e,this._value=this._shallow?e:ve(e),E(pe(this),"set","value",e))}}]),e}();function ge(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return he(e)?e:new me(e,n)}function ye(e){return he(e)?e.value:e}var be={get:function(e,n,t){return ye(Reflect.get(e,n,t))},set:function(e,n,t,r){var o=e[n];return he(o)&&!he(t)?(o.value=t,!0):Reflect.set(e,n,t,r)}},_e=function(){function e(n){var t=this;o(this,e),this.__v_isRef=!0;var r=n((function(){return S(t,0,"value")}),(function(){return E(t,"set","value")})),a=r.get,i=r.set;this._get=a,this._set=i}return i(e,[{key:"value",get:function(){return this._get()},set:function(e){this._set(e)}}]),e}(),Oe=function(){function e(n,t){o(this,e),this._object=n,this._key=t,this.__v_isRef=!0}return i(e,[{key:"value",get:function(){return this._object[this._key]},set:function(e){this._object[this._key]=e}}]),e}();function we(e,n){return he(e[n])?e[n]:new Oe(e,n)}var Se=function(){function e(n,t,r){var a=this;o(this,e),this._setter=t,this._dirty=!0,this.__v_isRef=!0,this.effect=v(n,{lazy:!0,scheduler:function(){a._dirty||(a._dirty=!0,E(pe(a),"set","value"))}}),this.__v_isReadonly=r}return i(e,[{key:"value",get:function(){return this._dirty&&(this._value=this.effect(),this._dirty=!1),S(pe(this),0,"value"),this._value},set:function(e){this._setter(e)}}]),e}()},979:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.callWithAsyncErrorHandling=y,n.callWithErrorHandling=g,n.cloneVNode=rt,n.computed=Lt,n.createBlock=Wn,n.createCommentVNode=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return n?(Kn(),Wn(zn,null,e)):tt(zn,null,e)},n.createHydrationRenderer=function(e){return xn(e,Cn)},n.createRenderer=function(e){return xn(e)},n.createSlots=function(e,n){for(var t=0;t<n.length;t++){var r=n[t];if((0,a.isArray)(r))for(var o=0;o<r.length;o++)e[r[o].name]=r[o].fn;else r&&(e[r.name]=r.fn)}return e},n.createStaticVNode=function(e,n){var t=tt(Yn,null,e);return t.staticCount=n,t},n.createTextVNode=ot,n.defineAsyncComponent=function(e){(0,a.isFunction)(e)&&(e={loader:e});var n,t=e,r=t.loader,i=t.loadingComponent,u=t.errorComponent,c=t.delay,l=void 0===c?200:c,s=t.timeout,f=t.suspensible,d=void 0===f||f,p=t.onError,v=null,h=0,m=function(){var e;return v||(e=v=r().catch((function(e){if(e=e instanceof Error?e:new Error(String(e)),p)return new Promise((function(n,t){p(e,(function(){return n((h++,v=null,m()))}),(function(){return t(e)}),h+1)}));throw e})).then((function(t){return e!==v&&v?v:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),n=t,t)})))};return Ut({__asyncLoader:m,name:"AsyncComponentWrapper",setup:function(){var e=Ct;if(n)return function(){return Vt(n,e)};var t=function(n){v=null,b(n,e,13,!u)};if(d&&e.suspense)return m().then((function(n){return function(){return Vt(n,e)}})).catch((function(e){return t(e),function(){return u?tt(u,{error:e}):null}}));var r=(0,o.ref)(!1),a=(0,o.ref)(),c=(0,o.ref)(!!l);return l&&setTimeout((function(){c.value=!1}),l),null!=s&&setTimeout((function(){if(!r.value&&!a.value){var e=new Error("Async component timed out after ".concat(s,"ms."));t(e),a.value=e}}),s),m().then((function(){r.value=!0})).catch((function(e){t(e),a.value=e})),function(){return r.value&&n?Vt(n,e):a.value&&u?tt(u,{error:a.value}):i&&!c.value?tt(i):void 0}}})},n.defineComponent=Ut,n.getTransitionRawChildren=en,n.h=function(e,n,t){var r=arguments.length;return 2===r?(0,a.isObject)(n)&&!(0,a.isArray)(n)?Zn(n)?tt(e,null,[n]):tt(e,n):tt(e,null,n):(r>3?t=Array.prototype.slice.call(arguments,2):3===r&&Zn(t)&&(t=[t]),tt(e,n,t))},n.handleError=b,n.initCustomFormatter=function(){return},n.inject=st,n.isVNode=Zn,n.mergeProps=ct,n.nextTick=F,n.onActivated=an,n.onDeactivated=un,n.openBlock=Kn,n.popScopeId=Oe,n.provide=lt,n.pushScopeId=_e,n.queuePostFlushCb=U,n.registerRuntimeCompiler=function(e){Tt=e},n.renderList=function(e,n){var t;if((0,a.isArray)(e)||(0,a.isString)(e)){t=new Array(e.length);for(var r=0,o=e.length;r<o;r++)t[r]=n(e[r],r)}else if("number"==typeof e){t=new Array(e);for(var i=0;i<e;i++)t[i]=n(i+1,i)}else if((0,a.isObject)(e))if(e[Symbol.iterator])t=Array.from(e,n);else{var u=Object.keys(e);t=new Array(u.length);for(var c=0,l=u.length;c<l;c++){var s=u[c];t[c]=n(e[s],s,c)}}else t=[];return t},n.renderSlot=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3?arguments[3]:void 0,o=e[n];he++;var a=(Kn(),Wn(Dn,{key:t.key},o?o(t):r?r():[],1===e._?64:-2));return he--,a},n.resolveComponent=function(e){return Un(Bn,e)||e},n.resolveDirective=function(e){return Un("directives",e)},n.resolveDynamicComponent=function(e){return(0,a.isString)(e)?Un(Bn,e)||e:e||Ln},n.resolveTransitionHooks=We,n.setBlockTracking=function(e){qn+=e},n.setDevtoolsHook=function(e){n.devtools=H=e},n.setTransitionHooks=Qe,n.toHandlers=function(e){var n={};for(var t in e)n[(0,a.toHandlerKey)(t)]=e[t];return n},n.transformVNodeArgs=function(e){},n.useTransitionState=Ge,n.warn=p,n.watch=He,n.watchEffect=function(e,n){return ze(e,null,n)},n.withCtx=ge,n.withDirectives=function(e,n){if(null===ne)return e;for(var t=ne.proxy,r=e.dirs||(e.dirs=[]),o=0;o<n.length;o++){var i=u(n[o],4),c=i[0],l=i[1],s=i[2],f=i[3],d=void 0===f?a.EMPTY_OBJ:f;(0,a.isFunction)(c)&&(c={mounted:c,updated:c}),r.push({dir:c,instance:t,value:l,oldValue:void 0,arg:s,modifiers:d})}return e},n.withScopeId=function(e){return function(n){return ge((function(){_e(e);var t=n.apply(this,arguments);return Oe(),t}))}},Object.defineProperty(n,"customRef",{enumerable:!0,get:function(){return o.customRef}}),Object.defineProperty(n,"isProxy",{enumerable:!0,get:function(){return o.isProxy}}),Object.defineProperty(n,"isReactive",{enumerable:!0,get:function(){return o.isReactive}}),Object.defineProperty(n,"isReadonly",{enumerable:!0,get:function(){return o.isReadonly}}),Object.defineProperty(n,"isRef",{enumerable:!0,get:function(){return o.isRef}}),Object.defineProperty(n,"markRaw",{enumerable:!0,get:function(){return o.markRaw}}),Object.defineProperty(n,"proxyRefs",{enumerable:!0,get:function(){return o.proxyRefs}}),Object.defineProperty(n,"reactive",{enumerable:!0,get:function(){return o.reactive}}),Object.defineProperty(n,"readonly",{enumerable:!0,get:function(){return o.readonly}}),Object.defineProperty(n,"ref",{enumerable:!0,get:function(){return o.ref}}),Object.defineProperty(n,"shallowReactive",{enumerable:!0,get:function(){return o.shallowReactive}}),Object.defineProperty(n,"shallowReadonly",{enumerable:!0,get:function(){return o.shallowReadonly}}),Object.defineProperty(n,"shallowRef",{enumerable:!0,get:function(){return o.shallowRef}}),Object.defineProperty(n,"toRaw",{enumerable:!0,get:function(){return o.toRaw}}),Object.defineProperty(n,"toRef",{enumerable:!0,get:function(){return o.toRef}}),Object.defineProperty(n,"toRefs",{enumerable:!0,get:function(){return o.toRefs}}),Object.defineProperty(n,"triggerRef",{enumerable:!0,get:function(){return o.triggerRef}}),Object.defineProperty(n,"unref",{enumerable:!0,get:function(){return o.unref}}),Object.defineProperty(n,"camelize",{enumerable:!0,get:function(){return a.camelize}}),Object.defineProperty(n,"capitalize",{enumerable:!0,get:function(){return a.capitalize}}),Object.defineProperty(n,"toDisplayString",{enumerable:!0,get:function(){return a.toDisplayString}}),Object.defineProperty(n,"toHandlerKey",{enumerable:!0,get:function(){return a.toHandlerKey}}),n.version=n.useSSRContext=n.ssrUtils=n.ssrContextKey=n.onUpdated=n.onUnmounted=n.onRenderTriggered=n.onRenderTracked=n.onMounted=n.onErrorCaptured=n.onBeforeUpdate=n.onBeforeUnmount=n.onBeforeMount=n.getCurrentInstance=n.devtools=n.createVNode=n.Text=n.Teleport=n.Suspense=n.Static=n.KeepAlive=n.Fragment=n.Comment=n.BaseTransition=void 0;var r,o=t(874),a=t(420);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(t.push(i.value),!n||t.length!==n);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return t}}(e,n)||s(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e){return function(e){if(Array.isArray(e))return f(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||s(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,n){if(e){if("string"==typeof e)return f(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?f(e,n):void 0}}function f(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var d=[];function p(e){(0,o.pauseTracking)();for(var n=d.length?d[d.length-1].component:null,t=n&&n.appContext.config.warnHandler,r=v(),a=arguments.length,i=new Array(a>1?a-1:0),u=1;u<a;u++)i[u-1]=arguments[u];if(t)g(t,n,11,[e+i.join(""),n&&n.proxy,r.map((function(e){var t=e.vnode;return"at <".concat(It(n,t.type),">")})).join("\n"),r]);else{var c,s=["[Vue warn]: ".concat(e)].concat(i);r.length&&s.push.apply(s,["\n"].concat(l(h(r)))),(c=console).warn.apply(c,l(s))}(0,o.resetTracking)()}function v(){var e=d[d.length-1];if(!e)return[];for(var n=[];e;){var t=n[0];t&&t.vnode===e?t.recurseCount++:n.push({vnode:e,recurseCount:0});var r=e.component&&e.component.parent;e=r&&r.vnode}return n}function h(e){var n=[];return e.forEach((function(e,t){var r,o,a,i,u,c,s,f,d,p;n.push.apply(n,l(0===t?[]:["\n"]).concat(l((u=(i=e).vnode,s=(c=i.recurseCount)>0?"... (".concat(c," recursive calls)"):"",f=!!u.component&&null==u.component.parent,d=" at <".concat(It(u.component,u.type,f)),p=">"+s,u.props?[d].concat(l((r=u.props,o=[],(a=Object.keys(r)).slice(0,3).forEach((function(e){o.push.apply(o,l(m(e,r[e])))})),a.length>3&&o.push(" ..."),o)),[p]):[d+p]))))})),n}function m(e,n,t){return(0,a.isString)(n)?(n=JSON.stringify(n),t?n:["".concat(e,"=").concat(n)]):"number"==typeof n||"boolean"==typeof n||null==n?t?n:["".concat(e,"=").concat(n)]:(0,o.isRef)(n)?(n=m(e,(0,o.toRaw)(n.value),!0),t?n:["".concat(e,"=Ref<"),n,">"]):(0,a.isFunction)(n)?["".concat(e,"=fn").concat(n.name?"<".concat(n.name,">"):"")]:(n=(0,o.toRaw)(n),t?n:["".concat(e,"="),n])}function g(e,n,t,r){var o;try{o=r?e.apply(void 0,l(r)):e()}catch(e){b(e,n,t)}return o}function y(e,n,t,r){if((0,a.isFunction)(e)){var o=g(e,n,t,r);return o&&(0,a.isPromise)(o)&&o.catch((function(e){b(e,n,t)})),o}for(var i=[],u=0;u<e.length;u++)i.push(y(e[u],n,t,r));return i}function b(e,n,t){var r=n?n.vnode:null;if(n){for(var o=n.parent,a=n.proxy,i=t;o;){var u=o.ec;if(u)for(var c=0;c<u.length;c++)if(!1===u[c](e,a,i))return;o=o.parent}var l=n.appContext.config.errorHandler;if(l)return void g(l,null,10,[e,a,i])}_(e,t,r)}function _(e,n,t){console.error(e)}c(r={},"bc","beforeCreate hook"),c(r,"c","created hook"),c(r,"bm","beforeMount hook"),c(r,"m","mounted hook"),c(r,"bu","beforeUpdate hook"),c(r,"u","updated"),c(r,"bum","beforeUnmount hook"),c(r,"um","unmounted hook"),c(r,"a","activated hook"),c(r,"da","deactivated hook"),c(r,"ec","errorCaptured hook"),c(r,"rtc","renderTracked hook"),c(r,"rtg","renderTriggered hook"),c(r,0,"setup function"),c(r,1,"render function"),c(r,2,"watcher getter"),c(r,3,"watcher callback"),c(r,4,"watcher cleanup function"),c(r,5,"native event handler"),c(r,6,"component event handler"),c(r,7,"vnode hook"),c(r,8,"directive hook"),c(r,9,"transition hook"),c(r,10,"app errorHandler"),c(r,11,"app warnHandler"),c(r,12,"ref function"),c(r,13,"async component loader"),c(r,14,"scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next");var O=!1,w=!1,S=[],E=0,C=[],A=null,T=0,P=[],x=null,k=0,R=Promise.resolve(),j=null,M=null;function F(e){var n=j||R;return e?n.then(this?e.bind(this):e):n}function N(e){S.length&&S.includes(e,O&&e.allowRecurse?E+1:E)||e===M||(S.push(e),I())}function I(){O||w||(w=!0,j=R.then(Y))}function B(e,n,t,r){(0,a.isArray)(e)?t.push.apply(t,l(e)):n&&n.includes(e,e.allowRecurse?r+1:r)||t.push(e),I()}function L(e){B(e,A,C,T)}function U(e){B(e,x,P,k)}function V(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(C.length){for(M=n,A=l(new Set(C)),C.length=0,T=0;T<A.length;T++)A[T]();A=null,T=0,M=null,V(e,n)}}function D(e){if(P.length){var n,t=l(new Set(P));if(P.length=0,x)return void(n=x).push.apply(n,l(t));for((x=t).sort((function(e,n){return z(e)-z(n)})),k=0;k<x.length;k++)x[k]();x=null,k=0}}var H,z=function(e){return null==e.id?1/0:e.id};function Y(e){w=!1,O=!0,V(e),S.sort((function(e,n){return z(e)-z(n)}));try{for(E=0;E<S.length;E++){var n=S[E];n&&g(n,null,14)}}finally{E=0,S.length=0,D(),O=!1,j=null,(S.length||P.length)&&Y(e)}}function $(e,n){H&&H.emit("app:init",e,n,{Fragment:Dn,Text:Hn,Comment:zn,Static:Yn})}function G(e){H&&H.emit("app:unmount",e)}new Set,new Map,n.devtools=H;var K=W("component:added"),J=W("component:updated"),q=W("component:removed");function W(e){return function(n){H&&H.emit(e,n.appContext.app,n.uid,n.parent?n.parent.uid:void 0)}}function Z(e,n,t){H&&H.emit("component:emit",e.appContext.app,e,n,t)}function X(e,n){for(var t=e.vnode.props||a.EMPTY_OBJ,r=arguments.length,o=new Array(r>2?r-2:0),i=2;i<r;i++)o[i-2]=arguments[i];var u=o,c=n.startsWith("update:"),l=c&&n.slice(7);if(l&&l in t){var s="".concat("modelValue"===l?"model":l,"Modifiers"),f=t[s]||a.EMPTY_OBJ,d=f.number,p=f.trim;p?u=o.map((function(e){return e.trim()})):d&&(u=o.map(a.toNumber))}__VUE_PROD_DEVTOOLS__&&Z(e,n,u);var v=(0,a.toHandlerKey)((0,a.camelize)(n)),h=t[v];!h&&c&&(h=t[v=(0,a.toHandlerKey)((0,a.hyphenate)(n))]),h&&y(h,e,6,u);var m=t[v+"Once"];if(m){if(e.emitted){if(e.emitted[v])return}else(e.emitted={})[v]=!0;y(m,e,6,u)}}function Q(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!n.deopt&&void 0!==e.__emits)return e.__emits;var r=e.emits,o={},i=!1;if(__VUE_OPTIONS_API__&&!(0,a.isFunction)(e)){var u=function(e){i=!0,(0,a.extend)(o,Q(e,n,!0))};!t&&n.mixins.length&&n.mixins.forEach(u),e.extends&&u(e.extends),e.mixins&&e.mixins.forEach(u)}return r||i?((0,a.isArray)(r)?r.forEach((function(e){return o[e]=null})):(0,a.extend)(o,r),e.__emits=o):e.__emits=null}function ee(e,n){return!(!e||!(0,a.isOn)(n))&&(n=n.replace(/Once$/,""),(0,a.hasOwn)(e,n[2].toLowerCase()+n.slice(3))||(0,a.hasOwn)(e,n.slice(2)))}var ne=null;function te(e){ne=e}function re(e){var n,t=e.type,r=e.vnode,o=e.proxy,i=e.withProxy,c=e.props,l=u(e.propsOptions,1)[0],s=e.slots,f=e.attrs,d=e.emit,p=e.render,v=e.renderCache,h=e.data,m=e.setupState,g=e.ctx;ne=e;try{var y;if(4&r.shapeFlag){var _=i||o;n=at(p.call(_,_,v,c,m,h,g)),y=f}else{var O=t;n=at(O.length>1?O(c,{attrs:f,slots:s,emit:d}):O(c,null)),y=t.props?f:oe(f)}var w=n;if(!1!==t.inheritAttrs&&y){var S=Object.keys(y),E=w.shapeFlag;S.length&&(1&E||6&E)&&(l&&S.some(a.isModelListener)&&(y=ae(y,l)),w=rt(w,y))}r.dirs&&(w.dirs=w.dirs?w.dirs.concat(r.dirs):r.dirs),r.transition&&(w.transition=r.transition),n=w}catch(t){b(t,e,1),n=tt(zn)}return ne=null,n}var oe=function(e){var n;for(var t in e)("class"===t||"style"===t||(0,a.isOn)(t))&&((n||(n={}))[t]=e[t]);return n},ae=function(e,n){var t={};for(var r in e)(0,a.isModelListener)(r)&&r.slice(9)in n||(t[r]=e[r]);return t};function ie(e,n,t){var r=Object.keys(n);if(r.length!==Object.keys(e).length)return!0;for(var o=0;o<r.length;o++){var a=r[o];if(n[a]!==e[a]&&!ee(t,a))return!0}return!1}function ue(e,n){for(var t=e.vnode,r=e.parent;r&&r.subTree===t;)(t=r.vnode).el=n,r=r.parent}var ce=function(e){return e.__isSuspense},le={__isSuspense:!0,process:function(e,n,t,r,o,i,u,c,l){null==e?function(e,n,t,r,o,a,i,u){var c=u.p,l=(0,u.o.createElement)("div"),s=e.suspense=se(e,o,r,n,l,t,a,i,u);c(null,s.pendingBranch=e.ssContent,l,null,r,s,a),s.deps>0?(c(null,e.ssFallback,n,t,r,null,a),ve(s,e.ssFallback)):s.resolve()}(n,t,r,o,i,u,c,l):function(e,n,t,r,o,i,u){var c=u.p,l=u.um,s=u.o.createElement,f=n.suspense=e.suspense;f.vnode=n,n.el=e.el;var d=n.ssContent,p=n.ssFallback,v=f.activeBranch,h=f.pendingBranch,m=f.isInFallback,g=f.isHydrating;if(h)f.pendingBranch=d,Xn(d,h)?(c(h,d,f.hiddenContainer,null,o,f,i),f.deps<=0?f.resolve():m&&(c(v,p,t,r,o,null,i),ve(f,p))):(f.pendingId++,g?(f.isHydrating=!1,f.activeBranch=h):l(h,o,f),f.deps=0,f.effects.length=0,f.hiddenContainer=s("div"),m?(c(null,d,f.hiddenContainer,null,o,f,i),f.deps<=0?f.resolve():(c(v,p,t,r,o,null,i),ve(f,p))):v&&Xn(d,v)?(c(v,d,t,r,o,f,i),f.resolve(!0)):(c(null,d,f.hiddenContainer,null,o,f,i),f.deps<=0&&f.resolve()));else if(v&&Xn(d,v))c(v,d,t,r,o,f,i),ve(f,d);else{var y=n.props&&n.props.onPending;if((0,a.isFunction)(y)&&y(),f.pendingBranch=d,f.pendingId++,c(null,d,f.hiddenContainer,null,o,f,i),f.deps<=0)f.resolve();else{var b=f.timeout,_=f.pendingId;b>0?setTimeout((function(){f.pendingId===_&&f.fallback(p)}),b):0===b&&f.fallback(p)}}}(e,n,t,r,o,u,l)},hydrate:function(e,n,t,r,o,a,i,u){var c=n.suspense=se(n,r,t,e.parentNode,document.createElement("div"),null,o,a,i,!0),l=u(e,c.pendingBranch=n.ssContent,t,c,a);return 0===c.deps&&c.resolve(),l},create:se};function se(e,n,t,r,o,i,u,c,s){var f=arguments.length>9&&void 0!==arguments[9]&&arguments[9],d=s.p,p=s.m,v=s.um,h=s.n,m=s.o,g=m.parentNode,y=m.remove,_=(0,a.toNumber)(e.props&&e.props.timeout),O={vnode:e,parent:n,parentComponent:t,isSVG:u,container:r,hiddenContainer:o,anchor:i,deps:0,pendingId:0,timeout:"number"==typeof _?_:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:f,isUnmounted:!1,effects:[],resolve:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=O.vnode,t=O.activeBranch,r=O.pendingBranch,o=O.pendingId,i=O.effects,u=O.parentComponent,c=O.container;if(O.isHydrating)O.isHydrating=!1;else if(!e){var s=t&&r.transition&&"out-in"===r.transition.mode;s&&(t.transition.afterLeave=function(){o===O.pendingId&&p(r,c,f,0)});var f=O.anchor;t&&(f=h(t),v(t,u,O,!0)),s||p(r,c,f,0)}ve(O,r),O.pendingBranch=null,O.isInFallback=!1;for(var d=O.parent,m=!1;d;){if(d.pendingBranch){var g;(g=d.effects).push.apply(g,l(i)),m=!0;break}d=d.parent}m||U(i),O.effects=[];var y=n.props&&n.props.onResolve;(0,a.isFunction)(y)&&y()},fallback:function(e){if(O.pendingBranch){var n=O.vnode,t=O.activeBranch,r=O.parentComponent,o=O.container,i=O.isSVG,u=n.props&&n.props.onFallback;(0,a.isFunction)(u)&&u();var c=h(t),l=function(){O.isInFallback&&(d(null,e,o,c,r,null,i),ve(O,e))},s=e.transition&&"out-in"===e.transition.mode;s&&(t.transition.afterLeave=l),v(t,r,null,!0),O.isInFallback=!0,s||l()}},move:function(e,n,t){O.activeBranch&&p(O.activeBranch,e,n,t),O.container=e},next:function(){return O.activeBranch&&h(O.activeBranch)},registerDep:function(e,n){if(O.pendingBranch){var t=e.vnode.el;O.deps++,e.asyncDep.catch((function(n){b(n,e,0)})).then((function(r){if(!e.isUnmounted&&!O.isUnmounted&&O.pendingId===e.suspenseId){O.deps--,e.asyncResolved=!0;var o=e.vnode;Rt(e,r),t&&(o.el=t);var a=!t&&e.subTree.el;n(e,o,g(t||e.subTree.el),t?null:h(e.subTree),O,u,c),a&&y(a),ue(e,o.el),0===O.deps&&O.resolve()}}))}},unmount:function(e,n){O.isUnmounted=!0,O.activeBranch&&v(O.activeBranch,t,e,n),O.pendingBranch&&v(O.pendingBranch,t,e,n)}};return O}function fe(e){var n,t,r=e.shapeFlag,o=e.children;return 32&r?(n=de(o.default),t=de(o.fallback)):(n=de(o),t=at(null)),{content:n,fallback:t}}function de(e){var n;return(0,a.isFunction)(e)&&(e=e()),(0,a.isArray)(e)&&(e=1===(n=e.filter((function(e){return!(Zn(e)&&e.type===zn&&"v-if"!==e.children)}))).length&&Zn(n[0])?n[0]:null),at(e)}function pe(e,n){var t;n&&n.pendingBranch?(0,a.isArray)(e)?(t=n.effects).push.apply(t,l(e)):n.effects.push(e):U(e)}function ve(e,n){e.activeBranch=n;var t=e.vnode,r=e.parentComponent,o=t.el=n.el;r&&r.subTree===t&&(r.vnode.el=o,ue(r,o))}n.Suspense=le;var he=0,me=function(e){return he+=e};function ge(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ne;if(!n)return e;var t=function(){he||Kn(!0);var t=ne;te(n);var r=e.apply(void 0,arguments);return te(t),he||Jn(),r};return t._c=!0,t}var ye=null,be=[];function _e(e){be.push(ye=e)}function Oe(){be.pop(),ye=be[be.length-1]||null}function we(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i={},u={};(0,a.def)(u,Qn,1),Se(e,n,i,u),t?e.props=r?i:(0,o.shallowReactive)(i):e.type.props?e.props=i:e.props=u,e.attrs=u}function Se(e,n,t,r){var i=u(e.propsOptions,2),c=i[0],l=i[1];if(n)for(var s in n){var f=n[s];if(!(0,a.isReservedProp)(s)){var d=void 0;c&&(0,a.hasOwn)(c,d=(0,a.camelize)(s))?t[d]=f:ee(e.emitsOptions,s)||(r[s]=f)}}if(l)for(var p=(0,o.toRaw)(t),v=0;v<l.length;v++){var h=l[v];t[h]=Ee(c,p,h,p[h],e)}}function Ee(e,n,t,r,o){var i=e[t];if(null!=i){var u=(0,a.hasOwn)(i,"default");if(u&&void 0===r){var c=i.default;i.type!==Function&&(0,a.isFunction)(c)?(Pt(o),r=c(n),Pt(null)):r=c}i[0]&&((0,a.hasOwn)(n,t)||u?!i[1]||""!==r&&r!==(0,a.hyphenate)(t)||(r=!0):r=!1)}return r}function Ce(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!n.deopt&&e.__props)return e.__props;var r=e.props,o={},i=[],c=!1;if(__VUE_OPTIONS_API__&&!(0,a.isFunction)(e)){var s=function(e){c=!0;var t=u(Ce(e,n,!0),2),r=t[0],s=t[1];(0,a.extend)(o,r),s&&i.push.apply(i,l(s))};!t&&n.mixins.length&&n.mixins.forEach(s),e.extends&&s(e.extends),e.mixins&&e.mixins.forEach(s)}if(!r&&!c)return e.__props=a.EMPTY_ARR;if((0,a.isArray)(r))for(var f=0;f<r.length;f++){var d=(0,a.camelize)(r[f]);Ae(d)&&(o[d]=a.EMPTY_OBJ)}else if(r)for(var p in r){var v=(0,a.camelize)(p);if(Ae(v)){var h=r[p],m=o[v]=(0,a.isArray)(h)||(0,a.isFunction)(h)?{type:h}:h;if(m){var g=xe(Boolean,m.type),y=xe(String,m.type);m[0]=g>-1,m[1]=y<0||g<y,(g>-1||(0,a.hasOwn)(m,"default"))&&i.push(v)}}}return e.__props=[o,i]}function Ae(e){return"$"!==e[0]}function Te(e){var n=e&&e.toString().match(/^\s*function (\w+)/);return n?n[1]:""}function Pe(e,n){return Te(e)===Te(n)}function xe(e,n){if((0,a.isArray)(n)){for(var t=0,r=n.length;t<r;t++)if(Pe(n[t],e))return t}else if((0,a.isFunction)(n))return Pe(n,e)?0:-1;return-1}function ke(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ct,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(t){var a=t[e]||(t[e]=[]),i=n.__weh||(n.__weh=function(){if(!t.isUnmounted){(0,o.pauseTracking)(),Pt(t);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];var u=y(n,t,e,a);return Pt(null),(0,o.resetTracking)(),u}});return r?a.unshift(i):a.push(i),i}}var Re=function(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ct;return!xt&&ke(e,n,t)}},je=Re("bm");n.onBeforeMount=je;var Me=Re("m");n.onMounted=Me;var Fe=Re("bu");n.onBeforeUpdate=Fe;var Ne=Re("u");n.onUpdated=Ne;var Ie=Re("bum");n.onBeforeUnmount=Ie;var Be=Re("um");n.onUnmounted=Be;var Le=Re("rtg");n.onRenderTriggered=Le;var Ue=Re("rtc");n.onRenderTracked=Ue;var Ve=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ct;ke("ec",e,n)};n.onErrorCaptured=Ve;var De={};function He(e,n,t){return ze(e,n,t)}function ze(e,n){var t,r,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a.EMPTY_OBJ,u=i.immediate,c=i.deep,l=i.flush,s=i.onTrack,f=i.onTrigger,d=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Ct,p=!1;if((0,o.isRef)(e)?(t=function(){return e.value},p=!!e._shallow):(0,o.isReactive)(e)?(t=function(){return e},c=!0):t=(0,a.isArray)(e)?function(){return e.map((function(e){return(0,o.isRef)(e)?e.value:(0,o.isReactive)(e)?$e(e):(0,a.isFunction)(e)?g(e,d,2):void 0}))}:(0,a.isFunction)(e)?n?function(){return g(e,d,2)}:function(){if(!d||!d.isUnmounted)return r&&r(),g(e,d,3,[m])}:a.NOOP,n&&c){var v=t;t=function(){return $e(v())}}var h,m=function(e){r=O.options.onStop=function(){g(e,d,4)}},b=(0,a.isArray)(e)?[]:De,_=function(){if(O.active)if(n){var e=O();(c||p||(0,a.hasChanged)(e,b))&&(r&&r(),y(n,d,3,[e,b===De?void 0:b,m]),b=e)}else O()};_.allowRecurse=!!n,h="sync"===l?_:"post"===l?function(){return Tn(_,d&&d.suspense)}:function(){!d||d.isMounted?L(_):_()};var O=(0,o.effect)(t,{lazy:!0,onTrack:s,onTrigger:f,scheduler:h});return Mt(O),n?u?_():b=O():"post"===l?Tn(O,d&&d.suspense):O(),function(){(0,o.stop)(O),d&&(0,a.remove)(d.effects,O)}}function Ye(e,n,t){var r=this.proxy;return ze((0,a.isString)(e)?function(){return r[e]}:e.bind(r),n.bind(r),t,this)}function $e(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new Set;if(!(0,a.isObject)(e)||n.has(e))return e;if(n.add(e),(0,o.isRef)(e))$e(e.value,n);else if((0,a.isArray)(e))for(var t=0;t<e.length;t++)$e(e[t],n);else if((0,a.isSet)(e)||(0,a.isMap)(e))e.forEach((function(e){$e(e,n)}));else for(var r in e)$e(e[r],n);return e}function Ge(){var e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Me((function(){e.isMounted=!0})),Ie((function(){e.isUnmounting=!0})),e}var Ke=[Function,Array],Je={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Ke,onEnter:Ke,onAfterEnter:Ke,onEnterCancelled:Ke,onBeforeLeave:Ke,onLeave:Ke,onAfterLeave:Ke,onLeaveCancelled:Ke,onBeforeAppear:Ke,onAppear:Ke,onAfterAppear:Ke,onAppearCancelled:Ke},setup:function(e,n){var t,r=n.slots,a=At(),i=Ge();return function(){var n=r.default&&en(r.default(),!0);if(n&&n.length){var u=(0,o.toRaw)(e),c=u.mode,l=n[0];if(i.isLeaving)return Ze(l);var s=Xe(l);if(!s)return Ze(l);var f=We(s,u,i,a);Qe(s,f);var d=a.subTree,p=d&&Xe(d),v=!1,h=s.type.getTransitionKey;if(h){var m=h();void 0===t?t=m:m!==t&&(t=m,v=!0)}if(p&&p.type!==zn&&(!Xn(s,p)||v)){var g=We(p,u,i,a);if(Qe(p,g),"out-in"===c)return i.isLeaving=!0,g.afterLeave=function(){i.isLeaving=!1,a.update()},Ze(l);"in-out"===c&&(g.delayLeave=function(e,n,t){qe(i,p)[String(p.key)]=p,e._leaveCb=function(){n(),e._leaveCb=void 0,delete f.delayedLeave},f.delayedLeave=t})}return l}}}};function qe(e,n){var t=e.leavingVNodes,r=t.get(n.type);return r||(r=Object.create(null),t.set(n.type,r)),r}function We(e,n,t,r){var o=n.appear,a=n.mode,i=n.persisted,u=void 0!==i&&i,c=n.onBeforeEnter,l=n.onEnter,s=n.onAfterEnter,f=n.onEnterCancelled,d=n.onBeforeLeave,p=n.onLeave,v=n.onAfterLeave,h=n.onLeaveCancelled,m=n.onBeforeAppear,g=n.onAppear,b=n.onAfterAppear,_=n.onAppearCancelled,O=String(e.key),w=qe(t,e),S=function(e,n){e&&y(e,r,9,n)},E={mode:a,persisted:u,beforeEnter:function(n){var r=c;if(!t.isMounted){if(!o)return;r=m||c}n._leaveCb&&n._leaveCb(!0);var a=w[O];a&&Xn(e,a)&&a.el._leaveCb&&a.el._leaveCb(),S(r,[n])},enter:function(e){var n=l,r=s,a=f;if(!t.isMounted){if(!o)return;n=g||l,r=b||s,a=_||f}var i=!1,u=e._enterCb=function(n){i||(i=!0,S(n?a:r,[e]),E.delayedLeave&&E.delayedLeave(),e._enterCb=void 0)};n?(n(e,u),n.length<=1&&u()):u()},leave:function(n,r){var o=String(e.key);if(n._enterCb&&n._enterCb(!0),t.isUnmounting)return r();S(d,[n]);var a=!1,i=n._leaveCb=function(t){a||(a=!0,r(),S(t?h:v,[n]),n._leaveCb=void 0,w[o]===e&&delete w[o])};w[o]=e,p?(p(n,i),p.length<=1&&i()):i()},clone:function(e){return We(e,n,t,r)}};return E}function Ze(e){if(nn(e))return(e=rt(e)).children=null,e}function Xe(e){return nn(e)?e.children?e.children[0]:void 0:e}function Qe(e,n){6&e.shapeFlag&&e.component?Qe(e.component.subTree,n):128&e.shapeFlag?(e.ssContent.transition=n.clone(e.ssContent),e.ssFallback.transition=n.clone(e.ssFallback)):e.transition=n}function en(e){for(var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=[],r=0,o=0;o<e.length;o++){var a=e[o];a.type===Dn?(128&a.patchFlag&&r++,t=t.concat(en(a.children,n))):(n||a.type!==zn)&&t.push(a)}if(r>1)for(var i=0;i<t.length;i++)t[i].patchFlag=-2;return t}n.BaseTransition=Je;var nn=function(e){return e.type.__isKeepAlive},tn={name:"KeepAlive",__isKeepAlive:!0,inheritRef:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup:function(e,n){var t=n.slots,r=new Map,o=new Set,i=null,c=At(),l=c.suspense,s=c.ctx,f=s.renderer,d=f.p,p=f.m,v=f.um,h=(0,f.o.createElement)("div");function m(e){sn(e),v(e,c,l)}function g(e){r.forEach((function(n,t){var r=rn(n.type);!r||e&&e(r)||y(t)}))}function y(e){var n=r.get(e);i&&n.type===i.type?i&&sn(i):m(n),r.delete(e),o.delete(e)}s.activate=function(e,n,t,r,o){var i=e.component;p(e,n,t,0,l),d(i.vnode,e,n,t,i,l,r,o),Tn((function(){i.isDeactivated=!1,i.a&&(0,a.invokeArrayFns)(i.a);var n=e.props&&e.props.onVnodeMounted;n&&kn(n,i.parent,e)}),l)},s.deactivate=function(e){var n=e.component;p(e,h,null,1,l),Tn((function(){n.da&&(0,a.invokeArrayFns)(n.da);var t=e.props&&e.props.onVnodeUnmounted;t&&kn(t,n.parent,e),n.isDeactivated=!0}),l)},He((function(){return[e.include,e.exclude]}),(function(e){var n=u(e,2),t=n[0],r=n[1];t&&g((function(e){return on(t,e)})),r&&g((function(e){return!on(r,e)}))}),{flush:"post"});var b=null,_=function(){null!=b&&r.set(b,fn(c.subTree))};return Me(_),Ne(_),Ie((function(){r.forEach((function(e){var n=c.subTree,t=c.suspense,r=fn(n);if(e.type!==r.type)m(e);else{sn(r);var o=r.component.da;o&&Tn(o,t)}}))})),function(){if(b=null,!t.default)return null;var n=t.default(),a=n[0];if(n.length>1)return i=null,n;if(!Zn(a)||!(4&a.shapeFlag||128&a.shapeFlag))return i=null,a;var u=fn(a),c=u.type,l=rn(c),s=e.include,f=e.exclude,d=e.max;if(s&&(!l||!on(s,l))||f&&l&&on(f,l))return i=u,a;var p=null==u.key?c:u.key,v=r.get(p);return u.el&&(u=rt(u),128&a.shapeFlag&&(a.ssContent=u)),b=p,v?(u.el=v.el,u.component=v.component,u.transition&&Qe(u,u.transition),u.shapeFlag|=512,o.delete(p),o.add(p)):(o.add(p),d&&o.size>parseInt(d,10)&&y(o.values().next().value)),u.shapeFlag|=256,i=u,a}}};function rn(e){return e.displayName||e.name}function on(e,n){return(0,a.isArray)(e)?e.some((function(e){return on(e,n)})):(0,a.isString)(e)?e.split(",").indexOf(n)>-1:!!e.test&&e.test(n)}function an(e,n){cn(e,"a",n)}function un(e,n){cn(e,"da",n)}function cn(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ct,r=e.__wdc||(e.__wdc=function(){for(var n=t;n;){if(n.isDeactivated)return;n=n.parent}e()});if(ke(n,r,t),t)for(var o=t.parent;o&&o.parent;)nn(o.parent.vnode)&&ln(r,n,t,o),o=o.parent}function ln(e,n,t,r){var o=ke(n,e,r,!0);Be((function(){(0,a.remove)(r[n],o)}),t)}function sn(e){var n=e.shapeFlag;256&n&&(n-=256),512&n&&(n-=512),e.shapeFlag=n}function fn(e){return 128&e.shapeFlag?e.ssContent:e}n.KeepAlive=tn;var dn=function(e){return"_"===e[0]||"$stable"===e},pn=function(e){return(0,a.isArray)(e)?e.map(at):[at(e)]},vn=function(e,n,t){return ge((function(e){return pn(n(e))}),t)},hn=function(e,n){var t=e._ctx;for(var r in e)if(!dn(r)){var o=e[r];(0,a.isFunction)(o)?n[r]=vn(0,o,t):null!=o&&function(){var e=pn(o);n[r]=function(){return e}}()}},mn=function(e,n){var t=pn(n);e.slots.default=function(){return t}},gn=function(e,n){if(32&e.vnode.shapeFlag){var t=n._;t?(e.slots=n,(0,a.def)(n,"_",t)):hn(n,e.slots={})}else e.slots={},n&&mn(e,n);(0,a.def)(e.slots,Qn,1)};function yn(e,n,t,r){for(var o=e.dirs,a=n&&n.dirs,i=0;i<o.length;i++){var u=o[i];a&&(u.oldValue=a[i].value);var c=u.dir[r];c&&y(c,t,8,[e.el,u,e,n])}}function bn(){return{app:null,config:{isNativeTag:a.NO,performance:!1,globalProperties:{},optionMergeStrategies:{},isCustomElement:a.NO,errorHandler:void 0,warnHandler:void 0},mixins:[],components:{},directives:{},provides:Object.create(null)}}var _n=0;function On(e,n){return function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null==r||(0,a.isObject)(r)||(r=null);var o=bn(),i=new Set,u=!1,c=o.app={_uid:_n++,_component:t,_props:r,_container:null,_context:o,version:Ht,get config(){return o.config},set config(e){},use:function(e){for(var n=arguments.length,t=new Array(n>1?n-1:0),r=1;r<n;r++)t[r-1]=arguments[r];return i.has(e)||(e&&(0,a.isFunction)(e.install)?(i.add(e),e.install.apply(e,[c].concat(t))):(0,a.isFunction)(e)&&(i.add(e),e.apply(void 0,[c].concat(t)))),c},mixin:function(e){return __VUE_OPTIONS_API__&&(o.mixins.includes(e)||(o.mixins.push(e),(e.props||e.emits)&&(o.deopt=!0))),c},component:function(e,n){return n?(o.components[e]=n,c):o.components[e]},directive:function(e,n){return n?(o.directives[e]=n,c):o.directives[e]},mount:function(a,i){if(!u){var l=tt(t,r);return l.appContext=o,i&&n?n(l,a):e(l,a),u=!0,c._container=a,a.__vue_app__=c,__VUE_PROD_DEVTOOLS__&&$(c,Ht),l.component.proxy}},unmount:function(){u&&(e(null,c._container),__VUE_PROD_DEVTOOLS__&&G(c))},provide:function(e,n){return o.provides[e]=n,c}};return c}}var wn=!1,Sn=function(e){return/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName},En=function(e){return 8===e.nodeType};function Cn(e){var n=e.mt,t=e.p,r=e.o,o=r.patchProp,i=r.nextSibling,u=r.parentNode,c=r.remove,l=r.insert,s=r.createComment,f=function t(r,o,a,c){var l=arguments.length>4&&void 0!==arguments[4]&&arguments[4],s=En(r)&&"["===r.data,f=function(){return h(r,o,a,c,s)},g=o.type,y=o.ref,b=o.shapeFlag,_=r.nodeType;o.el=r;var O=null;switch(g){case Hn:3!==_?O=f():(r.data!==o.children&&(wn=!0,r.data=o.children),O=i(r));break;case zn:O=8!==_||s?f():i(r);break;case Yn:if(1===_){O=r;for(var w=!o.children.length,S=0;S<o.staticCount;S++)w&&(o.children+=O.outerHTML),S===o.staticCount-1&&(o.anchor=O),O=i(O);return O}O=f();break;case Dn:O=s?v(r,o,a,c,l):f();break;default:if(1&b)O=1!==_||o.type!==r.tagName.toLowerCase()?f():d(r,o,a,c,l);else if(6&b){var E=u(r),C=function(){n(o,E,null,a,c,Sn(E),l)},A=o.type.__asyncLoader;A?A().then(C):C(),O=s?m(r):i(r)}else 64&b?O=8!==_?f():o.type.hydrate(r,o,a,c,l,e,p):128&b&&(O=o.type.hydrate(r,o,a,c,Sn(u(r)),l,e,t))}return null!=y&&a&&Pn(y,null,a,c,o),O},d=function(e,n,t,r,i){i=i||!!n.dynamicChildren;var u=n.props,l=n.patchFlag,s=n.shapeFlag,f=n.dirs;if(-1!==l){if(f&&yn(n,null,t,"created"),u)if(!i||16&l||32&l)for(var d in u)!(0,a.isReservedProp)(d)&&(0,a.isOn)(d)&&o(e,d,null,u[d]);else u.onClick&&o(e,"onClick",null,u.onClick);var v;if((v=u&&u.onVnodeBeforeMount)&&kn(v,t,n),f&&yn(n,null,t,"beforeMount"),((v=u&&u.onVnodeMounted)||f)&&pe((function(){v&&kn(v,t,n),f&&yn(n,null,t,"mounted")}),r),16&s&&(!u||!u.innerHTML&&!u.textContent))for(var h=p(e.firstChild,n,e,t,r,i);h;){wn=!0;var m=h;h=h.nextSibling,c(m)}else 8&s&&e.textContent!==n.children&&(wn=!0,e.textContent=n.children)}return e.nextSibling},p=function(e,n,r,o,a,i){i=i||!!n.dynamicChildren;for(var u=n.children,c=u.length,l=0;l<c;l++){var s=i?u[l]:u[l]=at(u[l]);e?e=f(e,s,o,a,i):(wn=!0,t(null,s,r,null,o,a,Sn(r)))}return e},v=function(e,n,t,r,o){var a=u(e),c=p(i(e),n,a,t,r,o);return c&&En(c)&&"]"===c.data?i(n.anchor=c):(wn=!0,l(n.anchor=s("]"),a,c),c)},h=function(e,n,r,o,a){if(wn=!0,n.el=null,a)for(var l=m(e);;){var s=i(e);if(!s||s===l)break;c(s)}var f=i(e),d=u(e);return c(e),t(null,n,d,f,r,o,Sn(d)),f},m=function(e){for(var n=0;e;)if((e=i(e))&&En(e)&&("["===e.data&&n++,"]"===e.data)){if(0===n)return i(e);n--}return e};return[function(e,n){wn=!1,f(n.firstChild,e,null,null),D(),wn&&console.error("Hydration completed but contains mismatches.")},f]}var An={scheduler:N,allowRecurse:!0},Tn=pe,Pn=function e(n,t,r,i,u){if((0,a.isArray)(n))n.forEach((function(n,o){return e(n,t&&((0,a.isArray)(t)?t[o]:t),r,i,u)}));else{var c;c=u?4&u.shapeFlag?u.component.proxy:u.el:null;var l=n.i,s=n.r,f=t&&t.r,d=l.refs===a.EMPTY_OBJ?l.refs={}:l.refs,p=l.setupState;if(null!=f&&f!==s&&((0,a.isString)(f)?(d[f]=null,(0,a.hasOwn)(p,f)&&(p[f]=null)):(0,o.isRef)(f)&&(f.value=null)),(0,a.isString)(s)){var v=function(){d[s]=c,(0,a.hasOwn)(p,s)&&(p[s]=c)};c?(v.id=-1,Tn(v,i)):v()}else if((0,o.isRef)(s)){var h=function(){s.value=c};c?(h.id=-1,Tn(h,i)):h()}else(0,a.isFunction)(s)&&g(s,r,12,[c,d])}};function xn(e,n){"boolean"!=typeof __VUE_OPTIONS_API__&&((0,a.getGlobalThis)().__VUE_OPTIONS_API__=!0),"boolean"!=typeof __VUE_PROD_DEVTOOLS__&&((0,a.getGlobalThis)().__VUE_PROD_DEVTOOLS__=!1);var t,r,i=e.insert,c=e.remove,l=e.patchProp,s=e.forcePatchProp,f=e.createElement,d=e.createText,p=e.createComment,v=e.setText,h=e.setElementText,m=e.parentNode,g=e.nextSibling,y=e.setScopeId,b=void 0===y?a.NOOP:y,_=e.cloneNode,O=e.insertStaticContent,w=function(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:null,i=arguments.length>6&&void 0!==arguments[6]&&arguments[6],u=arguments.length>7&&void 0!==arguments[7]&&arguments[7];e&&!Xn(e,n)&&(r=oe(e),G(e,o,a,!0),e=null),-2===n.patchFlag&&(u=!1,n.dynamicChildren=null);var c=n.type,l=n.ref,s=n.shapeFlag;switch(c){case Hn:E(e,n,t,r);break;case zn:C(e,n,t,r);break;case Yn:null==e&&A(n,t,r,i);break;case Dn:F(e,n,t,r,o,a,i,u);break;default:1&s?T(e,n,t,r,o,a,i,u):6&s?N(e,n,t,r,o,a,i,u):(64&s||128&s)&&c.process(e,n,t,r,o,a,i,u,ce)}null!=l&&o&&Pn(l,e&&e.ref,o,a,n)},E=function(e,n,t,r){if(null==e)i(n.el=d(n.children),t,r);else{var o=n.el=e.el;n.children!==e.children&&v(o,n.children)}},C=function(e,n,t,r){null==e?i(n.el=p(n.children||""),t,r):n.el=e.el},A=function(e,n,t,r){var o=u(O(e.children,n,t,r),2);e.el=o[0],e.anchor=o[1]},T=function(e,n,t,r,o,a,i,u){i=i||"svg"===n.type,null==e?P(n,t,r,o,a,i,u):R(e,n,o,a,i,u)},P=function(e,n,t,r,o,u,c){var s,d,p=e.type,v=e.props,m=e.shapeFlag,g=e.transition,y=e.scopeId,b=e.patchFlag,O=e.dirs;if(e.el&&void 0!==_&&-1===b)s=e.el=_(e.el);else{if(s=e.el=f(e.type,u,v&&v.is),8&m?h(s,e.children):16&m&&k(e.children,s,null,r,o,u&&"foreignObject"!==p,c||!!e.dynamicChildren),O&&yn(e,null,r,"created"),v){for(var w in v)(0,a.isReservedProp)(w)||l(s,w,null,v[w],u,e.children,r,o,te);(d=v.onVnodeBeforeMount)&&kn(d,r,e)}x(s,y,e,r)}__VUE_PROD_DEVTOOLS__&&(Object.defineProperty(s,"__vnode",{value:e,enumerable:!1}),Object.defineProperty(s,"__vueParentComponent",{value:r,enumerable:!1})),O&&yn(e,null,r,"beforeMount");var S=(!o||o&&!o.pendingBranch)&&g&&!g.persisted;S&&g.beforeEnter(s),i(s,n,t),((d=v&&v.onVnodeMounted)||S||O)&&Tn((function(){d&&kn(d,r,e),S&&g.enter(s),O&&yn(e,null,r,"mounted")}),o)},x=function e(n,t,r,o){if(t&&b(n,t),o){var a=o.type.__scopeId;a&&a!==t&&b(n,a+"-s"),r===o.subTree&&e(n,o.vnode.scopeId,o.vnode,o.parent)}},k=function(e,n,t,r,o,a,i){for(var u=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,c=u;c<e.length;c++){var l=e[c]=i?it(e[c]):at(e[c]);w(null,l,n,t,r,o,a,i)}},R=function(e,n,t,r,o,i){var u=n.el=e.el,c=n.patchFlag,f=n.dynamicChildren,d=n.dirs;c|=16&e.patchFlag;var p,v=e.props||a.EMPTY_OBJ,m=n.props||a.EMPTY_OBJ;if((p=m.onVnodeBeforeUpdate)&&kn(p,t,n,e),d&&yn(n,e,t,"beforeUpdate"),c>0){if(16&c)M(u,n,v,m,t,r,o);else if(2&c&&v.class!==m.class&&l(u,"class",null,m.class,o),4&c&&l(u,"style",v.style,m.style,o),8&c)for(var g=n.dynamicProps,y=0;y<g.length;y++){var b=g[y],_=v[b],O=m[b];(O!==_||s&&s(u,b))&&l(u,b,_,O,o,e.children,t,r,te)}1&c&&e.children!==n.children&&h(u,n.children)}else i||null!=f||M(u,n,v,m,t,r,o);var w=o&&"foreignObject"!==n.type;f?j(e.dynamicChildren,f,u,t,r,w):i||H(e,n,u,null,t,r,w),((p=m.onVnodeUpdated)||d)&&Tn((function(){p&&kn(p,t,n,e),d&&yn(n,e,t,"updated")}),r)},j=function(e,n,t,r,o,a){for(var i=0;i<n.length;i++){var u=e[i],c=n[i],l=u.type===Dn||!Xn(u,c)||6&u.shapeFlag||64&u.shapeFlag?m(u.el):t;w(u,c,l,null,r,o,a,!0)}},M=function(e,n,t,r,o,i,u){if(t!==r){for(var c in r)if(!(0,a.isReservedProp)(c)){var f=r[c],d=t[c];(f!==d||s&&s(e,c))&&l(e,c,d,f,u,n.children,o,i,te)}if(t!==a.EMPTY_OBJ)for(var p in t)(0,a.isReservedProp)(p)||p in r||l(e,p,t[p],null,u,n.children,o,i,te)}},F=function(e,n,t,r,o,a,u,c){var l=n.el=e?e.el:d(""),s=n.anchor=e?e.anchor:d(""),f=n.patchFlag,p=n.dynamicChildren;f>0&&(c=!0),null==e?(i(l,t,r),i(s,t,r),k(n.children,t,s,o,a,u,c)):f>0&&64&f&&p?(j(e.dynamicChildren,p,t,o,a,u),(null!=n.key||o&&n===o.subTree)&&Rn(e,n,!0)):H(e,n,t,s,o,a,u,c)},N=function(e,n,t,r,o,a,i,u){null==e?512&n.shapeFlag?o.ctx.activate(n,t,r,i,u):I(n,t,r,o,a,i,u):B(e,n,u)},I=function(e,n,t,r,o,i,u){var c=e.component=function(e,n,t){var r=e.type,o=(n?n.appContext:e.appContext)||St,i={uid:Et++,vnode:e,type:r,parent:n,appContext:o,root:null,next:null,subTree:null,update:null,render:null,proxy:null,withProxy:null,effects:null,provides:n?n.provides:Object.create(o.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Ce(r,o),emitsOptions:Q(r,o),emit:null,emitted:null,ctx:a.EMPTY_OBJ,data:a.EMPTY_OBJ,props:a.EMPTY_OBJ,attrs:a.EMPTY_OBJ,slots:a.EMPTY_OBJ,refs:a.EMPTY_OBJ,setupState:a.EMPTY_OBJ,setupContext:null,suspense:t,suspenseId:t?t.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null};return i.ctx={_:i},i.root=n?n.root:i,i.emit=X.bind(null,i),__VUE_PROD_DEVTOOLS__&&K(i),i}(e,r,o);if(nn(e)&&(c.ctx.renderer=ce),function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];xt=n;var t=e.vnode,r=t.props,o=t.children,a=4&t.shapeFlag;we(e,r,a,n),gn(e,o);a&&kt(e,n);xt=!1}(c),c.asyncDep){if(o&&o.registerDep(c,L),!e.el){var l=c.subTree=tt(zn);C(null,l,n,t)}}else L(c,e,n,t,o,i,u)},B=function(e,n,t){var r,o,a=n.component=e.component;if(function(e,n,t){var r=e.props,o=e.children,a=e.component,i=n.props,u=n.children,c=n.patchFlag,l=a.emitsOptions;if(n.dirs||n.transition)return!0;if(!(t&&c>0))return!(!o&&!u||u&&u.$stable)||r!==i&&(r?!i||ie(r,i,l):!!i);if(1024&c)return!0;if(16&c)return r?ie(r,i,l):!!i;if(8&c)for(var s=n.dynamicProps,f=0;f<s.length;f++){var d=s[f];if(i[d]!==r[d]&&!ee(l,d))return!0}return!1}(e,n,t)){if(a.asyncDep&&!a.asyncResolved)return void U(a,n,t);a.next=n,r=a.update,(o=S.indexOf(r))>-1&&(S[o]=null),a.update()}else n.component=e.component,n.el=e.el,a.vnode=n},L=function(e,n,t,i,u,c,l){e.update=(0,o.effect)((function(){if(e.isMounted){var o,s=e.next,f=e.bu,d=e.u,p=e.parent,v=e.vnode,h=s;s?(s.el=v.el,U(e,s,l)):s=v,f&&(0,a.invokeArrayFns)(f),(o=s.props&&s.props.onVnodeBeforeUpdate)&&kn(o,p,s,v);var g=re(e),y=e.subTree;e.subTree=g,w(y,g,m(y.el),oe(y),e,u,c),s.el=g.el,null===h&&ue(e,g.el),d&&Tn(d,u),(o=s.props&&s.props.onVnodeUpdated)&&Tn((function(){kn(o,p,s,v)}),u),__VUE_PROD_DEVTOOLS__&&J(e)}else{var b,_=n.el,O=n.props,S=e.bm,E=e.m,C=e.parent;S&&(0,a.invokeArrayFns)(S),(b=O&&O.onVnodeBeforeMount)&&kn(b,C,n);var A=e.subTree=re(e);_&&r?r(n.el,A,e,u):(w(null,A,t,i,e,u,c),n.el=A.el),E&&Tn(E,u),(b=O&&O.onVnodeMounted)&&Tn((function(){kn(b,C,n)}),u);var T=e.a;T&&256&n.shapeFlag&&Tn(T,u),e.isMounted=!0}}),An)},U=function(e,n,t){n.component=e;var r=e.vnode.props;e.vnode=n,e.next=null,function(e,n,t,r){var i=e.props,c=e.attrs,l=e.vnode.patchFlag,s=(0,o.toRaw)(i),f=u(e.propsOptions,1)[0];if(!(r||l>0)||16&l){var d;for(var p in Se(e,n,i,c),s)n&&((0,a.hasOwn)(n,p)||(d=(0,a.hyphenate)(p))!==p&&(0,a.hasOwn)(n,d))||(f?!t||void 0===t[p]&&void 0===t[d]||(i[p]=Ee(f,n||a.EMPTY_OBJ,p,void 0,e)):delete i[p]);if(c!==s)for(var v in c)n&&(0,a.hasOwn)(n,v)||delete c[v]}else if(8&l)for(var h=e.vnode.dynamicProps,m=0;m<h.length;m++){var g=h[m],y=n[g];if(f)if((0,a.hasOwn)(c,g))c[g]=y;else{var b=(0,a.camelize)(g);i[b]=Ee(f,s,b,y,e)}else c[g]=y}(0,o.trigger)(e,"set","$attrs")}(e,n.props,r,t),function(e,n){var t=e.vnode,r=e.slots,o=!0,i=a.EMPTY_OBJ;if(32&t.shapeFlag){var u=n._;u?1===u?o=!1:(0,a.extend)(r,n):(o=!n.$stable,hn(n,r)),i=n}else n&&(mn(e,n),i={default:1});if(o)for(var c in r)dn(c)||c in i||delete r[c]}(e,n.children),V(void 0,e.update)},H=function(e,n,t,r,o,a,i){var u=arguments.length>7&&void 0!==arguments[7]&&arguments[7],c=e&&e.children,l=e?e.shapeFlag:0,s=n.children,f=n.patchFlag,d=n.shapeFlag;if(f>0){if(128&f)return void Y(c,s,t,r,o,a,i,u);if(256&f)return void z(c,s,t,r,o,a,i,u)}8&d?(16&l&&te(c,o,a),s!==c&&h(t,s)):16&l?16&d?Y(c,s,t,r,o,a,i,u):te(c,o,a,!0):(8&l&&h(t,""),16&d&&k(s,t,r,o,a,i,u))},z=function(e,n,t,r,o,i,u,c){e=e||a.EMPTY_ARR,n=n||a.EMPTY_ARR;var l,s=e.length,f=n.length,d=Math.min(s,f);for(l=0;l<d;l++){var p=n[l]=c?it(n[l]):at(n[l]);w(e[l],p,t,null,o,i,u,c)}s>f?te(e,o,i,!0,!1,d):k(n,t,r,o,i,u,c,d)},Y=function(e,n,t,r,o,i,u,c){for(var l=0,s=n.length,f=e.length-1,d=s-1;l<=f&&l<=d;){var p=e[l],v=n[l]=c?it(n[l]):at(n[l]);if(!Xn(p,v))break;w(p,v,t,null,o,i,u,c),l++}for(;l<=f&&l<=d;){var h=e[f],m=n[d]=c?it(n[d]):at(n[d]);if(!Xn(h,m))break;w(h,m,t,null,o,i,u,c),f--,d--}if(l>f){if(l<=d)for(var g=d+1,y=g<s?n[g].el:r;l<=d;)w(null,n[l]=c?it(n[l]):at(n[l]),t,y,o,i,u),l++}else if(l>d)for(;l<=f;)G(e[l],o,i,!0),l++;else{var b,_=l,O=l,S=new Map;for(l=O;l<=d;l++){var E=n[l]=c?it(n[l]):at(n[l]);null!=E.key&&S.set(E.key,l)}var C=0,A=d-O+1,T=!1,P=0,x=new Array(A);for(l=0;l<A;l++)x[l]=0;for(l=_;l<=f;l++){var k=e[l];if(C>=A)G(k,o,i,!0);else{var R=void 0;if(null!=k.key)R=S.get(k.key);else for(b=O;b<=d;b++)if(0===x[b-O]&&Xn(k,n[b])){R=b;break}void 0===R?G(k,o,i,!0):(x[R-O]=l+1,R>=P?P=R:T=!0,w(k,n[R],t,null,o,i,u,c),C++)}}var j=T?function(e){var n,t,r,o,a,i=e.slice(),u=[0],c=e.length;for(n=0;n<c;n++){var l=e[n];if(0!==l){if(e[t=u[u.length-1]]<l){i[n]=t,u.push(n);continue}for(r=0,o=u.length-1;r<o;)e[u[a=(r+o)/2|0]]<l?r=a+1:o=a;l<e[u[r]]&&(r>0&&(i[n]=u[r-1]),u[r]=n)}}for(o=u[(r=u.length)-1];r-- >0;)u[r]=o,o=i[o];return u}(x):a.EMPTY_ARR;for(b=j.length-1,l=A-1;l>=0;l--){var M=O+l,F=n[M],N=M+1<s?n[M+1].el:r;0===x[l]?w(null,F,t,N,o,i,u):T&&(b<0||l!==j[b]?$(F,t,N,2):b--)}}},$=function e(n,t,r,o){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,u=n.el,c=n.type,l=n.transition,s=n.children,f=n.shapeFlag;if(6&f)e(n.component.subTree,t,r,o);else if(128&f)n.suspense.move(t,r,o);else if(64&f)c.move(n,t,r,ce);else if(c!==Dn){var d=2!==o&&1&f&&l;if(d)if(0===o)l.beforeEnter(u),i(u,t,r),Tn((function(){return l.enter(u)}),a);else{var p=l.leave,v=l.delayLeave,h=l.afterLeave,m=function(){return i(u,t,r)},g=function(){p(u,(function(){m(),h&&h()}))};v?v(u,m,g):g()}else i(u,t,r)}else{i(u,t,r);for(var y=0;y<s.length;y++)e(s[y],t,r,o);i(n.anchor,t,r)}},G=function(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a=e.type,i=e.props,u=e.ref,c=e.children,l=e.dynamicChildren,s=e.shapeFlag,f=e.patchFlag,d=e.dirs;if(null!=u&&n&&Pn(u,null,n,t,null),256&s)n.ctx.deactivate(e);else{var p,v=1&s&&d;if((p=i&&i.onVnodeBeforeUnmount)&&kn(p,n,e),6&s)ne(e.component,t,r);else{if(128&s)return void e.suspense.unmount(t,r);v&&yn(e,null,n,"beforeUnmount"),l&&(a!==Dn||f>0&&64&f)?te(l,n,t,!1,!0):(a===Dn&&(128&f||256&f)||!o&&16&s)&&te(c,n,t),64&s&&(r||!Mn(e.props))&&e.type.remove(e,ce),r&&W(e)}((p=i&&i.onVnodeUnmounted)||v)&&Tn((function(){p&&kn(p,n,e),v&&yn(e,null,n,"unmounted")}),t)}},W=function(e){var n=e.type,t=e.el,r=e.anchor,o=e.transition;if(n!==Dn){var a=function(){c(t),o&&!o.persisted&&o.afterLeave&&o.afterLeave()};if(1&e.shapeFlag&&o&&!o.persisted){var i=o.leave,u=o.delayLeave,l=function(){return i(t,a)};u?u(e.el,a,l):l()}else a()}else Z(t,r)},Z=function(e,n){for(var t;e!==n;)t=g(e),c(e),e=t;c(n)},ne=function(e,n,t){var r=e.bum,i=e.effects,u=e.update,c=e.subTree,l=e.um;if(r&&(0,a.invokeArrayFns)(r),i)for(var s=0;s<i.length;s++)(0,o.stop)(i[s]);u&&((0,o.stop)(u),G(c,e,n,t)),l&&Tn(l,n),Tn((function(){e.isUnmounted=!0}),n),n&&n.pendingBranch&&!n.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===n.pendingId&&(n.deps--,0===n.deps&&n.resolve()),__VUE_PROD_DEVTOOLS__&&q(e)},te=function(e,n,t){for(var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,i=a;i<e.length;i++)G(e[i],n,t,r,o)},oe=function e(n){return 6&n.shapeFlag?e(n.component.subTree):128&n.shapeFlag?n.suspense.next():g(n.anchor||n.el)},ae=function(e,n){null==e?n._vnode&&G(n._vnode,null,null,!0):w(n._vnode||null,e,n),D(),n._vnode=e},ce={p:w,um:G,m:$,r:W,mt:I,mc:k,pc:H,pbc:j,n:oe,o:e};if(n){var le=u(n(ce),2);t=le[0],r=le[1]}return{render:ae,hydrate:t,createApp:On(ae,t)}}function kn(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;y(e,n,7,[t,r])}function Rn(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=e.children,o=n.children;if((0,a.isArray)(r)&&(0,a.isArray)(o))for(var i=0;i<r.length;i++){var u=r[i],c=o[i];1&c.shapeFlag&&!c.dynamicChildren&&((c.patchFlag<=0||32===c.patchFlag)&&((c=o[i]=it(o[i])).el=u.el),t||Rn(u,c))}}var jn=function(e){return e.__isTeleport},Mn=function(e){return e&&(e.disabled||""===e.disabled)},Fn=function(e,n){var t=e&&e.to;return(0,a.isString)(t)?n?n(t):null:t};function Nn(e,n,t,r){var o=r.o.insert,a=r.m,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:2;0===i&&o(e.targetAnchor,n,t);var u=e.el,c=e.anchor,l=e.shapeFlag,s=e.children,f=e.props,d=2===i;if(d&&o(u,n,t),(!d||Mn(f))&&16&l)for(var p=0;p<s.length;p++)a(s[p],n,t,2);d&&o(c,n,t)}var In={__isTeleport:!0,process:function(e){function n(n,t,r,o,a,i,u,c,l){return e.apply(this,arguments)}return n.toString=function(){return e.toString()},n}((function(e,n,t,r,o,a,i,u,c){var l=c.mc,s=c.pc,f=c.pbc,d=c.o,p=d.insert,v=d.querySelector,h=d.createText,m=(d.createComment,Mn(n.props)),g=n.shapeFlag,y=n.children;if(null==e){var b=n.el=h(""),_=n.anchor=h("");p(b,t,r),p(_,t,r);var O=n.target=Fn(n.props,v),w=n.targetAnchor=h("");O&&p(w,O);var S=function(e,n){16&g&&l(y,e,n,o,a,i,u)};m?S(t,_):O&&S(O,w)}else{n.el=e.el;var E=n.anchor=e.anchor,C=n.target=e.target,A=n.targetAnchor=e.targetAnchor,T=Mn(e.props),P=T?t:C,x=T?E:A;if(n.dynamicChildren?(f(e.dynamicChildren,n.dynamicChildren,P,o,a,i),Rn(e,n,!0)):u||s(e,n,P,x,o,a,i),m)T||Nn(n,t,E,c,1);else if((n.props&&n.props.to)!==(e.props&&e.props.to)){var k=n.target=Fn(n.props,v);k&&Nn(n,k,null,c,0)}else T&&Nn(n,C,A,c,1)}})),remove:function(e,n){var t=n.r,r=n.o.remove,o=e.shapeFlag,a=e.children;if(r(e.anchor),16&o)for(var i=0;i<a.length;i++)t(a[i])},move:Nn,hydrate:function(e,n,t,r,o,a,i){var u=a.o,c=u.nextSibling,l=u.parentNode,s=u.querySelector,f=n.target=Fn(n.props,s);if(f){var d=f._lpa||f.firstChild;16&n.shapeFlag&&(Mn(n.props)?(n.anchor=i(c(e),n,l(e),t,r,o),n.targetAnchor=d):(n.anchor=c(e),n.targetAnchor=i(d,n,f,t,r,o)),f._lpa=n.targetAnchor&&c(n.targetAnchor))}return n.anchor&&c(n.anchor)}};n.Teleport=In;var Bn="components",Ln=Symbol();function Un(e,n){var t=ne||Ct;if(t){var r=t.type;if(e===Bn){var o=r.displayName||r.name;if(o&&(o===n||o===(0,a.camelize)(n)||o===(0,a.capitalize)((0,a.camelize)(n))))return r}return Vn(t[e]||r[e],n)||Vn(t.appContext[e],n)}}function Vn(e,n){return e&&(e[n]||e[(0,a.camelize)(n)]||e[(0,a.capitalize)((0,a.camelize)(n))])}var Dn=Symbol(void 0);n.Fragment=Dn;var Hn=Symbol(void 0);n.Text=Hn;var zn=Symbol(void 0);n.Comment=zn;var Yn=Symbol(void 0);n.Static=Yn;var $n=[],Gn=null;function Kn(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];$n.push(Gn=e?null:[])}function Jn(){$n.pop(),Gn=$n[$n.length-1]||null}var qn=1;function Wn(e,n,t,r,o){var i=tt(e,n,t,r,o,!0);return i.dynamicChildren=Gn||a.EMPTY_ARR,Jn(),qn>0&&Gn&&Gn.push(i),i}function Zn(e){return!!e&&!0===e.__v_isVNode}function Xn(e,n){return e.type===n.type&&e.key===n.key}var Qn="__vInternal",et=function(e){var n=e.key;return null!=n?n:null},nt=function(e){var n=e.ref;return null!=n?(0,a.isArray)(n)?n:{i:ne,r:n}:null},tt=function(e){var n,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,u=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,l=arguments.length>5&&void 0!==arguments[5]&&arguments[5];if(e&&e!==Ln||(e=zn),Zn(e)){var s=rt(e,t,!0);return r&&ut(s,r),s}if(Bt(e)&&(e=e.__vccOpts),t){((0,o.isProxy)(t)||Qn in t)&&(t=(0,a.extend)({},t));var f=t,d=f.class,p=f.style;d&&!(0,a.isString)(d)&&(t.class=(0,a.normalizeClass)(d)),(0,a.isObject)(p)&&((0,o.isProxy)(p)&&!(0,a.isArray)(p)&&(p=(0,a.extend)({},p)),t.style=(0,a.normalizeStyle)(p))}var v=(0,a.isString)(e)?1:ce(e)?128:jn(e)?64:(0,a.isObject)(e)?4:(0,a.isFunction)(e)?2:0,h=(c(n={__v_isVNode:!0},"__v_skip",!0),c(n,"type",e),c(n,"props",t),c(n,"key",t&&et(t)),c(n,"ref",t&&nt(t)),c(n,"scopeId",ye),c(n,"children",null),c(n,"component",null),c(n,"suspense",null),c(n,"ssContent",null),c(n,"ssFallback",null),c(n,"dirs",null),c(n,"transition",null),c(n,"el",null),c(n,"anchor",null),c(n,"target",null),c(n,"targetAnchor",null),c(n,"staticCount",0),c(n,"shapeFlag",v),c(n,"patchFlag",i),c(n,"dynamicProps",u),c(n,"dynamicChildren",null),c(n,"appContext",null),n);if(ut(h,r),128&v){var m=fe(h),g=m.content,y=m.fallback;h.ssContent=g,h.ssFallback=y}return qn>0&&!l&&Gn&&(i>0||6&v)&&32!==i&&Gn.push(h),h};function rt(e,n){var t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=e.props,i=e.ref,u=e.patchFlag,l=n?ct(o||{},n):o;return c(t={__v_isVNode:!0},"__v_skip",!0),c(t,"type",e.type),c(t,"props",l),c(t,"key",l&&et(l)),c(t,"ref",n&&n.ref?r&&i?(0,a.isArray)(i)?i.concat(nt(n)):[i,nt(n)]:nt(n):i),c(t,"scopeId",e.scopeId),c(t,"children",e.children),c(t,"target",e.target),c(t,"targetAnchor",e.targetAnchor),c(t,"staticCount",e.staticCount),c(t,"shapeFlag",e.shapeFlag),c(t,"patchFlag",n&&e.type!==Dn?-1===u?16:16|u:u),c(t,"dynamicProps",e.dynamicProps),c(t,"dynamicChildren",e.dynamicChildren),c(t,"appContext",e.appContext),c(t,"dirs",e.dirs),c(t,"transition",e.transition),c(t,"component",e.component),c(t,"suspense",e.suspense),c(t,"ssContent",e.ssContent&&rt(e.ssContent)),c(t,"ssFallback",e.ssFallback&&rt(e.ssFallback)),c(t,"el",e.el),c(t,"anchor",e.anchor),t}function ot(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:" ",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return tt(Hn,null,e,n)}function at(e){return null==e||"boolean"==typeof e?tt(zn):(0,a.isArray)(e)?tt(Dn,null,e):"object"===i(e)?null===e.el?e:rt(e):tt(Hn,null,String(e))}function it(e){return null===e.el?e:rt(e)}function ut(e,n){var t=0,r=e.shapeFlag;if(null==n)n=null;else if((0,a.isArray)(n))t=16;else if("object"===i(n)){if(1&r||64&r){var o=n.default;return void(o&&(o._c&&me(1),ut(e,o()),o._c&&me(-1)))}t=32;var u=n._;u||Qn in n?3===u&&ne&&(1024&ne.vnode.patchFlag?(n._=2,e.patchFlag|=1024):n._=1):n._ctx=ne}else(0,a.isFunction)(n)?(n={default:n,_ctx:ne},t=32):(n=String(n),64&r?(t=16,n=[ot(n)]):t=8);e.children=n,e.shapeFlag|=t}function ct(){for(var e=(0,a.extend)({},arguments.length<=0?void 0:arguments[0]),n=1;n<arguments.length;n++){var t=n<0||arguments.length<=n?void 0:arguments[n];for(var r in t)if("class"===r)e.class!==t.class&&(e.class=(0,a.normalizeClass)([e.class,t.class]));else if("style"===r)e.style=(0,a.normalizeStyle)([e.style,t.style]);else if((0,a.isOn)(r)){var o=e[r],i=t[r];o!==i&&(e[r]=o?[].concat(o,t[r]):i)}else""!==r&&(e[r]=t[r])}return e}function lt(e,n){if(Ct){var t=Ct.provides,r=Ct.parent&&Ct.parent.provides;r===t&&(t=Ct.provides=Object.create(r)),t[e]=n}}function st(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=Ct||ne;if(r){var o=null==r.parent?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides;if(o&&e in o)return o[e];if(arguments.length>1)return t&&(0,a.isFunction)(n)?n():n}}n.createVNode=tt;var ft=!1;function dt(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],i=arguments.length>5&&void 0!==arguments[5]&&arguments[5],u=n.mixins,c=n.extends,l=n.data,s=n.computed,f=n.methods,d=n.watch,p=n.provide,v=n.inject,h=n.components,m=n.directives,g=n.beforeMount,y=n.mounted,b=n.beforeUpdate,_=n.updated,O=n.activated,w=n.deactivated,S=(n.beforeDestroy,n.beforeUnmount),E=(n.destroyed,n.unmounted),C=n.render,A=n.renderTracked,T=n.renderTriggered,P=n.errorCaptured,x=e.proxy,k=e.ctx,R=e.appContext.mixins;if(i&&C&&e.render===a.NOOP&&(e.render=C),i||(ft=!0,pt("beforeCreate","bc",n,e,R),ft=!1,mt(e,R,t,r,o)),c&&dt(e,c,t,r,o,!0),u&&mt(e,u,t,r,o),v)if((0,a.isArray)(v))for(var j=0;j<v.length;j++){var M=v[j];k[M]=st(M)}else for(var F in v){var N=v[F];(0,a.isObject)(N)?k[F]=st(N.from||F,N.default,!0):k[F]=st(N)}if(f)for(var I in f){var B=f[I];(0,a.isFunction)(B)&&(k[I]=B.bind(x))}if(i?l&&t.push(l):(t.length&&t.forEach((function(n){return gt(e,n,x)})),l&&gt(e,l,x)),s){var L=function(e){var n=s[e],t=Lt({get:(0,a.isFunction)(n)?n.bind(x,x):(0,a.isFunction)(n.get)?n.get.bind(x,x):a.NOOP,set:!(0,a.isFunction)(n)&&(0,a.isFunction)(n.set)?n.set.bind(x):a.NOOP});Object.defineProperty(k,e,{enumerable:!0,configurable:!0,get:function(){return t.value},set:function(e){return t.value=e}})};for(var U in s)L(U)}d&&r.push(d),!i&&r.length&&r.forEach((function(e){for(var n in e)yt(e[n],k,x,n)})),p&&o.push(p),!i&&o.length&&o.forEach((function(e){var n=(0,a.isFunction)(e)?e.call(x):e;for(var t in n)lt(t,n[t])})),i&&(h&&(0,a.extend)(e.components||(e.components=(0,a.extend)({},e.type.components)),h),m&&(0,a.extend)(e.directives||(e.directives=(0,a.extend)({},e.type.directives)),m)),i||pt("created","c",n,e,R),g&&je(g.bind(x)),y&&Me(y.bind(x)),b&&Fe(b.bind(x)),_&&Ne(_.bind(x)),O&&an(O.bind(x)),w&&un(w.bind(x)),P&&Ve(P.bind(x)),A&&Ue(A.bind(x)),T&&Le(T.bind(x)),S&&Ie(S.bind(x)),E&&Be(E.bind(x))}function pt(e,n,t,r,o){ht(e,n,o,r);var a=t.extends,i=t.mixins;a&&vt(e,n,a,r),i&&ht(e,n,i,r);var u=t[e];u&&y(u.bind(r.proxy),r,n)}function vt(e,n,t,r){t.extends&&vt(e,n,t.extends,r);var o=t[e];o&&y(o.bind(r.proxy),r,n)}function ht(e,n,t,r){for(var o=0;o<t.length;o++){var a=t[o].mixins;a&&ht(e,n,a,r);var i=t[o][e];i&&y(i.bind(r.proxy),r,n)}}function mt(e,n,t,r,o){for(var a=0;a<n.length;a++)dt(e,n[a],t,r,o,!0)}function gt(e,n,t){var r=n.call(t,t);(0,a.isObject)(r)&&(e.data===a.EMPTY_OBJ?e.data=(0,o.reactive)(r):(0,a.extend)(e.data,r))}function yt(e,n,t,r){var o=r.includes(".")?function(e,n){var t=n.split(".");return function(){for(var n=e,r=0;r<t.length&&n;r++)n=n[t[r]];return n}}(t,r):function(){return t[r]};if((0,a.isString)(e)){var i=n[e];(0,a.isFunction)(i)&&He(o,i)}else if((0,a.isFunction)(e))He(o,e.bind(t));else if((0,a.isObject)(e))if((0,a.isArray)(e))e.forEach((function(e){return yt(e,n,t,r)}));else{var u=(0,a.isFunction)(e.handler)?e.handler.bind(t):n[e.handler];(0,a.isFunction)(u)&&He(o,u,e)}}function bt(e,n,t){var r=t.appContext.config.optionMergeStrategies,o=n.mixins,i=n.extends;for(var u in i&&bt(e,i,t),o&&o.forEach((function(n){return bt(e,n,t)})),n)r&&(0,a.hasOwn)(r,u)?e[u]=r[u](e[u],n[u],t.proxy,u):e[u]=n[u]}var _t=(0,a.extend)(Object.create(null),{$:function(e){return e},$el:function(e){return e.vnode.el},$data:function(e){return e.data},$props:function(e){return e.props},$attrs:function(e){return e.attrs},$slots:function(e){return e.slots},$refs:function(e){return e.refs},$parent:function(e){return e.parent&&e.parent.proxy},$root:function(e){return e.root&&e.root.proxy},$emit:function(e){return e.emit},$options:function(e){return __VUE_OPTIONS_API__?function(e){var n=e.type,t=n.__merged,r=n.mixins,o=n.extends;if(t)return t;var a=e.appContext.mixins;if(!a.length&&!r&&!o)return n;var i={};return a.forEach((function(n){return bt(i,n,e)})),bt(i,n,e),n.__merged=i}(e):e.type},$forceUpdate:function(e){return function(){return N(e.update)}},$nextTick:function(e){return F.bind(e.proxy)},$watch:function(e){return __VUE_OPTIONS_API__?Ye.bind(e):a.NOOP}}),Ot={get:function(e,n){var t,r=e._,i=r.ctx,u=r.setupState,c=r.data,l=r.props,s=r.accessCache,f=r.type,d=r.appContext;if("__v_skip"===n)return!0;if("$"!==n[0]){var p=s[n];if(void 0!==p)switch(p){case 0:return u[n];case 1:return c[n];case 3:return i[n];case 2:return l[n]}else{if(u!==a.EMPTY_OBJ&&(0,a.hasOwn)(u,n))return s[n]=0,u[n];if(c!==a.EMPTY_OBJ&&(0,a.hasOwn)(c,n))return s[n]=1,c[n];if((t=r.propsOptions[0])&&(0,a.hasOwn)(t,n))return s[n]=2,l[n];if(i!==a.EMPTY_OBJ&&(0,a.hasOwn)(i,n))return s[n]=3,i[n];__VUE_OPTIONS_API__&&ft||(s[n]=4)}}var v,h,m=_t[n];return m?("$attrs"===n&&(0,o.track)(r,"get",n),m(r)):(v=f.__cssModules)&&(v=v[n])?v:i!==a.EMPTY_OBJ&&(0,a.hasOwn)(i,n)?(s[n]=3,i[n]):(h=d.config.globalProperties,(0,a.hasOwn)(h,n)?h[n]:void 0)},set:function(e,n,t){var r=e._,o=r.data,i=r.setupState,u=r.ctx;if(i!==a.EMPTY_OBJ&&(0,a.hasOwn)(i,n))i[n]=t;else if(o!==a.EMPTY_OBJ&&(0,a.hasOwn)(o,n))o[n]=t;else if(n in r.props)return!1;return!("$"===n[0]&&n.slice(1)in r||(u[n]=t,0))},has:function(e,n){var t,r=e._,o=r.data,i=r.setupState,u=r.accessCache,c=r.ctx,l=r.appContext,s=r.propsOptions;return void 0!==u[n]||o!==a.EMPTY_OBJ&&(0,a.hasOwn)(o,n)||i!==a.EMPTY_OBJ&&(0,a.hasOwn)(i,n)||(t=s[0])&&(0,a.hasOwn)(t,n)||(0,a.hasOwn)(c,n)||(0,a.hasOwn)(_t,n)||(0,a.hasOwn)(l.config.globalProperties,n)}},wt=(0,a.extend)({},Ot,{get:function(e,n){if(n!==Symbol.unscopables)return Ot.get(e,n,e)},has:function(e,n){return"_"!==n[0]&&!(0,a.isGloballyWhitelisted)(n)}}),St=bn(),Et=0,Ct=null,At=function(){return Ct||ne};n.getCurrentInstance=At;var Tt,Pt=function(e){Ct=e},xt=!1;function kt(e,n){var t=e.type;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,Ot);var r=t.setup;if(r){var i=e.setupContext=r.length>1?function(e){return{attrs:e.attrs,slots:e.slots,emit:e.emit}}(e):null;Ct=e,(0,o.pauseTracking)();var u=g(r,e,0,[e.props,i]);if((0,o.resetTracking)(),Ct=null,(0,a.isPromise)(u)){if(n)return u.then((function(n){Rt(e,n)}));e.asyncDep=u}else Rt(e,u)}else jt(e)}function Rt(e,n,t){(0,a.isFunction)(n)?e.render=n:(0,a.isObject)(n)&&(__VUE_PROD_DEVTOOLS__&&(e.devtoolsRawSetupState=n),e.setupState=(0,o.proxyRefs)(n)),jt(e)}function jt(e,n){var t=e.type;e.render||(Tt&&t.template&&!t.render&&(t.render=Tt(t.template,{isCustomElement:e.appContext.config.isCustomElement,delimiters:t.delimiters})),e.render=t.render||a.NOOP,e.render._rc&&(e.withProxy=new Proxy(e.ctx,wt))),__VUE_OPTIONS_API__&&(Ct=e,dt(e,t),Ct=null)}function Mt(e){Ct&&(Ct.effects||(Ct.effects=[])).push(e)}var Ft=/(?:^|[-_])(\w)/g,Nt=function(e){return e.replace(Ft,(function(e){return e.toUpperCase()})).replace(/[-_]/g,"")};function It(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=(0,a.isFunction)(n)&&n.displayName||n.name;if(!r&&n.__file){var o=n.__file.match(/([^/\\]+)\.vue$/);o&&(r=o[1])}if(!r&&e&&e.parent){var i=function(e){for(var t in e)if(e[t]===n)return t};r=i(e.components||e.parent.type.components)||i(e.appContext.components)}return r?Nt(r):t?"App":"Anonymous"}function Bt(e){return(0,a.isFunction)(e)&&"__vccOpts"in e}function Lt(e){var n=(0,o.computed)(e);return Mt(n.effect),n}function Ut(e){return(0,a.isFunction)(e)?{setup:e,name:e.name}:e}function Vt(e,n){var t=n.vnode,r=t.props,o=t.children;return tt(e,r,o)}var Dt=Symbol("");n.ssrContextKey=Dt,n.useSSRContext=function(){var e=st(Dt);return e||p("Server rendering context not provided. Make sure to only call useSsrContext() conditionally in the server build."),e};var Ht="3.0.2";n.version=Ht,n.ssrUtils=null},391:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0});var r={Transition:!0,TransitionGroup:!0,createApp:!0,createSSRApp:!0,hydrate:!0,render:!0,useCssModule:!0,useCssVars:!0,vModelCheckbox:!0,vModelDynamic:!0,vModelRadio:!0,vModelSelect:!0,vModelText:!0,vShow:!0,withKeys:!0,withModifiers:!0};n.useCssModule=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"$style",n=(0,o.getCurrentInstance)();if(!n)return a.EMPTY_OBJ;var t=n.type.__cssModules;if(!t)return a.EMPTY_OBJ;var r=t[e];return r||a.EMPTY_OBJ},n.useCssVars=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=(0,o.getCurrentInstance)();if(t){var r=n&&t.type.__scopeId?"".concat(t.type.__scopeId.replace(/^data-v-/,""),"-"):"",a=function(){return I(t.subTree,e(t.proxy),r)};(0,o.onMounted)((function(){return(0,o.watchEffect)(a)})),(0,o.onUpdated)(a)}},n.withModifiers=n.withKeys=n.vShow=n.vModelText=n.vModelSelect=n.vModelRadio=n.vModelDynamic=n.vModelCheckbox=n.render=n.hydrate=n.createSSRApp=n.createApp=n.TransitionGroup=n.Transition=void 0;var o=t(979);Object.keys(o).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(r,e)||e in n&&n[e]===o[e]||Object.defineProperty(n,e,{enumerable:!0,get:function(){return o[e]}}))}));var a=t(420);function i(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(t.push(i.value),!n||t.length!==n);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return t}}(e,n)||c(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e){return function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||c(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,n){if(e){if("string"==typeof e)return l(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?l(e,n):void 0}}function l(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var s,f,d="http://www.w3.org/2000/svg",p="undefined"!=typeof document?document:null,v={insert:function(e,n,t){n.insertBefore(e,t||null)},remove:function(e){var n=e.parentNode;n&&n.removeChild(e)},createElement:function(e,n,t){return n?p.createElementNS(d,e):p.createElement(e,t?{is:t}:void 0)},createText:function(e){return p.createTextNode(e)},createComment:function(e){return p.createComment(e)},setText:function(e,n){e.nodeValue=n},setElementText:function(e,n){e.textContent=n},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},querySelector:function(e){return p.querySelector(e)},setScopeId:function(e,n){e.setAttribute(n,"")},cloneNode:function(e){return e.cloneNode(!0)},insertStaticContent:function(e,n,t,r){var o=r?f||(f=p.createElementNS(d,"svg")):s||(s=p.createElement("div"));o.innerHTML=e;for(var a=o.firstChild,i=a,u=i;i;)u=i,v.insert(i,n,t),i=o.firstChild;return[a,u]}};function h(e,n,t){if(null==n&&(n=""),t)e.setAttribute("class",n);else{var r=e._vtc;r&&(n=(n?[n].concat(u(r)):u(r)).join(" ")),e.className=n}}function m(e,n,t){var r=e.style;if(t)if((0,a.isString)(t))n!==t&&(r.cssText=t);else{for(var o in t)y(r,o,t[o]);if(n&&!(0,a.isString)(n))for(var i in n)null==t[i]&&y(r,i,"")}else e.removeAttribute("style")}var g=/\s*!important$/;function y(e,n,t){if((0,a.isArray)(t))t.forEach((function(t){return y(e,n,t)}));else if(n.startsWith("--"))e.setProperty(n,t);else{var r=function(e,n){var t=_[n];if(t)return t;var r=(0,o.camelize)(n);if("filter"!==r&&r in e)return _[n]=r;r=(0,a.capitalize)(r);for(var i=0;i<b.length;i++){var u=b[i]+r;if(u in e)return _[n]=u}return n}(e,n);g.test(t)?e.setProperty((0,a.hyphenate)(r),t.replace(g,""),"important"):e[r]=t}}var b=["Webkit","Moz","ms"],_={},O="http://www.w3.org/1999/xlink";function w(e,n,t,r){if(r&&n.startsWith("xlink:"))null==t?e.removeAttributeNS(O,n.slice(6,n.length)):e.setAttributeNS(O,n,t);else{var o=(0,a.isSpecialBooleanAttr)(n);null==t||o&&!1===t?e.removeAttribute(n):e.setAttribute(n,o?"":t)}}function S(e,n,t,r,o,a,i){if("innerHTML"===n||"textContent"===n)return r&&i(r,o,a),void(e[n]=null==t?"":t);if("value"!==n||"PROGRESS"===e.tagName)if(""===t&&"boolean"==typeof e[n])e[n]=!0;else if(null==t&&"string"==typeof e[n])e[n]="",e.removeAttribute(n);else try{e[n]=t}catch(e){}else{e._value=t;var u=null==t?"":t;e.value!==u&&(e.value=u)}}var E=Date.now;"undefined"!=typeof document&&E()>document.createEvent("Event").timeStamp&&(E=function(){return performance.now()});var C=0,A=Promise.resolve(),T=function(){C=0};function P(e,n,t,r){e.addEventListener(n,t,r)}function x(e,n,t,r){e.removeEventListener(n,t,r)}function k(e,n,t,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,a=e._vei||(e._vei={}),u=a[n];if(r&&u)u.value=r;else{var c=j(n),l=i(c,2),s=l[0],f=l[1];if(r){var d=a[n]=M(r,o);P(e,s,d,f)}else u&&(x(e,s,u,f),a[n]=void 0)}}var R=/(?:Once|Passive|Capture)$/;function j(e){var n,t;if(R.test(e))for(n={};t=e.match(R);)e=e.slice(0,e.length-t[0].length),n[t[0].toLowerCase()]=!0;return[e.slice(2).toLowerCase(),n]}function M(e,n){var t=function e(t){(t.timeStamp||E())>=e.attached-1&&(0,o.callWithAsyncErrorHandling)(function(e,n){if((0,a.isArray)(n)){var t=e.stopImmediatePropagation;return e.stopImmediatePropagation=function(){t.call(e),e._stopped=!0},n.map((function(e){return function(n){return!n._stopped&&e(n)}}))}return n}(t,e.value),n,5,[t])};return t.value=e,t.attached=C||(A.then(T),C=E()),t}var F=/^on[a-z]/;function N(e,n,t,r){return r?"innerHTML"===n||!!(n in e&&F.test(n)&&(0,a.isFunction)(t)):!("spellcheck"===n||"draggable"===n||"form"===n&&"string"==typeof t||"list"===n&&"INPUT"===e.tagName||F.test(n)&&(0,a.isString)(t)||!(n in e))}function I(e,n,t){if(128&e.shapeFlag){var r=e.suspense;e=r.activeBranch,r.pendingBranch&&!r.isHydrating&&r.effects.push((function(){I(r.activeBranch,n,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el){var a=e.el.style;for(var i in n)a.setProperty("--".concat(t).concat(i),(0,o.unref)(n[i]))}else e.type===o.Fragment&&e.children.forEach((function(e){return I(e,n,t)}))}var B="transition",L="animation",U=function(e,n){var t=n.slots;return(0,o.h)(o.BaseTransition,H(e),t)};n.Transition=U,U.displayName="Transition";var V={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},D=U.props=(0,a.extend)({},o.BaseTransition.props,V);function H(e){var n=e.name,t=void 0===n?"v":n,r=e.type,o=e.css,i=void 0===o||o,u=e.duration,c=e.enterFromClass,l=void 0===c?"".concat(t,"-enter-from"):c,s=e.enterActiveClass,f=void 0===s?"".concat(t,"-enter-active"):s,d=e.enterToClass,p=void 0===d?"".concat(t,"-enter-to"):d,v=e.appearFromClass,h=void 0===v?l:v,m=e.appearActiveClass,g=void 0===m?f:m,y=e.appearToClass,b=void 0===y?p:y,_=e.leaveFromClass,O=void 0===_?"".concat(t,"-leave-from"):_,w=e.leaveActiveClass,S=void 0===w?"".concat(t,"-leave-active"):w,E=e.leaveToClass,C=void 0===E?"".concat(t,"-leave-to"):E,A={};for(var T in e)T in V||(A[T]=e[T]);if(!i)return A;var P=function(e){if(null==e)return null;if((0,a.isObject)(e))return[z(e.enter),z(e.leave)];var n=z(e);return[n,n]}(u),x=P&&P[0],k=P&&P[1],R=A.onBeforeEnter,j=A.onEnter,M=A.onEnterCancelled,F=A.onLeave,N=A.onLeaveCancelled,I=A.onBeforeAppear,B=void 0===I?R:I,L=A.onAppear,U=void 0===L?j:L,D=A.onAppearCancelled,H=void 0===D?M:D,J=function(e,n,t){$(e,n?b:p),$(e,n?g:f),t&&t()},q=function(e,n){$(e,C),$(e,S),n&&n()},W=function(e){return function(n,t){var o=e?U:j,a=function(){return J(n,e,t)};o&&o(n,a),G((function(){$(n,e?h:l),Y(n,e?b:p),o&&o.length>1||(x?setTimeout(a,x):K(n,r,a))}))}};return(0,a.extend)(A,{onBeforeEnter:function(e){R&&R(e),Y(e,f),Y(e,l)},onBeforeAppear:function(e){B&&B(e),Y(e,g),Y(e,h)},onEnter:W(!1),onAppear:W(!0),onLeave:function(e,n){var t=function(){return q(e,n)};Y(e,S),Y(e,O),G((function(){$(e,O),Y(e,C),F&&F.length>1||(k?setTimeout(t,k):K(e,r,t))})),F&&F(e,t)},onEnterCancelled:function(e){J(e,!1),M&&M(e)},onAppearCancelled:function(e){J(e,!0),H&&H(e)},onLeaveCancelled:function(e){q(e),N&&N(e)}})}function z(e){return(0,a.toNumber)(e)}function Y(e,n){n.split(/\s+/).forEach((function(n){return n&&e.classList.add(n)})),(e._vtc||(e._vtc=new Set)).add(n)}function $(e,n){n.split(/\s+/).forEach((function(n){return n&&e.classList.remove(n)}));var t=e._vtc;t&&(t.delete(n),t.size||(e._vtc=void 0))}function G(e){requestAnimationFrame((function(){requestAnimationFrame(e)}))}function K(e,n,t){var r=J(e,n),o=r.type,a=r.timeout,i=r.propCount;if(!o)return t();var u=o+"end",c=0,l=function(){e.removeEventListener(u,s),t()},s=function(n){n.target===e&&++c>=i&&l()};setTimeout((function(){c<i&&l()}),a+1),e.addEventListener(u,s)}function J(e,n){var t=window.getComputedStyle(e),r=function(e){return(t[e]||"").split(", ")},o=r("transitionDelay"),a=r("transitionDuration"),i=q(o,a),u=r("animationDelay"),c=r("animationDuration"),l=q(u,c),s=null,f=0,d=0;return n===B?i>0&&(s=B,f=i,d=a.length):n===L?l>0&&(s=L,f=l,d=c.length):d=(s=(f=Math.max(i,l))>0?i>l?B:L:null)?s===B?a.length:c.length:0,{type:s,timeout:f,propCount:d,hasTransform:s===B&&/\b(transform|all)(,|$)/.test(t.transitionProperty)}}function q(e,n){for(;e.length<n.length;)e=e.concat(e);return Math.max.apply(Math,u(n.map((function(n,t){return W(n)+W(e[t])}))))}function W(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Z(e){return e&&Z(e.__v_raw)||e}var X=new WeakMap,Q=new WeakMap,ee={name:"TransitionGroup",props:(0,a.extend)({},D,{tag:String,moveClass:String}),setup:function(e,n){var t,r,a=n.slots,i=(0,o.getCurrentInstance)(),u=(0,o.useTransitionState)();return(0,o.onUpdated)((function(){if(t.length){var n=e.moveClass||"".concat(e.name||"v","-move");if(function(e,n,t){var r=e.cloneNode();e._vtc&&e._vtc.forEach((function(e){e.split(/\s+/).forEach((function(e){return e&&r.classList.remove(e)}))})),t.split(/\s+/).forEach((function(e){return e&&r.classList.add(e)})),r.style.display="none";var o=1===n.nodeType?n:n.parentNode;o.appendChild(r);var a=J(r).hasTransform;return o.removeChild(r),a}(t[0].el,i.vnode.el,n)){t.forEach(ne),t.forEach(te);var r=t.filter(re);document.body.offsetHeight,r.forEach((function(e){var t=e.el,r=t.style;Y(t,n),r.transform=r.webkitTransform=r.transitionDuration="";var o=t._moveCb=function(e){e&&e.target!==t||e&&!/transform$/.test(e.propertyName)||(t.removeEventListener("transitionend",o),t._moveCb=null,$(t,n))};t.addEventListener("transitionend",o)}))}}})),function(){var n=Z(e),c=H(n),l=n.tag||o.Fragment;t=r,r=a.default?(0,o.getTransitionRawChildren)(a.default()):[];for(var s=0;s<r.length;s++){var f=r[s];null!=f.key&&(0,o.setTransitionHooks)(f,(0,o.resolveTransitionHooks)(f,c,u,i))}if(t)for(var d=0;d<t.length;d++){var p=t[d];(0,o.setTransitionHooks)(p,(0,o.resolveTransitionHooks)(p,c,u,i)),X.set(p,p.el.getBoundingClientRect())}return(0,o.createVNode)(l,null,r)}}};function ne(e){var n=e.el;n._moveCb&&n._moveCb(),n._enterCb&&n._enterCb()}function te(e){Q.set(e,e.el.getBoundingClientRect())}function re(e){var n=X.get(e),t=Q.get(e),r=n.left-t.left,o=n.top-t.top;if(r||o){var a=e.el.style;return a.transform=a.webkitTransform="translate(".concat(r,"px,").concat(o,"px)"),a.transitionDuration="0s",e}}n.TransitionGroup=ee;var oe=function(e){var n=e.props["onUpdate:modelValue"];return(0,a.isArray)(n)?function(e){return(0,a.invokeArrayFns)(n,e)}:n};function ae(e){e.target.composing=!0}function ie(e){var n=e.target;n.composing&&(n.composing=!1,function(e,n){var t=document.createEvent("HTMLEvents");t.initEvent("input",!0,!0),e.dispatchEvent(t)}(n))}var ue={created:function(e,n,t){var r=n.modifiers,o=r.lazy,i=r.trim,u=r.number;e._assign=oe(t);var c=u||"number"===e.type;P(e,o?"change":"input",(function(n){if(!n.target.composing){var t=e.value;i?t=t.trim():c&&(t=(0,a.toNumber)(t)),e._assign(t)}})),i&&P(e,"change",(function(){e.value=e.value.trim()})),o||(P(e,"compositionstart",ae),P(e,"compositionend",ie),P(e,"change",ie))},mounted:function(e,n){var t=n.value;e.value=null==t?"":t},beforeUpdate:function(e,n,t){var r=n.value,o=n.modifiers,i=o.trim,u=o.number;if(e._assign=oe(t),!e.composing){if(document.activeElement===e){if(i&&e.value.trim()===r)return;if((u||"number"===e.type)&&(0,a.toNumber)(e.value)===r)return}var c=null==r?"":r;e.value!==c&&(e.value=c)}}};n.vModelText=ue;var ce={created:function(e,n,t){le(e,n,t),e._assign=oe(t),P(e,"change",(function(){var n=e._modelValue,t=pe(e),r=e.checked,o=e._assign;if((0,a.isArray)(n)){var i=(0,a.looseIndexOf)(n,t),c=-1!==i;if(r&&!c)o(n.concat(t));else if(!r&&c){var l=u(n);l.splice(i,1),o(l)}}else(0,a.isSet)(n)?r?n.add(t):n.delete(t):o(ve(e,r))}))},beforeUpdate:function(e,n,t){e._assign=oe(t),le(e,n,t)}};function le(e,n,t){var r=n.value,o=n.oldValue;e._modelValue=r,(0,a.isArray)(r)?e.checked=(0,a.looseIndexOf)(r,t.props.value)>-1:(0,a.isSet)(r)?e.checked=r.has(t.props.value):r!==o&&(e.checked=(0,a.looseEqual)(r,ve(e,!0)))}n.vModelCheckbox=ce;var se={created:function(e,n,t){var r=n.value;e.checked=(0,a.looseEqual)(r,t.props.value),e._assign=oe(t),P(e,"change",(function(){e._assign(pe(e))}))},beforeUpdate:function(e,n,t){var r=n.value,o=n.oldValue;e._assign=oe(t),r!==o&&(e.checked=(0,a.looseEqual)(r,t.props.value))}};n.vModelRadio=se;var fe={created:function(e,n,t){var r=n.modifiers.number;P(e,"change",(function(){var n=Array.prototype.filter.call(e.options,(function(e){return e.selected})).map((function(e){return r?(0,a.toNumber)(pe(e)):pe(e)}));e._assign(e.multiple?n:n[0])})),e._assign=oe(t)},mounted:function(e,n){de(e,n.value)},beforeUpdate:function(e,n,t){e._assign=oe(t)},updated:function(e,n){de(e,n.value)}};function de(e,n){var t=e.multiple;if(!t||(0,a.isArray)(n)||(0,a.isSet)(n)){for(var r=0,o=e.options.length;r<o;r++){var i=e.options[r],u=pe(i);if(t)(0,a.isArray)(n)?i.selected=(0,a.looseIndexOf)(n,u)>-1:i.selected=n.has(u);else if((0,a.looseEqual)(pe(i),n))return void(e.selectedIndex=r)}t||(e.selectedIndex=-1)}}function pe(e){return"_value"in e?e._value:e.value}function ve(e,n){var t=n?"_trueValue":"_falseValue";return t in e?e[t]:n}n.vModelSelect=fe;var he={created:function(e,n,t){me(e,n,t,null,"created")},mounted:function(e,n,t){me(e,n,t,null,"mounted")},beforeUpdate:function(e,n,t,r){me(e,n,t,r,"beforeUpdate")},updated:function(e,n,t,r){me(e,n,t,r,"updated")}};function me(e,n,t,r,o){var a;switch(e.tagName){case"SELECT":a=fe;break;case"TEXTAREA":a=ue;break;default:switch(t.props&&t.props.type){case"checkbox":a=ce;break;case"radio":a=se;break;default:a=ue}}var i=a[o];i&&i(e,n,t,r)}n.vModelDynamic=he;var ge=["ctrl","shift","alt","meta"],ye={stop:function(e){return e.stopPropagation()},prevent:function(e){return e.preventDefault()},self:function(e){return e.target!==e.currentTarget},ctrl:function(e){return!e.ctrlKey},shift:function(e){return!e.shiftKey},alt:function(e){return!e.altKey},meta:function(e){return!e.metaKey},left:function(e){return"button"in e&&0!==e.button},middle:function(e){return"button"in e&&1!==e.button},right:function(e){return"button"in e&&2!==e.button},exact:function(e,n){return ge.some((function(t){return e["".concat(t,"Key")]&&!n.includes(t)}))}};n.withModifiers=function(e,n){return function(t){for(var r=0;r<n.length;r++){var o=ye[n[r]];if(o&&o(t,n))return}for(var a=arguments.length,i=new Array(a>1?a-1:0),u=1;u<a;u++)i[u-1]=arguments[u];return e.apply(void 0,[t].concat(i))}};var be={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"};n.withKeys=function(e,n){return function(t){if("key"in t){var r=(0,a.hyphenate)(t.key);if(n.some((function(e){return e===r||be[e]===r})))return e(t)}}};var _e={beforeMount:function(e,n,t){var r=n.value,o=t.transition;e._vod="none"===e.style.display?"":e.style.display,o&&r?o.beforeEnter(e):Oe(e,r)},mounted:function(e,n,t){var r=n.value,o=t.transition;o&&r&&o.enter(e)},updated:function(e,n,t){var r=n.value,o=n.oldValue,a=t.transition;!r!=!o&&(a?r?(a.beforeEnter(e),Oe(e,!0),a.enter(e)):a.leave(e,(function(){Oe(e,!1)})):Oe(e,r))},beforeUnmount:function(e,n){Oe(e,n.value)}};function Oe(e,n){e.style.display=n?e._vod:"none"}n.vShow=_e;var we,Se=(0,a.extend)({patchProp:function(e,n,t,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i=arguments.length>5?arguments[5]:void 0,u=arguments.length>6?arguments[6]:void 0,c=arguments.length>7?arguments[7]:void 0,l=arguments.length>8?arguments[8]:void 0;switch(n){case"class":h(e,r,o);break;case"style":m(e,t,r);break;default:(0,a.isOn)(n)?(0,a.isModelListener)(n)||k(e,n,t,r,u):N(e,n,r,o)?S(e,n,r,i,u,c,l):("true-value"===n?e._trueValue=r:"false-value"===n&&(e._falseValue=r),w(e,n,r,o))}},forcePatchProp:function(e,n){return"value"===n}},v),Ee=!1;function Ce(){return we||(we=(0,o.createRenderer)(Se))}function Ae(){return we=Ee?we:(0,o.createHydrationRenderer)(Se),Ee=!0,we}function Te(e){return(0,a.isString)(e)?document.querySelector(e):e}n.render=function(){var e;(e=Ce()).render.apply(e,arguments)},n.hydrate=function(){var e;(e=Ae()).hydrate.apply(e,arguments)},n.createApp=function(){var e,n=(e=Ce()).createApp.apply(e,arguments),t=n.mount;return n.mount=function(e){var r=Te(e);if(r){var o=n._component;(0,a.isFunction)(o)||o.render||o.template||(o.template=r.innerHTML),r.innerHTML="";var i=t(r);return r.removeAttribute("v-cloak"),r.setAttribute("data-v-app",""),i}},n},n.createSSRApp=function(){var e,n=(e=Ae()).createApp.apply(e,arguments),t=n.mount;return n.mount=function(e){var n=Te(e);if(n)return t(n,!0)},n}},420:(e,n,t)=>{var r;function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||i(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,n){if(e){if("string"==typeof e)return u(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?u(e,n):void 0}}function u(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){for(var t=Object.create(null),r=e.split(","),o=0;o<r.length;o++)t[r[o]]=!0;return n?function(e){return!!t[e.toLowerCase()]}:function(e){return!!t[e]}}Object.defineProperty(n,"__esModule",{value:!0}),n.escapeHtml=function(e){var n=""+e,t=C.exec(n);if(!t)return n;var r,o,a="",i=0;for(o=t.index;o<n.length;o++){switch(n.charCodeAt(o)){case 34:r="&quot;";break;case 38:r="&amp;";break;case 39:r="&#39;";break;case 60:r="&lt;";break;case 62:r="&gt;";break;default:continue}i!==o&&(a+=n.substring(i,o)),i=o+1,a+=r}return i!==o?a+n.substring(i,o):a},n.escapeHtmlComment=function(e){return e.replace(A,"")},n.generateCodeFrame=function(e){for(var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.length,r=e.split(/\r?\n/),o=0,a=[],i=0;i<r.length;i++)if((o+=r[i].length+1)>=n){for(var u=i-2;u<=i+2||t>o;u++)if(!(u<0||u>=r.length)){var c=u+1;a.push("".concat(c).concat(" ".repeat(Math.max(3-String(c).length,0)),"|  ").concat(r[u]));var l=r[u].length;if(u===i){var s=n-(o-l)+1,f=Math.max(1,t>o?l-s:t-n);a.push("   |  "+" ".repeat(s)+"^".repeat(f))}else if(u>i){if(t>o){var d=Math.max(Math.min(t-o,l),1);a.push("   |  "+"^".repeat(d))}o+=l+1}}break}return a.join("\n")},n.isSSRSafeAttrName=function(e){if(m.hasOwnProperty(e))return m[e];var n=h.test(e);return n&&console.error("unsafe attribute name: ".concat(e)),m[e]=!n},n.looseEqual=T,n.looseIndexOf=function(e,n){return e.findIndex((function(e){return T(e,n)}))},n.makeMap=l,n.normalizeClass=function e(n){var t="";if(B(n))t=n;else if(j(n))for(var r=0;r<n.length;r++)t+=e(n[r])+" ";else if(L(n))for(var o in n)n[o]&&(t+=o+" ");return t.trim()},n.normalizeStyle=function e(n){if(j(n)){for(var t={},r=0;r<n.length;r++){var o=n[r],a=e(B(o)?O(o):o);if(a)for(var i in a)t[i]=a[i]}return t}if(L(n))return n},n.parseStringStyle=O,n.stringifyStyle=function(e){var n="";if(!e)return n;for(var t in e){var r=e[t],o=t.startsWith("--")?t:K(t);(B(r)||"number"==typeof r&&g(o))&&(n+="".concat(o,":").concat(r,";"))}return n},n.toTypeString=n.toRawType=n.toNumber=n.toHandlerKey=n.toDisplayString=n.remove=n.propsToAttrMap=n.objectToString=n.isVoidTag=n.isSymbol=n.isString=n.isSpecialBooleanAttr=n.isSet=n.isSVGTag=n.isReservedProp=n.isPromise=n.isPlainObject=n.isOn=n.isObject=n.isNoUnitNumericStyleProp=n.isModelListener=n.isMap=n.isKnownAttr=n.isIntegerKey=n.isHTMLTag=n.isGloballyWhitelisted=n.isFunction=n.isDate=n.isBooleanAttr=n.isArray=n.invokeArrayFns=n.hyphenate=n.hasOwn=n.hasChanged=n.getGlobalThis=n.extend=n.def=n.capitalize=n.camelize=n.babelParserDefaultPlugins=n.PatchFlagNames=n.NOOP=n.NO=n.EMPTY_OBJ=n.EMPTY_ARR=void 0;var s=(c(r={},1,"TEXT"),c(r,2,"CLASS"),c(r,4,"STYLE"),c(r,8,"PROPS"),c(r,16,"FULL_PROPS"),c(r,32,"HYDRATE_EVENTS"),c(r,64,"STABLE_FRAGMENT"),c(r,128,"KEYED_FRAGMENT"),c(r,256,"UNKEYED_FRAGMENT"),c(r,1024,"DYNAMIC_SLOTS"),c(r,512,"NEED_PATCH"),c(r,-1,"HOISTED"),c(r,-2,"BAIL"),r);n.PatchFlagNames=s;var f=l("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl");n.isGloballyWhitelisted=f;var d="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",p=l(d);n.isSpecialBooleanAttr=p;var v=l(d+",async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");n.isBooleanAttr=v;var h=/[>/="'\u0009\u000a\u000c\u0020]/,m={};n.propsToAttrMap={acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"};var g=l("animation-iteration-count,border-image-outset,border-image-slice,border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,stroke-miterlimit,stroke-opacity,stroke-width");n.isNoUnitNumericStyleProp=g;var y=l("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap");n.isKnownAttr=y;var b=/;(?![^(]*\))/g,_=/:(.+)/;function O(e){var n={};return e.split(b).forEach((function(e){if(e){var t=e.split(_);t.length>1&&(n[t[0].trim()]=t[1].trim())}})),n}var w=l("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot");n.isHTMLTag=w;var S=l("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view");n.isSVGTag=S;var E=l("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");n.isVoidTag=E;var C=/["'&<>]/,A=/^-?>|<!--|-->|--!>|<!-$/g;function T(e,n){if(e===n)return!0;var t=N(e),r=N(n);if(t||r)return!(!t||!r)&&e.getTime()===n.getTime();if(t=j(e),r=j(n),t||r)return!(!t||!r)&&function(e,n){if(e.length!==n.length)return!1;for(var t=!0,r=0;t&&r<e.length;r++)t=T(e[r],n[r]);return t}(e,n);if(t=L(e),r=L(n),t||r){if(!t||!r)return!1;if(Object.keys(e).length!==Object.keys(n).length)return!1;for(var o in e){var a=e.hasOwnProperty(o),i=n.hasOwnProperty(o);if(a&&!i||!a&&i||!T(e[o],n[o]))return!1}}return String(e)===String(n)}n.toDisplayString=function(e){return null==e?"":L(e)?JSON.stringify(e,P,2):String(e)};var P=function(e,n){return M(n)?c({},"Map(".concat(n.size,")"),a(n.entries()).reduce((function(e,n){var t,r,o=(r=2,function(e){if(Array.isArray(e))return e}(t=n)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(t.push(i.value),!n||t.length!==n);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return t}}(t,r)||i(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],u=o[1];return e["".concat(a," =>")]=u,e}),{})):F(n)?c({},"Set(".concat(n.size,")"),a(n.values())):!L(n)||j(n)||D(n)?n:String(n)};n.babelParserDefaultPlugins=["bigInt","optionalChaining","nullishCoalescingOperator"];n.EMPTY_OBJ={};n.EMPTY_ARR=[],n.NOOP=function(){},n.NO=function(){return!1};var x=/^on[^a-z]/;n.isOn=function(e){return x.test(e)},n.isModelListener=function(e){return e.startsWith("onUpdate:")};var k=Object.assign;n.extend=k,n.remove=function(e,n){var t=e.indexOf(n);t>-1&&e.splice(t,1)};var R=Object.prototype.hasOwnProperty;n.hasOwn=function(e,n){return R.call(e,n)};var j=Array.isArray;n.isArray=j;var M=function(e){return"[object Map]"===V(e)};n.isMap=M;var F=function(e){return"[object Set]"===V(e)};n.isSet=F;var N=function(e){return e instanceof Date};n.isDate=N;var I=function(e){return"function"==typeof e};n.isFunction=I;var B=function(e){return"string"==typeof e};n.isString=B,n.isSymbol=function(e){return"symbol"===o(e)};var L=function(e){return null!==e&&"object"===o(e)};n.isObject=L,n.isPromise=function(e){return L(e)&&I(e.then)&&I(e.catch)};var U=Object.prototype.toString;n.objectToString=U;var V=function(e){return U.call(e)};n.toTypeString=V,n.toRawType=function(e){return V(e).slice(8,-1)};var D=function(e){return"[object Object]"===V(e)};n.isPlainObject=D,n.isIntegerKey=function(e){return B(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e};var H=l(",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");n.isReservedProp=H;var z=function(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}},Y=/-(\w)/g,$=z((function(e){return e.replace(Y,(function(e,n){return n?n.toUpperCase():""}))}));n.camelize=$;var G=/\B([A-Z])/g,K=z((function(e){return e.replace(G,"-$1").toLowerCase()}));n.hyphenate=K;var J=z((function(e){return e.charAt(0).toUpperCase()+e.slice(1)}));n.capitalize=J;var q,W=z((function(e){return e?"on".concat(J(e)):""}));n.toHandlerKey=W,n.hasChanged=function(e,n){return e!==n&&(e==e||n==n)},n.invokeArrayFns=function(e,n){for(var t=0;t<e.length;t++)e[t](n)},n.def=function(e,n,t){Object.defineProperty(e,n,{configurable:!0,enumerable:!1,value:t})},n.toNumber=function(e){var n=parseFloat(e);return isNaN(n)?e:n},n.getGlobalThis=function(){return q||(q="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t.g?t.g:{})}},634:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},757:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,o=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(t.push(i.value),!n||t.length!==n);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return t}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var u=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),l="/*# ".concat(c," */"),s=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(s).concat([l]).join("\n")}return[a].join("\n")}},327:(e,n)=>{Object.defineProperty(n,"X",{value:!0}),n.Z=void 0,n.Z={data:function(){return{}}}},998:(e,n)=>{Object.defineProperty(n,"X",{value:!0}),n.Z=void 0;var t={data:function(){return{}},created:function(){console.log(window.location);var e=window.location.origin;$.ajax({type:"post",url:e+"upload",success:function(e){console.log(e)}})}};n.Z=t},667:()=>{},890:(e,n,t)=>{n.s=function(e,n,t,a,i,u){var c=(0,r.resolveComponent)("router-view");return(0,r.openBlock)(),(0,r.createBlock)("div",o,[(0,r.createVNode)(c)])};var r=t(876),o={id:"app"}},22:(e,n,t)=>{n.s=void 0;var r=t(876),o=(0,r.withScopeId)("data-v-44d847d8");(0,r.pushScopeId)("data-v-44d847d8");var a={class:"index"},i=(0,r.createVNode)("input",{type:"file",class:"upload_file"},null,-1);(0,r.popScopeId)();var u=o((function(e,n,t,o,u,c){return(0,r.openBlock)(),(0,r.createBlock)("div",a,[i])}));n.s=u},137:(e,n,t)=>{n.s=function(e,n,t,a,i,u){return(0,r.openBlock)(),(0,r.createBlock)("div",o," aaaadsadasd ")};var r=t(876),o={class:"test"}},284:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.createMemoryHistory=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=[],t=[""],r=0;function o(e){++r===t.length||t.splice(r),t.push(e)}function a(e,t,r){var o,a={direction:r.direction,delta:r.delta,type:w.pop},i=l(n);try{for(i.s();!(o=i.n()).done;)(0,o.value)(e,t,a)}catch(e){i.e(e)}finally{i.f()}}var i={location:"",state:{},base:e,createHref:F.bind(null,e),replace:function(e){t.splice(r--,1),o(e)},push:function(e,n){o(e)},listen:function(e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}},destroy:function(){n=[]},go:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],o=this.location,i=e<0?S.back:S.forward;r=Math.max(0,Math.min(r+e,t.length-1)),n&&a(this.location,o,{direction:i,delta:e})}};return Object.defineProperty(i,"location",{get:function(){return t[r]}}),i},n.createRouter=function(e){var n=re(e.routes,e),t=e.parseQuery||Ae,r=e.stringifyQuery||Te,a=e.scrollBehavior,i=e.history,c=xe(),s=xe(),f=xe(),d=(0,o.shallowRef)(z),p=z;b&&a&&"scrollRestoration"in history&&(history.scrollRestoration="manual");var v,h=O.bind(null,(function(e){return""+e})),m=O.bind(null,Ee),w=O.bind(null,Ce);function S(e,o){if(o=_({},o||d.value),"string"==typeof e){var a=A(t,e,o.path),u=n.resolve({path:a.path},o),c=i.createHref(a.fullPath);return _(a,u,{params:w(u.params),hash:Ce(a.hash),redirectedFrom:void 0,href:c})}var l;"path"in e?l=_({},e,{path:A(t,e.path,o.path).path}):(l=_({},e,{params:m(e.params)}),o.params=m(o.params));var s=n.resolve(l,o),f=e.hash||"";s.params=h(w(s.params));var p,v=function(e,n){var t=n.query?e(n.query):"";return n.path+(t&&"?")+t+(n.hash||"")}(r,_({},e,{hash:(p=f,we(p).replace(ye,"{").replace(_e,"}").replace(me,"^")),path:s.path})),g=i.createHref(v);return _({fullPath:v,hash:f,query:r===Te?Pe(e.query):e.query},s,{redirectedFrom:void 0,href:g})}function C(e){return"string"==typeof e?{path:e}:_({},e)}function T(e,n){if(p!==e)return G(8,{from:n,to:e})}function k(e){return j(e)}function R(e){var n=e.matched[e.matched.length-1];if(n&&n.redirect){var t=n.redirect,r=C("function"==typeof t?t(e):t);return _({query:e.query,hash:e.hash,params:e.params},r)}}function j(e,n){var t=p=S(e),o=d.value,a=e.state,i=e.force,u=!0===e.replace,c=R(t);if(c)return j(_(c,{state:a,force:i,replace:u}),n||t);var l,s=t;return s.redirectedFrom=n,!i&&function(e,n,t){var r=n.matched.length-1,o=t.matched.length-1;return r>-1&&r===o&&P(n.matched[r],t.matched[o])&&x(n.params,t.params)&&e(n.query)===e(t.query)&&n.hash===t.hash}(r,o,t)&&(l=G(16,{to:s,from:o}),q(o,o,!0,!1)),(l?Promise.resolve(l):F(s,o)).catch((function(e){return K(e)?e:$(e)})).then((function(e){if(e){if(K(e,2))return j(_(C(e.to),{state:a,force:i,replace:u}),n||s)}else e=U(s,o,!0,u,a);return L(s,o,e),e}))}function M(e,n){var t=T(e,n);return t?Promise.reject(t):Promise.resolve()}function F(e,n){var t,r=u(function(e,n){for(var t=[],r=[],o=[],a=Math.max(n.matched.length,e.matched.length),i=0;i<a;i++){var u=n.matched[i];u&&(e.matched.indexOf(u)<0?t.push(u):r.push(u));var c=e.matched[i];c&&n.matched.indexOf(c)<0&&o.push(c)}return[t,r,o]}(e,n),3),o=r[0],a=r[1],i=r[2];t=je(o.reverse(),"beforeRouteLeave",e,n);var f,d=l(o);try{for(d.s();!(f=d.n()).done;){var p,v=l(f.value.leaveGuards);try{for(v.s();!(p=v.n()).done;){var h=p.value;t.push(Re(h,e,n))}}catch(e){v.e(e)}finally{v.f()}}}catch(e){d.e(e)}finally{d.f()}var m=M.bind(null,e,n);return t.push(m),rn(t).then((function(){t=[];var r,o=l(c.list());try{for(o.s();!(r=o.n()).done;){var a=r.value;t.push(Re(a,e,n))}}catch(e){o.e(e)}finally{o.f()}return t.push(m),rn(t)})).then((function(){t=je(a,"beforeRouteUpdate",e,n);var r,o=l(a);try{for(o.s();!(r=o.n()).done;){var i,u=l(r.value.updateGuards);try{for(u.s();!(i=u.n()).done;){var c=i.value;t.push(Re(c,e,n))}}catch(e){u.e(e)}finally{u.f()}}}catch(e){o.e(e)}finally{o.f()}return t.push(m),rn(t)})).then((function(){t=[];var r,o=l(e.matched);try{for(o.s();!(r=o.n()).done;){var a=r.value;if(a.beforeEnter&&n.matched.indexOf(a)<0)if(Array.isArray(a.beforeEnter)){var i,u=l(a.beforeEnter);try{for(u.s();!(i=u.n()).done;){var c=i.value;t.push(Re(c,e,n))}}catch(e){u.e(e)}finally{u.f()}}else t.push(Re(a.beforeEnter,e,n))}}catch(e){o.e(e)}finally{o.f()}return t.push(m),rn(t)})).then((function(){return e.matched.forEach((function(e){return e.enterCallbacks={}})),(t=je(i,"beforeRouteEnter",e,n)).push(m),rn(t)})).then((function(){t=[];var r,o=l(s.list());try{for(o.s();!(r=o.n()).done;){var a=r.value;t.push(Re(a,e,n))}}catch(e){o.e(e)}finally{o.f()}return t.push(m),rn(t)})).catch((function(e){return K(e,8)?e:Promise.reject(e)}))}function L(e,n,t){var r,o=l(f.list());try{for(o.s();!(r=o.n()).done;)(0,r.value)(e,n,t)}catch(e){o.e(e)}finally{o.f()}}function U(e,n,t,r,o){var a=T(e,n);if(a)return a;var u=n===z,c=b?history.state:{};t&&(r||u?i.replace(e.fullPath,_({scroll:u&&c&&c.scroll},o)):i.push(e.fullPath,o)),d.value=e,q(e,n,t,u),J()}var V,D=xe(),Y=xe();function $(e){return J(e),Y.list().forEach((function(n){return n(e)})),Promise.reject(e)}function J(e){V||(V=!0,v=i.listen((function(e,n,t){var r=S(e),o=R(r);if(o)j(_(o,{replace:!0}),r).catch(E);else{p=r;var a,u,c=d.value;b&&(a=I(c.fullPath,t.delta),u=N(),B.set(a,u)),F(r,c).catch((function(e){return K(e,12)?e:K(e,2)?(t.delta&&i.go(-t.delta,!1),j(e.to,r).catch(E),Promise.reject()):(t.delta&&i.go(-t.delta,!1),$(e))})).then((function(e){(e=e||U(r,c,!1))&&t.delta&&i.go(-t.delta,!1),L(r,c,e)})).catch(E)}})),D.list().forEach((function(n){var t=u(n,2),r=t[0],o=t[1];return e?o(e):r()})),D.reset())}function q(e,n,t,r){if(!b||!a)return Promise.resolve();var i,u,c=!t&&(i=I(e.fullPath,0),u=B.get(i),B.delete(i),u)||(r||!t)&&history.state&&history.state.scroll||null;return(0,o.nextTick)().then((function(){return a(e,n,c)})).then((function(e){return e&&function(e){var n;if("el"in e){var t=e.el,r="string"==typeof t&&t.startsWith("#"),o="string"==typeof t?r?document.getElementById(t.slice(1)):document.querySelector(t):t;if(!o)return;n=function(e,n){var t=document.documentElement.getBoundingClientRect(),r=e.getBoundingClientRect();return{behavior:n.behavior,left:r.left-t.left-(n.left||0),top:r.top-t.top-(n.top||0)}}(o,e)}else n=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(n):window.scrollTo(null!=n.left?n.left:window.pageXOffset,null!=n.top?n.top:window.pageYOffset)}(e)})).catch($)}var W,Z=function(e){return i.go(e)},X=new Set;return{currentRoute:d,addRoute:function(e,t){var r,o;return H(e)?(r=n.getRecordMatcher(e),o=t):o=e,n.addRoute(o,r)},removeRoute:function(e){var t=n.getRecordMatcher(e);t&&n.removeRoute(t)},hasRoute:function(e){return!!n.getRecordMatcher(e)},getRoutes:function(){return n.getRoutes().map((function(e){return e.record}))},resolve:S,options:e,push:k,replace:function(e){return k(_(C(e),{replace:!0}))},go:Z,back:function(){return Z(-1)},forward:function(){return Z(1)},beforeEach:c.add,beforeResolve:s.add,afterEach:f.add,onError:Y.add,isReady:function(){return V&&d.value!==z?Promise.resolve():new Promise((function(e,n){D.add([e,n])}))},install:function(e){var t=this;e.component("RouterLink",Fe),e.component("RouterView",Le),e.config.globalProperties.$router=t,Object.defineProperty(e.config.globalProperties,"$route",{get:function(){return(0,o.unref)(d)}}),b&&!W&&d.value===z&&(W=!0,k(i.location).catch((function(e){})));var r={},a=function(e){r[e]=(0,o.computed)((function(){return d.value[e]}))};for(var u in z)a(u);e.provide(g,t),e.provide(y,(0,o.reactive)(r));var c=e.unmount;X.add(e),e.unmount=function(){X.delete(e),X.size<1&&(v(),d.value=z,W=!1,V=!1),c.call(this,arguments)},__VUE_PROD_DEVTOOLS__&&function(e,n,t){var r=Xe++;qe.setupDevtoolsPlugin({id:" "+r,label:"Router devtools",app:e},(function(a){a.on.inspectComponent((function(e,t){e.instanceData&&e.instanceData.state.push({type:"Routing",key:"$route",editable:!1,value:We(n.currentRoute.value,"Current Route")})})),(0,o.watch)(n.currentRoute,(function(){a.notifyComponentUpdate()}));var i="router:navigations:"+r;a.addTimelineLayer({id:i,label:"Router".concat(r?" "+r:""," Navigations"),color:4237508}),n.onError((function(e){a.addTimelineEvent({layerId:i,event:{logType:"error",time:Date.now(),data:{error:e}}})})),n.beforeEach((function(e,n){var t={guard:Ze("beforeEach"),from:We(n,"Current Location during this navigation"),to:We(e,"Target location")};a.addTimelineEvent({layerId:i,event:{time:Date.now(),meta:{},data:t}})})),n.afterEach((function(e,n,t){var r={guard:Ze("afterEach")};t?(r.failure={_custom:{type:Error,readOnly:!0,display:t?t.message:"",tooltip:"Navigation Failure",value:t}},r.status=Ze("❌")):r.status=Ze("✅"),r.from=We(n,"Current Location during this navigation"),r.to=We(e,"Target location"),a.addTimelineEvent({layerId:i,event:{time:Date.now(),data:r,logType:t?"warning":"default",meta:{}}})}));var u="router-inspector:"+r;a.addInspector({id:u,label:"Routes"+(r?" "+r:""),icon:"book",treeFilterPlaceholder:"Search routes"}),a.on.getInspectorTree((function(n){if(n.app===e&&n.inspectorId===u){var r=t.getRoutes();n.filter&&(r=r.filter((function(e){return!e.parent&&tn(e,n.filter.toLowerCase())}))),n.filter||r.forEach((function(e){e.__vd_match=!1})),n.rootNodes=r.map(en)}})),a.on.getInspectorState((function(n){if(n.app===e&&n.inspectorId===u){var r=t.getRoutes().find((function(e){return e.record.path===n.nodeId}));r&&(n.state={options:Qe(r)})}}))}))}(e,t,n)}}},n.createRouterMatcher=re,n.createWebHashHistory=function(e){return(e=location.host?e||location.pathname:"").indexOf("#")<0&&(e+="#"),D(e)},n.createWebHistory=D,n.isNavigationFailure=K,n.onBeforeRouteLeave=function(e){var n=(0,o.inject)(h,{}).value;n&&ke(n.leaveGuards,e)},n.onBeforeRouteUpdate=function(e){var n=(0,o.inject)(h,{}).value;n&&ke(n.updateGuards,e)},n.parseQuery=Ae,n.stringifyQuery=Te,n.useLink=Me,n.useRoute=function(){return(0,o.inject)(y)},n.useRouter=function(){return(0,o.inject)(g)},n.routerKey=n.routeLocationKey=n.START_LOCATION=n.RouterView=n.RouterLink=n.NavigationFailureType=void 0;var r,o=t(876);function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,o=!1,a=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(t.push(i.value),!n||t.length!==n);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw a}}return t}}(e,n)||s(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(t=s(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,u=!1;return{s:function(){t=e[Symbol.iterator]()},n:function(){var e=t.next();return i=e.done,e},e:function(e){u=!0,a=e},f:function(){try{i||null==t.return||t.return()}finally{if(u)throw a}}}}function s(e,n){if(e){if("string"==typeof e)return f(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?f(e,n):void 0}}function f(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var p="function"==typeof Symbol&&"symbol"===d(Symbol.toStringTag),v=function(e){return p?Symbol(e):"_vr_"+e},h=v("rvlm"),m=v("rvd"),g=v("r");n.routerKey=g;var y=v("rl");n.routeLocationKey=y;var b="undefined"!=typeof window,_=Object.assign;function O(e,n){var t={};for(var r in n){var o=n[r];t[r]=Array.isArray(o)?o.map(e):e(o)}return t}var w,S,E=function(){},C=/\/$/;function A(e,n){var t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"/",o={},a="",i="",u=n.indexOf("?"),c=n.indexOf("#",u>-1?u:0);return u>-1&&(t=n.slice(0,u),o=e(a=n.slice(u+1,c>-1?c:n.length))),c>-1&&(t=t||n.slice(0,c),i=n.slice(c,n.length)),{fullPath:(t=j(null!=t?t:n,r))+(a&&"?")+a+i,path:t,query:o,hash:i}}function T(e,n){return!n||e.toLowerCase().indexOf(n.toLowerCase())?e:e.slice(n.length)||"/"}function P(e,n){return(e.aliasOf||e)===(n.aliasOf||n)}function x(e,n){if(Object.keys(e).length!==Object.keys(n).length)return!1;for(var t in e)if(!k(e[t],n[t]))return!1;return!0}function k(e,n){return Array.isArray(e)?R(e,n):Array.isArray(n)?R(n,e):e===n}function R(e,n){return Array.isArray(n)?e.length===n.length&&e.every((function(e,t){return e===n[t]})):1===e.length&&e[0]===n}function j(e,n){if(e.startsWith("/"))return e;if(!e)return n;var t,r,o=n.split("/"),a=e.split("/"),i=o.length-1;for(t=0;t<a.length;t++)if(r=a[t],1!==i&&"."!==r){if(".."!==r)break;i--}return o.slice(0,i).join("/")+"/"+a.slice(t-(t===a.length?1:0)).join("/")}!function(e){e.pop="pop",e.push="push"}(w||(w={})),function(e){e.back="back",e.forward="forward",e.unknown=""}(S||(S={}));var M=/^[^#]+#/;function F(e,n){return e.replace(M,"#")+n}var N=function(){return{left:window.pageXOffset,top:window.pageYOffset}};function I(e,n){return(history.state?history.state.position-n:-1)+e}var B=new Map,L=function(){return location.protocol+"//"+location.host};function U(e,n){var t=n.pathname,r=n.search,o=n.hash;if(e.indexOf("#")>-1){var a=o.slice(1);return"/"!==a[0]&&(a="/"+a),T(a,"")}return T(t,e)+r+o}function V(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return{back:e,current:n,forward:t,replaced:r,position:window.history.length,scroll:o?N():null}}function D(e){var n=function(e){var n=window,t=n.history,r=n.location,o={value:U(e,r)},a={value:t.state};function i(n,o,i){var u=e.indexOf("#"),c=u>-1?e.slice(u)+n:L()+e+n;try{t[i?"replaceState":"pushState"](o,"",c),a.value=o}catch(e){console.error(e),r[i?"replace":"assign"](c)}}return a.value||i(o.value,{back:null,current:o.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0),{location:o,state:a,push:function(e,n){var r=_({},a.value,t.state,{forward:e,scroll:N()});i(r.current,r,!0),i(e,_({},V(o.value,e,null),{position:r.position+1},n),!1),o.value=e},replace:function(e,n){i(e,_({},t.state,V(a.value.back,e,a.value.forward,!0),n,{position:a.value.position}),!0),o.value=e}}}(e=function(e){if(!e)if(b){var n=document.querySelector("base");e=(e=n&&n.getAttribute("href")||"/").replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return"/"!==e[0]&&"#"!==e[0]&&(e="/"+e),e.replace(C,"")}(e)),t=function(e,n,t,r){var o=[],a=[],i=null,u=function(a){var u=a.state,c=U(e,location),l=t.value,s=n.value,f=0;if(u){if(t.value=c,n.value=u,i&&i===l)return void(i=null);f=s?u.position-s.position:0}else r(c);o.forEach((function(e){e(t.value,l,{delta:f,type:w.pop,direction:f?f>0?S.forward:S.back:S.unknown})}))};function c(){var e=window.history;e.state&&e.replaceState(_({},e.state,{scroll:N()}),"")}return window.addEventListener("popstate",u),window.addEventListener("beforeunload",c),{pauseListeners:function(){i=t.value},listen:function(e){o.push(e);var n=function(){var n=o.indexOf(e);n>-1&&o.splice(n,1)};return a.push(n),n},destroy:function(){var e,n=l(a);try{for(n.s();!(e=n.n()).done;)(0,e.value)()}catch(e){n.e(e)}finally{n.f()}a=[],window.removeEventListener("popstate",u),window.removeEventListener("beforeunload",c)}}}(e,n.state,n.location,n.replace),r=_({location:"",base:e,go:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];n||t.pauseListeners(),history.go(e)},createHref:F.bind(null,e)},n,t);return Object.defineProperty(r,"location",{get:function(){return n.location.value}}),Object.defineProperty(r,"state",{get:function(){return n.state.value}}),r}function H(e){return"string"==typeof e||"symbol"===d(e)}var z={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0};n.START_LOCATION=z;var Y,$=v("nf");function G(e,n){return _(new Error,c({type:e},$,!0),n)}function K(e,n){return e instanceof Error&&$ in e&&(null==n||!!(e.type&n))}n.NavigationFailureType=Y,function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"}(Y||(n.NavigationFailureType=Y={})),c(r={},1,(function(e){var n=e.location,t=e.currentLocation;return"No match for\n ".concat(JSON.stringify(n)).concat(t?"\nwhile being at\n"+JSON.stringify(t):"")})),c(r,2,(function(e){var n=e.from,t=e.to;return'Redirected from "'.concat(n.fullPath,'" to "').concat(function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var n,t={},r=l(J);try{for(r.s();!(n=r.n()).done;){var o=n.value;o in e&&(t[o]=e[o])}}catch(e){r.e(e)}finally{r.f()}return JSON.stringify(t,null,2)}(t),'" via a navigation guard.')})),c(r,4,(function(e){var n=e.from,t=e.to;return'Navigation aborted from "'.concat(n.fullPath,'" to "').concat(t.fullPath,'" via a navigation guard.')})),c(r,8,(function(e){var n=e.from,t=e.to;return'Navigation cancelled from "'.concat(n.fullPath,'" to "').concat(t.fullPath,'" with a new navigation.')})),c(r,16,(function(e){var n=e.from;return e.to,'Avoided redundant navigation to current location: "'.concat(n.fullPath,'".')}));var J=["params","query","hash"],q="[^/]+?",W={sensitive:!1,strict:!1,start:!0,end:!0},Z=/[.+*?^${}()[\]/\\]/g;function X(e,n){for(var t=0;t<e.length&&t<n.length;){var r=n[t]-e[t];if(r)return r;t++}return e.length<n.length?1===e.length&&80===e[0]?-1:1:e.length>n.length?1===n.length&&80===n[0]?1:-1:0}function Q(e,n){for(var t=0,r=e.score,o=n.score;t<r.length&&t<o.length;){var a=X(r[t],o[t]);if(a)return a;t++}return o.length-r.length}var ee={type:0,value:""},ne=/[a-zA-Z0-9_]/;function te(e,n,t){var r=function(e,n){var t,r=_({},W,n),o=[],a=r.start?"^":"",i=[],u=l(e);try{for(u.s();!(t=u.n()).done;){var c=t.value,s=c.length?[]:[90];r.strict&&!c.length&&(a+="/");for(var f=0;f<c.length;f++){var d=c[f],p=40+(r.sensitive?.25:0);if(0===d.type)f||(a+="/"),a+=d.value.replace(Z,"\\$&"),p+=40;else if(1===d.type){var v=d.value,h=d.repeatable,m=d.optional,g=d.regexp;i.push({name:v,repeatable:h,optional:m});var y=g||q;if(y!==q){p+=10;try{new RegExp("(".concat(y,")"))}catch(e){throw new Error('Invalid custom RegExp for param "'.concat(v,'" (').concat(y,"): ")+e.message)}}var b=h?"((?:".concat(y,")(?:/(?:").concat(y,"))*)"):"(".concat(y,")");f||(b=m?"(?:/".concat(b,")"):"/"+b),m&&(b+="?"),a+=b,p+=20,m&&(p+=-8),h&&(p+=-20),".*"===y&&(p+=-50)}s.push(p)}o.push(s)}}catch(e){u.e(e)}finally{u.f()}if(r.strict&&r.end){var O=o.length-1;o[O][o[O].length-1]+=.7000000000000001}r.strict||(a+="/?"),r.end?a+="$":r.strict&&(a+="(?:/|$)");var w=new RegExp(a,r.sensitive?"":"i");return{re:w,score:o,keys:i,parse:function(e){var n=e.match(w),t={};if(!n)return null;for(var r=1;r<n.length;r++){var o=n[r]||"",a=i[r-1];t[a.name]=o&&a.repeatable?o.split("/"):o}return t},stringify:function(n){var t,r="",o=!1,a=l(e);try{for(a.s();!(t=a.n()).done;){var i=t.value;o&&r.endsWith("/")||(r+="/"),o=!1;var u,c=l(i);try{for(c.s();!(u=c.n()).done;){var s=u.value;if(0===s.type)r+=s.value;else if(1===s.type){var f=s.value,d=s.repeatable,p=s.optional,v=f in n?n[f]:"";if(Array.isArray(v)&&!d)throw new Error('Provided param "'.concat(f,'" is an array but it is not repeatable (* or + modifiers)'));var h=Array.isArray(v)?v.join("/"):v;if(!h){if(!p)throw new Error('Missing required param "'.concat(f,'"'));r.endsWith("/")?r=r.slice(0,-1):o=!0}r+=h}}}catch(e){c.e(e)}finally{c.f()}}}catch(e){a.e(e)}finally{a.f()}return r}}}(function(e){if(!e)return[[]];if("/"===e)return[[ee]];if(!e.startsWith("/"))throw new Error('Invalid path "'.concat(e,'"'));function n(e){throw new Error("ERR (".concat(r,')/"').concat(l,'": ').concat(e))}var t,r=0,o=r,a=[];function i(){t&&a.push(t),t=[]}var u,c=0,l="",s="";function f(){l&&(0===r?t.push({type:0,value:l}):1===r||2===r||3===r?(t.length>1&&("*"===u||"+"===u)&&n("A repeatable param (".concat(l,") must be alone in its segment. eg: '/:ids+.")),t.push({type:1,value:l,regexp:s,repeatable:"*"===u||"+"===u,optional:"*"===u||"?"===u})):n("Invalid state to consume buffer"),l="")}function d(){l+=u}for(;c<e.length;)if("\\"!==(u=e[c++])||2===r)switch(r){case 0:"/"===u?(l&&f(),i()):":"===u?(f(),r=1):d();break;case 4:d(),r=o;break;case 1:"("===u?(r=2,s=""):ne.test(u)?d():(f(),r=0,"*"!==u&&"?"!==u&&"+"!==u&&c--);break;case 2:")"===u?"\\"==s[s.length-1]?s=s.slice(0,-1)+u:r=3:s+=u;break;case 3:f(),r=0,"*"!==u&&"?"!==u&&"+"!==u&&c--;break;default:n("Unknown state")}else o=r,r=4;return 2===r&&n('Unfinished custom RegExp for param "'.concat(l,'"')),f(),i(),a}(e.path),t),o=_(r,{record:e,parent:n,children:[],alias:[]});return n&&!o.record.aliasOf==!n.record.aliasOf&&n.children.push(o),o}function re(e,n){var t=[],r=new Map;function o(e,t,r){var u=!r,c=function(e){return{path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:void 0,beforeEnter:e.beforeEnter,props:oe(e),children:e.children||[],instances:{},leaveGuards:[],updateGuards:[],enterCallbacks:{},components:"components"in e?e.components||{}:{default:e.component}}}(e);c.aliasOf=r&&r.record;var s,f,d=ue(n,e),p=[c];if("alias"in e){var v,h=l("string"==typeof e.alias?[e.alias]:e.alias);try{for(h.s();!(v=h.n()).done;){var m=v.value;p.push(_({},c,{components:r?r.record.components:c.components,path:m,aliasOf:r?r.record:c}))}}catch(e){h.e(e)}finally{h.f()}}for(var g=0,y=p;g<y.length;g++){var b=y[g],O=b.path;if(t&&"/"!==O[0]){var w=t.record.path,S="/"===w[w.length-1]?"":"/";b.path=t.record.path+(O&&S+O)}if(s=te(b,t,d),r?r.alias.push(s):((f=f||s)!==s&&f.alias.push(s),u&&e.name&&!ae(s)&&a(e.name)),"children"in c)for(var C=c.children,A=0;A<C.length;A++)o(C[A],s,r&&r.children[A]);r=r||s,i(s)}return f?function(){a(f)}:E}function a(e){if(H(e)){var n=r.get(e);n&&(r.delete(e),t.splice(t.indexOf(n),1),n.children.forEach(a),n.alias.forEach(a))}else{var o=t.indexOf(e);o>-1&&(t.splice(o,1),e.record.name&&r.delete(e.record.name),e.children.forEach(a),e.alias.forEach(a))}}function i(e){for(var n=0;n<t.length&&Q(e,t[n])>=0;)n++;t.splice(n,0,e),e.record.name&&!ae(e)&&r.set(e.record.name,e)}return n=ue({strict:!1,end:!0,sensitive:!1},n),e.forEach((function(e){return o(e)})),{addRoute:o,resolve:function(e,n){var o,a,i,u={};if("name"in e&&e.name){if(!(o=r.get(e.name)))throw G(1,{location:e});i=o.record.name,u=_(function(e,n){var t,r={},o=l(n);try{for(o.s();!(t=o.n()).done;){var a=t.value;a in e&&(r[a]=e[a])}}catch(e){o.e(e)}finally{o.f()}return r}(n.params,o.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}))),e.params),a=o.stringify(u)}else if("path"in e)a=e.path,(o=t.find((function(e){return e.re.test(a)})))&&(u=o.parse(a),i=o.record.name);else{if(!(o=n.name?r.get(n.name):t.find((function(e){return e.re.test(n.path)}))))throw G(1,{location:e,currentLocation:n});i=o.record.name,u=_({},n.params,e.params),a=o.stringify(u)}for(var c=[],s=o;s;)c.unshift(s.record),s=s.parent;return{name:i,path:a,params:u,matched:c,meta:ie(c)}},removeRoute:a,getRoutes:function(){return t},getRecordMatcher:function(e){return r.get(e)}}}function oe(e){var n={},t=e.props||!1;if("component"in e)n.default=t;else for(var r in e.components)n[r]="boolean"==typeof t?t:t[r];return n}function ae(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function ie(e){return e.reduce((function(e,n){return _(e,n.meta)}),{})}function ue(e,n){var t={};for(var r in e)t[r]=r in n?n[r]:e[r];return t}var ce=/#/g,le=/&/g,se=/\//g,fe=/=/g,de=/\?/g,pe=/\+/g,ve=/%5B/g,he=/%5D/g,me=/%5E/g,ge=/%60/g,ye=/%7B/g,be=/%7C/g,_e=/%7D/g,Oe=/%20/g;function we(e){return encodeURI(""+e).replace(be,"|").replace(ve,"[").replace(he,"]")}function Se(e){return we(e).replace(pe,"%2B").replace(Oe,"+").replace(ce,"%23").replace(le,"%26").replace(ge,"`").replace(ye,"{").replace(_e,"}").replace(me,"^")}function Ee(e){return function(e){return we(e).replace(ce,"%23").replace(de,"%3F")}(e).replace(se,"%2F")}function Ce(e){try{return decodeURIComponent(""+e)}catch(e){}return""+e}function Ae(e){var n={};if(""===e||"?"===e)return n;for(var t=("?"===e[0]?e.slice(1):e).split("&"),r=0;r<t.length;++r){var o=t[r].replace(pe," "),a=o.indexOf("="),i=Ce(a<0?o:o.slice(0,a)),u=a<0?null:Ce(o.slice(a+1));if(i in n){var c=n[i];Array.isArray(c)||(c=n[i]=[c]),c.push(u)}else n[i]=u}return n}function Te(e){var n="";for(var t in e){n.length&&(n+="&");var r=e[t];if(t=Se(t).replace(fe,"%3D"),null!=r)for(var o=Array.isArray(r)?r.map((function(e){return e&&Se(e)})):[r&&Se(r)],a=0;a<o.length;a++)n+=(a?"&":"")+t,null!=o[a]&&(n+="="+o[a]);else void 0!==r&&(n+=t)}return n}function Pe(e){var n={};for(var t in e){var r=e[t];void 0!==r&&(n[t]=Array.isArray(r)?r.map((function(e){return null==e?null:""+e})):null==r?r:""+r)}return n}function xe(){var e=[];return{add:function(n){return e.push(n),function(){var t=e.indexOf(n);t>-1&&e.splice(t,1)}},list:function(){return e},reset:function(){e=[]}}}function ke(e,n){var t=function(){var t=e.indexOf(n);t>-1&&e.splice(t,1)};(0,o.onUnmounted)(t),(0,o.onDeactivated)(t),(0,o.onActivated)((function(){e.indexOf(n)<0&&e.push(n)})),e.push(n)}function Re(e,n,t,r,o){var a=r&&(r.enterCallbacks[o]=r.enterCallbacks[o]||[]);return function(){return new Promise((function(i,u){var c=function(e){var c;!1===e?u(G(4,{from:t,to:n})):e instanceof Error?u(e):"string"==typeof(c=e)||c&&"object"===d(c)?u(G(2,{from:n,to:e})):(a&&r.enterCallbacks[o]===a&&"function"==typeof e&&a.push(e),i())},l=e.call(r&&r.instances[o],n,t,c),s=Promise.resolve(l);e.length<3&&(s=s.then(c)),s.catch((function(e){return u(e)}))}))}}function je(e,n,t,r){var o,a=[],i=l(e);try{var u=function(){var e=o.value,i=function(o){var i=e.components[o];if("beforeRouteEnter"!==n&&!e.instances[o])return"continue";if(function(e){return"object"===d(e)||"displayName"in e||"props"in e||"__vccOpts"in e}(i)){var u=(i.__vccOpts||i)[n];u&&a.push(Re(u,t,r,e,o))}else{var c=i();c=c.catch(console.error),a.push((function(){return c.then((function(a){if(!a)return Promise.reject(new Error("Couldn't resolve component \"".concat(o,'" at "').concat(e.path,'"')));var i,u=(i=a).__esModule||p&&"Module"===i[Symbol.toStringTag]?a.default:a;e.components[o]=u;var c=u[n];return c&&Re(c,t,r,e,o)()}))}))}};for(var u in e.components)i(u)};for(i.s();!(o=i.n()).done;)u()}catch(e){i.e(e)}finally{i.f()}return a}function Me(e){var n=(0,o.inject)(g),t=(0,o.inject)(y),r=(0,o.computed)((function(){return n.resolve((0,o.unref)(e.to))})),a=(0,o.computed)((function(){var e=r.value.matched,n=e.length,o=e[n-1],a=t.matched;if(!o||!a.length)return-1;var i=a.findIndex(P.bind(null,o));if(i>-1)return i;var u=Ie(e[n-2]);return n>1&&Ie(o)===u&&a[a.length-1].path!==u?a.findIndex(P.bind(null,e[n-2])):i})),i=(0,o.computed)((function(){return a.value>-1&&function(e,n){var t=function(t){var r=n[t],o=e[t];if("string"==typeof r){if(r!==o)return{v:!1}}else if(!Array.isArray(o)||o.length!==r.length||r.some((function(e,n){return e!==o[n]})))return{v:!1}};for(var r in n){var o=t(r);if("object"===d(o))return o.v}return!0}(t.params,r.value.params)})),u=(0,o.computed)((function(){return a.value>-1&&a.value===t.matched.length-1&&x(t.params,r.value.params)}));return{route:r,href:(0,o.computed)((function(){return r.value.href})),isActive:i,isExactActive:u,navigate:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Ne(t)?n[(0,o.unref)(e.replace)?"replace":"push"]((0,o.unref)(e.to)):Promise.resolve()}}}var Fe=(0,o.defineComponent)({name:"RouterLink",props:{to:{type:[String,Object],required:!0},activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},setup:function(e,n){var t=n.slots,r=n.attrs,a=(0,o.reactive)(Me(e)),i=(0,o.inject)(g).options,u=(0,o.computed)((function(){var n;return c(n={},Be(e.activeClass,i.linkActiveClass,"router-link-active"),a.isActive),c(n,Be(e.exactActiveClass,i.linkExactActiveClass,"router-link-exact-active"),a.isExactActive),n}));return function(){var n=t.default&&t.default(a);return e.custom?n:(0,o.h)("a",_({"aria-current":a.isExactActive?e.ariaCurrentValue:null,onClick:a.navigate,href:a.href},r,{class:u.value}),n)}}});function Ne(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var n=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return e.preventDefault&&e.preventDefault(),!0}}function Ie(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}n.RouterLink=Fe;var Be=function(e,n,t){return null!=e?e:null!=n?n:t},Le=(0,o.defineComponent)({name:"RouterView",props:{name:{type:String,default:"default"},route:Object},setup:function(e,n){var t=n.attrs,r=n.slots,a=(0,o.inject)(y),i=(0,o.inject)(m,0),c=(0,o.computed)((function(){return(e.route||a).matched[i]}));(0,o.provide)(m,i+1),(0,o.provide)(h,c);var l=(0,o.ref)();return(0,o.watch)((function(){return[l.value,c.value,e.name]}),(function(e,n){var t=u(e,3),r=t[0],o=t[1],a=t[2],i=u(n,3),c=i[0],l=i[1];i[2],o&&(o.instances[a]=r,l&&r===c&&(o.leaveGuards=l.leaveGuards,o.updateGuards=l.updateGuards)),!r||!o||l&&P(o,l)&&c||(o.enterCallbacks[a]||[]).forEach((function(e){return e(r)}))}),{flush:"post"}),function(){var n=e.route||a,i=c.value,u=i&&i.components[e.name],s=e.name;if(!u)return r.default?r.default({Component:u,route:n}):null;var f=i.props[e.name],d=f?!0===f?n.params:"function"==typeof f?f(n):f:null,p=(0,o.h)(u,_({},d,t,{onVnodeUnmounted:function(e){e.component.isUnmounted&&(i.instances[s]=null)},ref:l}));return r.default?r.default({Component:p,route:n}):p}}});n.RouterView=Le;var Ue="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t.g?t.g:"undefined"!=typeof self?self:{};function Ve(e,n,t){return e(t={path:n,exports:{},require:function(e,n){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==n&&t.path)}},t.exports),t.exports}var De=Ve((function(e,n){Object.defineProperty(n,"__esModule",{value:!0}),n.hook=n.target=n.isBrowser=void 0,n.isBrowser="undefined"!=typeof navigator,n.target=n.isBrowser?window:void 0!==Ue?Ue:{},n.hook=n.target.__VUE_DEVTOOLS_GLOBAL_HOOK__})),He=Ve((function(e,n){Object.defineProperty(n,"__esModule",{value:!0}),n.ApiHookEvents=void 0,(n.ApiHookEvents||(n.ApiHookEvents={})).SETUP_DEVTOOLS_PLUGIN="devtools-plugin:setup"})),ze=Ve((function(e,n){Object.defineProperty(n,"__esModule",{value:!0})})),Ye=Ve((function(e,n){Object.defineProperty(n,"__esModule",{value:!0})})),$e=Ve((function(e,n){Object.defineProperty(n,"__esModule",{value:!0})})),Ge=Ve((function(e,n){Object.defineProperty(n,"__esModule",{value:!0})})),Ke=Ve((function(e,n){var t;Object.defineProperty(n,"__esModule",{value:!0}),n.Hooks=void 0,(t=n.Hooks||(n.Hooks={})).TRANSFORM_CALL="transformCall",t.GET_APP_RECORD_NAME="getAppRecordName",t.GET_APP_ROOT_INSTANCE="getAppRootInstance",t.REGISTER_APPLICATION="registerApplication",t.WALK_COMPONENT_TREE="walkComponentTree",t.WALK_COMPONENT_PARENTS="walkComponentParents",t.INSPECT_COMPONENT="inspectComponent",t.GET_COMPONENT_BOUNDS="getComponentBounds",t.GET_COMPONENT_NAME="getComponentName",t.GET_ELEMENT_COMPONENT="getElementComponent",t.GET_INSPECTOR_TREE="getInspectorTree",t.GET_INSPECTOR_STATE="getInspectorState"})),Je=Ve((function(e,n){var t=Ue&&Ue.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),r=Ue&&Ue.__exportStar||function(e,n){for(var r in e)"default"===r||n.hasOwnProperty(r)||t(n,e,r)};Object.defineProperty(n,"__esModule",{value:!0}),r(ze,n),r(Ye,n),r($e,n),r(Ge,n),r(Ke,n)})),qe=Ve((function(e,n){var t=Ue&&Ue.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),r=Ue&&Ue.__exportStar||function(e,n){for(var r in e)"default"===r||n.hasOwnProperty(r)||t(n,e,r)};Object.defineProperty(n,"__esModule",{value:!0}),n.setupDevtoolsPlugin=void 0,r(Je,n),n.setupDevtoolsPlugin=function(e,n){De.hook?De.hook.emit(He.ApiHookEvents.SETUP_DEVTOOLS_PLUGIN,e,n):(De.target.__VUE_DEVTOOLS_PLUGINS__=De.target.__VUE_DEVTOOLS_PLUGINS__||[]).push({pluginDescriptor:e,setupFn:n})}}));function We(e,n){var t=i(i({},e),{},{matched:e.matched.map((function(e){return e.instances,e.children,e.aliasOf,function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,["instances","children","aliasOf"])}))});return{_custom:{type:null,readOnly:!0,display:e.fullPath,tooltip:n,value:t}}}function Ze(e){return{_custom:{display:e}}}var Xe=0;function Qe(e){var n=e.record,t=[{editable:!1,key:"path",value:n.path}];return null!=n.name&&t.push({editable:!1,key:"name",value:n.name}),t.push({editable:!1,key:"regexp",value:e.re}),e.keys.length&&t.push({editable:!1,key:"keys",value:{_custom:{type:null,readOnly:!0,display:e.keys.map((function(e){return"".concat(e.name).concat(function(e){return e.optional?e.repeatable?"*":"?":e.repeatable?"+":""}(e))})).join(" "),tooltip:"Param keys",value:e.keys}}}),null!=n.redirect&&t.push({editable:!1,key:"redirect",value:n.redirect}),e.alias.length&&t.push({editable:!1,key:"aliases",value:e.alias.map((function(e){return e.record.path}))}),t.push({key:"score",editable:!1,value:{_custom:{type:null,readOnly:!0,display:e.score.map((function(e){return e.join(", ")})).join(" | "),tooltip:"Score used to sort routes",value:e.score}}}),t}function en(e){var n=[],t=e.record;return null!=t.name&&n.push({label:String(t.name),textColor:0,backgroundColor:48340}),t.aliasOf&&n.push({label:"alias",textColor:0,backgroundColor:16750671}),e.__vd_match&&n.push({label:"matches",textColor:0,backgroundColor:16053492}),t.redirect&&n.push({label:"redirect: "+("string"==typeof t.redirect?t.redirect:"Object"),textColor:16777215,backgroundColor:6710886}),{id:t.path,label:t.path,tags:n,children:e.children.map(en)}}var nn=/^\/(.*)\/([a-z]*)$/;function tn(e,n){var t=String(e.re).match(nn);if(e.__vd_match=!1,!t||t.length<3)return!1;if(new RegExp(t[1].replace(/\$$/,""),t[2]).test(n))return e.children.some((function(e){return tn(e,n)})),("/"!==e.record.path||"/"===n)&&(e.__vd_match=e.re.test(n),!0);var r=e.record.path.toLowerCase(),o=Ce(r);return!(n.startsWith("/")||!o.includes(n)&&!r.includes(n))||!(!o.startsWith(n)&&!r.startsWith(n))||!(!e.record.name||!String(e.record.name).includes(n))||e.children.some((function(e){return tn(e,n)}))}function rn(e){return e.reduce((function(e,n){return e.then((function(){return n()}))}),Promise.resolve())}},876:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0});var r={compile:!0};n.compile=void 0;var o=t(391);Object.keys(o).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(r,e)||e in n&&n[e]===o[e]||Object.defineProperty(n,e,{enumerable:!0,get:function(){return o[e]}}))})),t(420),n.compile=function(){}},207:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=t(284);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function i(e){if(e&&e.__esModule)return e;if(null===e||"object"!==o(e)&&"function"!=typeof e)return{default:e};var n=a();if(n&&n.has(e))return n.get(e);var t={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var u=r?Object.getOwnPropertyDescriptor(e,i):null;u&&(u.get||u.set)?Object.defineProperty(t,i,u):t[i]=e[i]}return t.default=e,n&&n.set(e,t),t}var u=[{path:"/",component:function(){return Promise.resolve().then((function(){return i(t(662))}))}},{path:"/index",component:function(){return Promise.resolve().then((function(){return i(t(662))}))}},{path:"/test",component:function(){return Promise.resolve().then((function(){return i(t(504))}))}}],c=(0,r.createRouter)({history:(0,r.createWebHashHistory)(),routes:u});n.default=c},487:(e,n,t)=>{t.d(n,{Z:()=>u});var r=t(757),o=t.n(r),a=t(634),i=t.n(a)()(o());i.push([e.id,"\n.upload_file[data-v-44d847d8]{\r\n       background:none; outline:none; border:none;\n}\r\n","",{version:3,sources:["webpack://./src/components/Index.vue"],names:[],mappings:";AA6BI;OACG,eAAe,EAAE,YAAY,EAAE,WAAW;AAC7C",sourcesContent:['<template>\r\n    <div class="index">\r\n        <input type="file" class="upload_file">\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default{\r\n        data() {\r\n            return {\r\n                \r\n            }\r\n        },\r\n        created() {\r\n            console.log(window.location)\r\n            var origin  = window.location.origin;\r\n           $.ajax({\r\n               type:\'post\',\r\n               url:origin+"upload",\r\n               success:function(res){\r\n                   console.log(res)\r\n               }\r\n           })\r\n        },\r\n    }\r\n<\/script>\r\n\r\n\r\n<style scoped>\r\n    .upload_file{\r\n       background:none; outline:none; border:none; \r\n    }\r\n</style>'],sourceRoot:""}]);const u=i},379:(e,n,t)=>{var r,o=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function i(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function u(e,n){for(var t={},r=[],o=0;o<e.length;o++){var u=e[o],c=n.base?u[0]+n.base:u[0],l=t[c]||0,s="".concat(c," ").concat(l);t[c]=l+1;var f=i(s),d={css:u[1],media:u[2],sourceMap:u[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:s,updater:h(d,n),references:1}),r.push(s)}return r}function c(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=t.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}return n}var l,s=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function f(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=s(n,o);else{var a=document.createTextNode(o),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(a,i[n]):e.appendChild(a)}}function d(e,n,t){var r=t.css,o=t.media,a=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,v=0;function h(e,n){var t,r,o;if(n.singleton){var a=v++;t=p||(p=c(n)),r=f.bind(null,t,a,!1),o=f.bind(null,t,a,!0)}else t=c(n),r=d.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=u(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=i(t[r]);a[o].references--}for(var c=u(e,n),l=0;l<t.length;l++){var s=i(t[l]);0===a[s].references&&(a[s].updater(),a.splice(s,1))}t=c}}}},619:(e,n,t)=>{t.r(n),t.d(n,{__esModule:()=>o.X,default:()=>a});var r=t(890),o=t(327);o.Z.render=r.s;const a=o.Z},662:(e,n,t)=>{t.r(n),t.d(n,{__esModule:()=>o.X,default:()=>c});var r=t(22),o=t(998),a=t(379),i=t.n(a),u=t(487);i()(u.Z,{insert:"head",singleton:!1}),u.Z.locals,o.Z.render=r.s,o.Z.__scopeId="data-v-44d847d8";const c=o.Z},504:(e,n,t)=>{t.r(n),t.d(n,{default:()=>i});var r=t(249),o=t(955),a={};for(const e in o)"default"!==e&&(a[e]=()=>o[e]);t.d(n,a),o.default.render=r.s;const i=o.default},955:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o.a});var r=t(667),o=t.n(r),a={};for(const e in r)"default"!==e&&(a[e]=()=>r[e]);t.d(n,a)},249:(e,n,t)=>{t.d(n,{s:()=>r.s});var r=t(137)}},n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e=t(876),n=o(t(619)),r=o(t(207));function o(e){return e&&e.__esModule?e:{default:e}}(0,e.createApp)(n.default).use(r.default).mount("#root")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wdWJsaWMvLi9ub2RlX21vZHVsZXMvQHZ1ZS9yZWFjdGl2aXR5L2Rpc3QvcmVhY3Rpdml0eS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly9wdWJsaWMvLi9ub2RlX21vZHVsZXMvQHZ1ZS9ydW50aW1lLWNvcmUvZGlzdC9ydW50aW1lLWNvcmUuZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vcHVibGljLy4vbm9kZV9tb2R1bGVzL0B2dWUvcnVudGltZS1kb20vZGlzdC9ydW50aW1lLWRvbS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly9wdWJsaWMvLi9ub2RlX21vZHVsZXMvQHZ1ZS9zaGFyZWQvZGlzdC9zaGFyZWQuZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vcHVibGljLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9wdWJsaWMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9wdWJsaWMvLi9zcmMvQXBwLnZ1ZSIsIndlYnBhY2s6Ly9wdWJsaWMvLi9zcmMvY29tcG9uZW50cy9JbmRleC52dWUiLCJ3ZWJwYWNrOi8vcHVibGljLy4vc3JjL2NvbXBvbmVudHMvVGVzdC52dWUiLCJ3ZWJwYWNrOi8vcHVibGljLy4vbm9kZV9tb2R1bGVzL3Z1ZS1yb3V0ZXIvZGlzdC92dWUtcm91dGVyLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovL3B1YmxpYy8uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUucnVudGltZS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly9wdWJsaWMvLi9zcmMvcm91dGVyLmpzIiwid2VicGFjazovL3B1YmxpYy8uL3NyYy9jb21wb25lbnRzL0luZGV4LnZ1ZT84M2U2Iiwid2VicGFjazovL3B1YmxpYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9wdWJsaWMvLi9zcmMvQXBwLnZ1ZT9kMTU0Iiwid2VicGFjazovL3B1YmxpYy8uL3NyYy9jb21wb25lbnRzL0luZGV4LnZ1ZT9hNzA5Iiwid2VicGFjazovL3B1YmxpYy8uL3NyYy9jb21wb25lbnRzL0luZGV4LnZ1ZT80YjlkIiwid2VicGFjazovL3B1YmxpYy8uL3NyYy9jb21wb25lbnRzL1Rlc3QudnVlPzc3YTgiLCJ3ZWJwYWNrOi8vcHVibGljL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3B1YmxpYy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9wdWJsaWMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3B1YmxpYy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3B1YmxpYy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3B1YmxpYy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3B1YmxpYy8uL21haW4uanMiXSwibmFtZXMiOlsiZ2V0dGVyT3JPcHRpb25zIiwiZ2V0dGVyIiwic2V0dGVyIiwiaXNGdW5jdGlvbiIsIk5PT1AiLCJnZXQiLCJzZXQiLCJDb21wdXRlZFJlZkltcGwiLCJmYWN0b3J5IiwiQ3VzdG9tUmVmSW1wbCIsInZhbHVlIiwiaXNSZWFjdGl2ZSIsImlzUmVhZG9ubHkiLCJkZWYiLCJvYmplY3RXaXRoUmVmcyIsIlByb3h5Iiwic2hhbGxvd1Vud3JhcEhhbmRsZXJzIiwiY3JlYXRlUmVmIiwidGFyZ2V0IiwiY3JlYXRlUmVhY3RpdmVPYmplY3QiLCJzaGFsbG93UmVhY3RpdmVIYW5kbGVycyIsInNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMiLCJzaGFsbG93UmVhZG9ubHlIYW5kbGVycyIsInJlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzIiwiZWZmZWN0IiwiYWN0aXZlIiwiY2xlYW51cCIsIm9wdGlvbnMiLCJvblN0b3AiLCJvYmplY3QiLCJyZXQiLCJpc0FycmF5IiwiQXJyYXkiLCJsZW5ndGgiLCJrZXkiLCJ0b1JlZiIsInJlZiIsInRyaWdnZXIiLCJ0b1JhdyIsImFjdGl2ZUVmZmVjdCIsInRhcmdldE1hcCIsIldlYWtNYXAiLCJlZmZlY3RTdGFjayIsIklURVJBVEVfS0VZIiwiU3ltYm9sIiwiTUFQX0tFWV9JVEVSQVRFX0tFWSIsImlzRWZmZWN0IiwiZm4iLCJfaXNFZmZlY3QiLCJFTVBUWV9PQkoiLCJyYXciLCJjcmVhdGVSZWFjdGl2ZUVmZmVjdCIsImxhenkiLCJ1aWQiLCJzY2hlZHVsZXIiLCJ1bmRlZmluZWQiLCJpbmNsdWRlcyIsImVuYWJsZVRyYWNraW5nIiwicHVzaCIsInBvcCIsInJlc2V0VHJhY2tpbmciLCJpZCIsImFsbG93UmVjdXJzZSIsImRlcHMiLCJpIiwic2hvdWxkVHJhY2siLCJ0cmFja1N0YWNrIiwicGF1c2VUcmFja2luZyIsImxhc3QiLCJ0cmFjayIsInR5cGUiLCJkZXBzTWFwIiwiTWFwIiwiZGVwIiwiU2V0IiwiaGFzIiwiYWRkIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsIm9sZFRhcmdldCIsImVmZmVjdHMiLCJlZmZlY3RzVG9BZGQiLCJmb3JFYWNoIiwiaXNJbnRlZ2VyS2V5IiwiaXNNYXAiLCJidWlsdEluU3ltYm9scyIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJtYXAiLCJmaWx0ZXIiLCJpc1N5bWJvbCIsImNyZWF0ZUdldHRlciIsInNoYWxsb3dHZXQiLCJyZWFkb25seUdldCIsInNoYWxsb3dSZWFkb25seUdldCIsImFycmF5SW5zdHJ1bWVudGF0aW9ucyIsInNoYWxsb3ciLCJyZWNlaXZlciIsInJlYWRvbmx5TWFwIiwicmVhY3RpdmVNYXAiLCJ0YXJnZXRJc0FycmF5IiwiaGFzT3duIiwiUmVmbGVjdCIsInJlcyIsImlzUmVmIiwiaXNPYmplY3QiLCJyZWFkb25seSIsInJlYWN0aXZlIiwibWV0aG9kIiwicHJvdG90eXBlIiwiYXJyIiwidGhpcyIsImwiLCJhcmdzIiwiYXBwbHkiLCJjcmVhdGVTZXR0ZXIiLCJzaGFsbG93U2V0IiwiaGFkS2V5IiwiTnVtYmVyIiwicmVzdWx0IiwiaGFzQ2hhbmdlZCIsIm11dGFibGVIYW5kbGVycyIsImRlbGV0ZVByb3BlcnR5Iiwib3duS2V5cyIsInJlYWRvbmx5SGFuZGxlcnMiLCJleHRlbmQiLCJ0b1JlYWN0aXZlIiwidG9SZWFkb25seSIsInRvU2hhbGxvdyIsImdldFByb3RvIiwidiIsImdldFByb3RvdHlwZU9mIiwiZ2V0JDEiLCJpc1NoYWxsb3ciLCJyYXdUYXJnZXQiLCJyYXdLZXkiLCJ3cmFwIiwiY2FsbCIsImhhcyQxIiwic2l6ZSIsInNldCQxIiwiZGVsZXRlRW50cnkiLCJjbGVhciIsImhhZEl0ZW1zIiwiY3JlYXRlRm9yRWFjaCIsImNhbGxiYWNrIiwidGhpc0FyZyIsIm9ic2VydmVkIiwiY3JlYXRlSXRlcmFibGVNZXRob2QiLCJ0YXJnZXRJc01hcCIsImlzUGFpciIsIml0ZXJhdG9yIiwiaXNLZXlPbmx5IiwiaW5uZXJJdGVyYXRvciIsIm5leHQiLCJkb25lIiwiY3JlYXRlUmVhZG9ubHlNZXRob2QiLCJtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyIsImRlbGV0ZSIsInNoYWxsb3dJbnN0cnVtZW50YXRpb25zIiwicmVhZG9ubHlJbnN0cnVtZW50YXRpb25zIiwiY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyIiwiaW5zdHJ1bWVudGF0aW9ucyIsIm11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMiLCJiYXNlSGFuZGxlcnMiLCJjb2xsZWN0aW9uSGFuZGxlcnMiLCJwcm94eU1hcCIsImV4aXN0aW5nUHJveHkiLCJ0YXJnZXRUeXBlIiwiaXNFeHRlbnNpYmxlIiwicmF3VHlwZSIsInRhcmdldFR5cGVNYXAiLCJ0b1Jhd1R5cGUiLCJwcm94eSIsImNvbnZlcnQiLCJ2YWwiLCJyIiwiQm9vbGVhbiIsIl9fdl9pc1JlZiIsIlJlZkltcGwiLCJfcmF3VmFsdWUiLCJfc2hhbGxvdyIsIl92YWx1ZSIsIm5ld1ZhbCIsInJhd1ZhbHVlIiwidW5yZWYiLCJfZ2V0IiwiX3NldCIsIk9iamVjdFJlZkltcGwiLCJfb2JqZWN0IiwiX2tleSIsIl9zZXR0ZXIiLCJfZGlydHkiLCJ0ZXh0IiwiYXNCbG9jayIsIm9wZW5CbG9jayIsImNyZWF0ZUJsb2NrIiwiQ29tbWVudCIsImNyZWF0ZVZOb2RlIiwiYmFzZUNyZWF0ZVJlbmRlcmVyIiwiY3JlYXRlSHlkcmF0aW9uRnVuY3Rpb25zIiwic2xvdHMiLCJkeW5hbWljU2xvdHMiLCJzbG90IiwiaiIsIm5hbWUiLCJjb250ZW50IiwibnVtYmVyT2ZOb2RlcyIsInZub2RlIiwiU3RhdGljIiwic3RhdGljQ291bnQiLCJzb3VyY2UiLCJsb2FkZXIiLCJyZXNvbHZlZENvbXAiLCJsb2FkaW5nQ29tcG9uZW50IiwiZXJyb3JDb21wb25lbnQiLCJkZWxheSIsInRpbWVvdXQiLCJzdXNwZW5zaWJsZSIsInVzZXJPbkVycm9yIiwib25FcnJvciIsInBlbmRpbmdSZXF1ZXN0IiwicmV0cmllcyIsImxvYWQiLCJ0aGlzUmVxdWVzdCIsImVyciIsIkVycm9yIiwiU3RyaW5nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0aGVuIiwiY29tcCIsIl9fZXNNb2R1bGUiLCJ0b1N0cmluZ1RhZyIsImRlZmluZUNvbXBvbmVudCIsIl9fYXN5bmNMb2FkZXIiLCJzZXR1cCIsImluc3RhbmNlIiwiY3VycmVudEluc3RhbmNlIiwiY3JlYXRlSW5uZXJDb21wIiwiaGFuZGxlRXJyb3IiLCJzdXNwZW5zZSIsImVycm9yIiwibG9hZGVkIiwiZGVsYXllZCIsInNldFRpbWVvdXQiLCJwcm9wc09yQ2hpbGRyZW4iLCJjaGlsZHJlbiIsImFyZ3VtZW50cyIsImlzVk5vZGUiLCJzbGljZSIsIl9jb21waWxlIiwiY29tcGlsZSIsInJlbmRlckl0ZW0iLCJpc1N0cmluZyIsImZyb20iLCJrZXlzIiwicHJvcHMiLCJmYWxsYmFjayIsImlzUmVuZGVyaW5nQ29tcGlsZWRTbG90IiwicmVuZGVyZWQiLCJGcmFnbWVudCIsIl8iLCJyZXNvbHZlQXNzZXQiLCJDT01QT05FTlRTIiwiY29tcG9uZW50IiwiTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCIsImhvb2siLCJkZXZ0b29scyIsIm9iaiIsInRvSGFuZGxlcktleSIsInRyYW5zZm9ybWVyIiwiZG9XYXRjaCIsImRpcmVjdGl2ZXMiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJiaW5kaW5ncyIsImRpcnMiLCJkaXIiLCJhcmciLCJtb2RpZmllcnMiLCJtb3VudGVkIiwidXBkYXRlZCIsIndpdGhDdHgiLCJwdXNoU2NvcGVJZCIsInBvcFNjb3BlSWQiLCJzdGFjayIsIndhcm4iLCJtc2ciLCJhcHBXYXJuSGFuZGxlciIsImFwcENvbnRleHQiLCJjb25maWciLCJ3YXJuSGFuZGxlciIsInRyYWNlIiwiZ2V0Q29tcG9uZW50VHJhY2UiLCJjYWxsV2l0aEVycm9ySGFuZGxpbmciLCJqb2luIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsIndhcm5BcmdzIiwiZm9ybWF0VHJhY2UiLCJjb25zb2xlIiwiY3VycmVudFZOb2RlIiwibm9ybWFsaXplZFN0YWNrIiwicmVjdXJzZUNvdW50IiwicGFyZW50SW5zdGFuY2UiLCJwYXJlbnQiLCJsb2dzIiwiZW50cnkiLCJwb3N0Zml4IiwiaXNSb290Iiwib3BlbiIsImNsb3NlIiwiZm9ybWF0UHJvcCIsIkpTT04iLCJzdHJpbmdpZnkiLCJjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyIsImlzUHJvbWlzZSIsInZhbHVlcyIsImNvbnRleHRWTm9kZSIsImN1ciIsImV4cG9zZWRJbnN0YW5jZSIsImVycm9ySW5mbyIsImVycm9yQ2FwdHVyZWRIb29rcyIsImVjIiwiYXBwRXJyb3JIYW5kbGVyIiwiZXJyb3JIYW5kbGVyIiwibG9nRXJyb3IiLCJpc0ZsdXNoaW5nIiwiaXNGbHVzaFBlbmRpbmciLCJxdWV1ZSIsImZsdXNoSW5kZXgiLCJwZW5kaW5nUHJlRmx1c2hDYnMiLCJhY3RpdmVQcmVGbHVzaENicyIsInByZUZsdXNoSW5kZXgiLCJwZW5kaW5nUG9zdEZsdXNoQ2JzIiwiYWN0aXZlUG9zdEZsdXNoQ2JzIiwicG9zdEZsdXNoSW5kZXgiLCJyZXNvbHZlZFByb21pc2UiLCJjdXJyZW50Rmx1c2hQcm9taXNlIiwiY3VycmVudFByZUZsdXNoUGFyZW50Sm9iIiwibmV4dFRpY2siLCJwIiwiYmluZCIsInF1ZXVlSm9iIiwiam9iIiwicXVldWVGbHVzaCIsImZsdXNoSm9icyIsInF1ZXVlQ2IiLCJjYiIsImFjdGl2ZVF1ZXVlIiwicGVuZGluZ1F1ZXVlIiwiaW5kZXgiLCJxdWV1ZVByZUZsdXNoQ2IiLCJxdWV1ZVBvc3RGbHVzaENiIiwiZmx1c2hQcmVGbHVzaENicyIsInNlZW4iLCJwYXJlbnRKb2IiLCJmbHVzaFBvc3RGbHVzaENicyIsImRlZHVwZWQiLCJzb3J0IiwiYSIsImIiLCJnZXRJZCIsIkluZmluaXR5IiwiZGV2dG9vbHNJbml0QXBwIiwiYXBwIiwidmVyc2lvbiIsImVtaXQiLCJUZXh0IiwiZGV2dG9vbHNVbm1vdW50QXBwIiwiZGV2dG9vbHNDb21wb25lbnRBZGRlZCIsImNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayIsImRldnRvb2xzQ29tcG9uZW50VXBkYXRlZCIsImRldnRvb2xzQ29tcG9uZW50UmVtb3ZlZCIsImRldnRvb2xzQ29tcG9uZW50RW1pdCIsImV2ZW50IiwicGFyYW1zIiwicmF3QXJncyIsImlzTW9kZWxMaXN0ZW5lciIsInN0YXJ0c1dpdGgiLCJtb2RlbEFyZyIsIm1vZGlmaWVyc0tleSIsIm51bWJlciIsInRyaW0iLCJ0b051bWJlciIsIl9fVlVFX1BST0RfREVWVE9PTFNfXyIsImhhbmRsZXJOYW1lIiwiY2FtZWxpemUiLCJoYW5kbGVyIiwiaHlwaGVuYXRlIiwib25jZUhhbmRsZXIiLCJlbWl0dGVkIiwibm9ybWFsaXplRW1pdHNPcHRpb25zIiwiYXNNaXhpbiIsImRlb3B0IiwiX19lbWl0cyIsImVtaXRzIiwibm9ybWFsaXplZCIsImhhc0V4dGVuZHMiLCJfX1ZVRV9PUFRJT05TX0FQSV9fIiwiZXh0ZW5kRW1pdHMiLCJtaXhpbnMiLCJpc0VtaXRMaXN0ZW5lciIsImlzT24iLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJyZW5kZXJDb21wb25lbnRSb290IiwiQ29tcG9uZW50Iiwid2l0aFByb3h5IiwicHJvcHNPcHRpb25zIiwiYXR0cnMiLCJyZW5kZXIiLCJyZW5kZXJDYWNoZSIsImRhdGEiLCJzZXR1cFN0YXRlIiwiY3R4IiwiZmFsbHRocm91Z2hBdHRycyIsInNoYXBlRmxhZyIsInByb3h5VG9Vc2UiLCJub3JtYWxpemVWTm9kZSIsImdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaCIsInJvb3QiLCJpbmhlcml0QXR0cnMiLCJzb21lIiwiZmlsdGVyTW9kZWxMaXN0ZW5lcnMiLCJjbG9uZVZOb2RlIiwiY29uY2F0IiwidHJhbnNpdGlvbiIsImhhc1Byb3BzQ2hhbmdlZCIsInByZXZQcm9wcyIsIm5leHRQcm9wcyIsImVtaXRzT3B0aW9ucyIsIm5leHRLZXlzIiwidXBkYXRlSE9DSG9zdEVsIiwiZWwiLCJzdWJUcmVlIiwiaXNTdXNwZW5zZSIsIl9faXNTdXNwZW5zZSIsIlN1c3BlbnNlIiwicHJvY2VzcyIsIm4xIiwibjIiLCJjb250YWluZXIiLCJhbmNob3IiLCJwYXJlbnRDb21wb25lbnQiLCJwYXJlbnRTdXNwZW5zZSIsImlzU1ZHIiwib3B0aW1pemVkIiwicmVuZGVyZXJJbnRlcm5hbHMiLCJwYXRjaCIsImhpZGRlbkNvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJvIiwiY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSIsInBlbmRpbmdCcmFuY2giLCJzc0NvbnRlbnQiLCJzc0ZhbGxiYWNrIiwic2V0QWN0aXZlQnJhbmNoIiwibW91bnRTdXNwZW5zZSIsInVubW91bnQiLCJ1bSIsIm5ld0JyYW5jaCIsIm5ld0ZhbGxiYWNrIiwiYWN0aXZlQnJhbmNoIiwiaXNJbkZhbGxiYWNrIiwiaXNIeWRyYXRpbmciLCJpc1NhbWVWTm9kZVR5cGUiLCJwZW5kaW5nSWQiLCJvblBlbmRpbmciLCJwYXRjaFN1c3BlbnNlIiwiaHlkcmF0ZSIsIm5vZGUiLCJoeWRyYXRlTm9kZSIsInBhcmVudE5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZSIsIm1vdmUiLCJtIiwibiIsInJlbW92ZSIsImlzVW5tb3VudGVkIiwicmVzdW1lIiwiZGVsYXlFbnRlciIsIm1vZGUiLCJhZnRlckxlYXZlIiwiaGFzVW5yZXNvbHZlZEFuY2VzdG9yIiwib25SZXNvbHZlIiwiZmFsbGJhY2tWTm9kZSIsIm9uRmFsbGJhY2siLCJtb3VudEZhbGxiYWNrIiwicmVnaXN0ZXJEZXAiLCJzZXR1cFJlbmRlckVmZmVjdCIsImh5ZHJhdGVkRWwiLCJhc3luY0RlcCIsImFzeW5jU2V0dXBSZXN1bHQiLCJzdXNwZW5zZUlkIiwiYXN5bmNSZXNvbHZlZCIsImhhbmRsZVNldHVwUmVzdWx0IiwicGxhY2Vob2xkZXIiLCJkb1JlbW92ZSIsIm5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW4iLCJub3JtYWxpemVTdXNwZW5zZVNsb3QiLCJzIiwiZmlsdGVyZWQiLCJjaGlsZCIsInF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlIiwiYnJhbmNoIiwic2V0Q29tcGlsZWRTbG90UmVuZGVyaW5nIiwicmVuZGVyRm5XaXRoQ29udGV4dCIsIm93bmVyIiwiY2xvc2VCbG9jayIsIl9jIiwiY3VycmVudFNjb3BlSWQiLCJzY29wZUlkU3RhY2siLCJpbml0UHJvcHMiLCJyYXdQcm9wcyIsImlzU3RhdGVmdWwiLCJpc1NTUiIsIkludGVybmFsT2JqZWN0S2V5Iiwic2V0RnVsbFByb3BzIiwic2hhbGxvd1JlYWN0aXZlIiwibmVlZENhc3RLZXlzIiwiaXNSZXNlcnZlZFByb3AiLCJjYW1lbEtleSIsInJhd0N1cnJlbnRQcm9wcyIsInJlc29sdmVQcm9wVmFsdWUiLCJvcHQiLCJoYXNEZWZhdWx0IiwiZGVmYXVsdFZhbHVlIiwiRnVuY3Rpb24iLCJzZXRDdXJyZW50SW5zdGFuY2UiLCJub3JtYWxpemVQcm9wc09wdGlvbnMiLCJfX3Byb3BzIiwiZXh0ZW5kUHJvcHMiLCJFTVBUWV9BUlIiLCJub3JtYWxpemVkS2V5IiwidmFsaWRhdGVQcm9wTmFtZSIsInByb3AiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJzdHJpbmdJbmRleCIsImdldFR5cGUiLCJjdG9yIiwibWF0Y2giLCJ0b1N0cmluZyIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwibGVuIiwiaW5qZWN0SG9vayIsInByZXBlbmQiLCJob29rcyIsIndyYXBwZWRIb29rIiwiX193ZWgiLCJ1bnNoaWZ0IiwiY3JlYXRlSG9vayIsImxpZmVjeWNsZSIsImlzSW5TU1JDb21wb25lbnRTZXR1cCIsIm9uQmVmb3JlTW91bnQiLCJvbk1vdW50ZWQiLCJvbkJlZm9yZVVwZGF0ZSIsIm9uVXBkYXRlZCIsIm9uQmVmb3JlVW5tb3VudCIsIm9uVW5tb3VudGVkIiwib25SZW5kZXJUcmlnZ2VyZWQiLCJvblJlbmRlclRyYWNrZWQiLCJvbkVycm9yQ2FwdHVyZWQiLCJJTklUSUFMX1dBVENIRVJfVkFMVUUiLCJ3YXRjaCIsImltbWVkaWF0ZSIsImRlZXAiLCJmbHVzaCIsIm9uVHJhY2siLCJvblRyaWdnZXIiLCJmb3JjZVRyaWdnZXIiLCJ0cmF2ZXJzZSIsIm9uSW52YWxpZGF0ZSIsImJhc2VHZXR0ZXIiLCJydW5uZXIiLCJxdWV1ZVBvc3RSZW5kZXJFZmZlY3QiLCJpc01vdW50ZWQiLCJyZWNvcmRJbnN0YW5jZUJvdW5kRWZmZWN0Iiwic3RvcCIsImluc3RhbmNlV2F0Y2giLCJwdWJsaWNUaGlzIiwiaXNTZXQiLCJ1c2VUcmFuc2l0aW9uU3RhdGUiLCJzdGF0ZSIsImlzTGVhdmluZyIsImlzVW5tb3VudGluZyIsImxlYXZpbmdWTm9kZXMiLCJUcmFuc2l0aW9uSG9va1ZhbGlkYXRvciIsIkJhc2VUcmFuc2l0aW9uIiwiYXBwZWFyIiwicGVyc2lzdGVkIiwib25CZWZvcmVFbnRlciIsIm9uRW50ZXIiLCJvbkFmdGVyRW50ZXIiLCJvbkVudGVyQ2FuY2VsbGVkIiwib25CZWZvcmVMZWF2ZSIsIm9uTGVhdmUiLCJvbkFmdGVyTGVhdmUiLCJvbkxlYXZlQ2FuY2VsbGVkIiwib25CZWZvcmVBcHBlYXIiLCJvbkFwcGVhciIsIm9uQWZ0ZXJBcHBlYXIiLCJvbkFwcGVhckNhbmNlbGxlZCIsInByZXZUcmFuc2l0aW9uS2V5IiwiZ2V0Q3VycmVudEluc3RhbmNlIiwiZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuIiwiZW1wdHlQbGFjZWhvbGRlciIsImlubmVyQ2hpbGQiLCJnZXRLZWVwQWxpdmVDaGlsZCIsImVudGVySG9va3MiLCJyZXNvbHZlVHJhbnNpdGlvbkhvb2tzIiwic2V0VHJhbnNpdGlvbkhvb2tzIiwib2xkQ2hpbGQiLCJvbGRJbm5lckNoaWxkIiwidHJhbnNpdGlvbktleUNoYW5nZWQiLCJnZXRUcmFuc2l0aW9uS2V5IiwibGVhdmluZ0hvb2tzIiwidXBkYXRlIiwiZGVsYXlMZWF2ZSIsImVhcmx5UmVtb3ZlIiwiZGVsYXllZExlYXZlIiwiZ2V0TGVhdmluZ05vZGVzRm9yVHlwZSIsIl9sZWF2ZUNiIiwibGVhdmluZ1ZOb2Rlc0NhY2hlIiwiY2FsbEhvb2siLCJiZWZvcmVFbnRlciIsImxlYXZpbmdWTm9kZSIsImVudGVyIiwiYWZ0ZXJIb29rIiwiY2FuY2VsSG9vayIsImNhbGxlZCIsIl9lbnRlckNiIiwiY2FuY2VsbGVkIiwibGVhdmUiLCJjbG9uZSIsImlzS2VlcEFsaXZlIiwia2VlcENvbW1lbnQiLCJrZXllZEZyYWdtZW50Q291bnQiLCJwYXRjaEZsYWciLCJfX2lzS2VlcEFsaXZlIiwiS2VlcEFsaXZlIiwiaW5oZXJpdFJlZiIsImluY2x1ZGUiLCJSZWdFeHAiLCJleGNsdWRlIiwibWF4IiwiY2FjaGUiLCJjdXJyZW50Iiwic2hhcmVkQ29udGV4dCIsInJlbmRlcmVyIiwiX3VubW91bnQiLCJzdG9yYWdlQ29udGFpbmVyIiwicmVzZXRTaGFwZUZsYWciLCJwcnVuZUNhY2hlIiwiZ2V0TmFtZSIsInBydW5lQ2FjaGVFbnRyeSIsImNhY2hlZCIsImFjdGl2YXRlIiwiaXNEZWFjdGl2YXRlZCIsImludm9rZUFycmF5Rm5zIiwidm5vZGVIb29rIiwib25Wbm9kZU1vdW50ZWQiLCJpbnZva2VWTm9kZUhvb2siLCJkZWFjdGl2YXRlIiwiZGEiLCJvblZub2RlVW5tb3VudGVkIiwibWF0Y2hlcyIsInBlbmRpbmdDYWNoZUtleSIsImNhY2hlU3VidHJlZSIsImdldElubmVyQ2hpbGQiLCJyYXdWTm9kZSIsImNhY2hlZFZOb2RlIiwicGFyc2VJbnQiLCJkaXNwbGF5TmFtZSIsInBhdHRlcm4iLCJzcGxpdCIsImluZGV4T2YiLCJ0ZXN0Iiwib25BY3RpdmF0ZWQiLCJyZWdpc3RlcktlZXBBbGl2ZUhvb2siLCJvbkRlYWN0aXZhdGVkIiwiX193ZGMiLCJpbmplY3RUb0tlZXBBbGl2ZVJvb3QiLCJrZWVwQWxpdmVSb290IiwiaW5qZWN0ZWQiLCJpc0ludGVybmFsS2V5Iiwibm9ybWFsaXplU2xvdFZhbHVlIiwibm9ybWFsaXplU2xvdCIsInJhd1Nsb3QiLCJub3JtYWxpemVPYmplY3RTbG90cyIsInJhd1Nsb3RzIiwiX2N0eCIsIm5vcm1hbGl6ZVZOb2RlU2xvdHMiLCJpbml0U2xvdHMiLCJpbnZva2VEaXJlY3RpdmVIb29rIiwicHJldlZOb2RlIiwib2xkQmluZGluZ3MiLCJiaW5kaW5nIiwiY3JlYXRlQXBwQ29udGV4dCIsImlzTmF0aXZlVGFnIiwiTk8iLCJwZXJmb3JtYW5jZSIsImdsb2JhbFByb3BlcnRpZXMiLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJpc0N1c3RvbUVsZW1lbnQiLCJjb21wb25lbnRzIiwicHJvdmlkZXMiLCJjcmVhdGVBcHBBUEkiLCJyb290Q29tcG9uZW50Iiwicm9vdFByb3BzIiwiY29udGV4dCIsImluc3RhbGxlZFBsdWdpbnMiLCJfdWlkIiwiX2NvbXBvbmVudCIsIl9wcm9wcyIsIl9jb250YWluZXIiLCJfY29udGV4dCIsInVzZSIsInBsdWdpbiIsImluc3RhbGwiLCJtaXhpbiIsImRpcmVjdGl2ZSIsIm1vdW50Iiwicm9vdENvbnRhaW5lciIsImlzSHlkcmF0ZSIsIl9fdnVlX2FwcF9fIiwicHJvdmlkZSIsImhhc01pc21hdGNoIiwiaXNTVkdDb250YWluZXIiLCJuYW1lc3BhY2VVUkkiLCJ0YWdOYW1lIiwiaXNDb21tZW50Iiwibm9kZVR5cGUiLCJtb3VudENvbXBvbmVudCIsIm10IiwicGF0Y2hQcm9wIiwibmV4dFNpYmxpbmciLCJpbnNlcnQiLCJjcmVhdGVDb21tZW50IiwiaXNGcmFnbWVudFN0YXJ0Iiwib25NaXNtYXRjaCIsImhhbmRsZU1pc21hdGNoIiwiZG9tVHlwZSIsIm5leHROb2RlIiwibmVlZFRvQWRvcHRDb250ZW50Iiwib3V0ZXJIVE1MIiwiaHlkcmF0ZUZyYWdtZW50IiwiaHlkcmF0ZUVsZW1lbnQiLCJoeWRyYXRlQ29tcG9uZW50IiwibG9hZEFzeW5jIiwibG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yIiwiaHlkcmF0ZUNoaWxkcmVuIiwic2V0UmVmIiwiZHluYW1pY0NoaWxkcmVuIiwib25DbGljayIsInZub2RlSG9va3MiLCJvblZub2RlQmVmb3JlTW91bnQiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJwYXJlbnRWTm9kZSIsImlzRnJhZ21lbnQiLCJlbmQiLCJwcm9kRWZmZWN0T3B0aW9ucyIsInJhd1JlZiIsIm9sZFJhd1JlZiIsIm9sZFJlZiIsInJlZnMiLCJkb1NldCIsImNyZWF0ZUh5ZHJhdGlvbkZucyIsImdldEdsb2JhbFRoaXMiLCJob3N0SW5zZXJ0IiwiaG9zdFJlbW92ZSIsImhvc3RQYXRjaFByb3AiLCJob3N0Rm9yY2VQYXRjaFByb3AiLCJmb3JjZVBhdGNoUHJvcCIsImhvc3RDcmVhdGVFbGVtZW50IiwiaG9zdENyZWF0ZVRleHQiLCJjcmVhdGVUZXh0IiwiaG9zdENyZWF0ZUNvbW1lbnQiLCJob3N0U2V0VGV4dCIsInNldFRleHQiLCJob3N0U2V0RWxlbWVudFRleHQiLCJzZXRFbGVtZW50VGV4dCIsImhvc3RQYXJlbnROb2RlIiwiaG9zdE5leHRTaWJsaW5nIiwic2V0U2NvcGVJZCIsImhvc3RTZXRTY29wZUlkIiwiaG9zdENsb25lTm9kZSIsImNsb25lTm9kZSIsImhvc3RJbnNlcnRTdGF0aWNDb250ZW50IiwiaW5zZXJ0U3RhdGljQ29udGVudCIsImdldE5leHRIb3N0Tm9kZSIsInByb2Nlc3NUZXh0IiwicHJvY2Vzc0NvbW1lbnROb2RlIiwibW91bnRTdGF0aWNOb2RlIiwicHJvY2Vzc0ZyYWdtZW50IiwicHJvY2Vzc0VsZW1lbnQiLCJwcm9jZXNzQ29tcG9uZW50IiwiaW50ZXJuYWxzIiwibW91bnRFbGVtZW50IiwicGF0Y2hFbGVtZW50Iiwic2NvcGVJZCIsImlzIiwibW91bnRDaGlsZHJlbiIsInVubW91bnRDaGlsZHJlbiIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIm5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzIiwidHJlZU93bmVySWQiLCJfX3Njb3BlSWQiLCJzdGFydCIsImNsb25lSWZNb3VudGVkIiwib2xkUHJvcHMiLCJuZXdQcm9wcyIsIm9uVm5vZGVCZWZvcmVVcGRhdGUiLCJwYXRjaFByb3BzIiwic3R5bGUiLCJwcm9wc1RvVXBkYXRlIiwiZHluYW1pY1Byb3BzIiwicHJldiIsImFyZUNoaWxkcmVuU1ZHIiwicGF0Y2hCbG9ja0NoaWxkcmVuIiwicGF0Y2hDaGlsZHJlbiIsIm9uVm5vZGVVcGRhdGVkIiwib2xkQ2hpbGRyZW4iLCJuZXdDaGlsZHJlbiIsImZhbGxiYWNrQ29udGFpbmVyIiwib2xkVk5vZGUiLCJuZXdWTm9kZSIsImZyYWdtZW50U3RhcnRBbmNob3IiLCJmcmFnbWVudEVuZEFuY2hvciIsInRyYXZlcnNlU3RhdGljQ2hpbGRyZW4iLCJ1cGRhdGVDb21wb25lbnQiLCJpbml0aWFsVk5vZGUiLCJlbXB0eUFwcENvbnRleHQiLCJ1aWQkMSIsImFjY2Vzc0NhY2hlIiwic2V0dXBDb250ZXh0IiwiYmMiLCJjIiwiYm0iLCJidSIsInUiLCJidW0iLCJydGciLCJydGMiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZSIsInNldHVwU3RhdGVmdWxDb21wb25lbnQiLCJzZXR1cENvbXBvbmVudCIsIm5leHRWTm9kZSIsInByZXZDaGlsZHJlbiIsIm5leHRDaGlsZHJlbiIsIiRzdGFibGUiLCJzaG91bGRVcGRhdGVDb21wb25lbnQiLCJ1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIiLCJvcmlnaW5OZXh0IiwibmV4dFRyZWUiLCJwcmV2VHJlZSIsInJhd1ByZXZQcm9wcyIsImtlYmFiS2V5IiwiY2FtZWxpemVkS2V5IiwidXBkYXRlUHJvcHMiLCJuZWVkRGVsZXRpb25DaGVjayIsImRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCIsImRlZmF1bHQiLCJ1cGRhdGVTbG90cyIsImMxIiwicHJldlNoYXBlRmxhZyIsImMyIiwicGF0Y2hLZXllZENoaWxkcmVuIiwicGF0Y2hVbmtleWVkQ2hpbGRyZW4iLCJvbGRMZW5ndGgiLCJuZXdMZW5ndGgiLCJjb21tb25MZW5ndGgiLCJNYXRoIiwibWluIiwibmV4dENoaWxkIiwicGFyZW50QW5jaG9yIiwibDIiLCJlMSIsImUyIiwibmV4dFBvcyIsInMxIiwiczIiLCJrZXlUb05ld0luZGV4TWFwIiwicGF0Y2hlZCIsInRvQmVQYXRjaGVkIiwibW92ZWQiLCJtYXhOZXdJbmRleFNvRmFyIiwibmV3SW5kZXhUb09sZEluZGV4TWFwIiwicHJldkNoaWxkIiwibmV3SW5kZXgiLCJpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZSIsImFyckkiLCJnZXRTZXF1ZW5jZSIsIm5leHRJbmRleCIsIm1vdmVUeXBlIiwibmVlZFRyYW5zaXRpb24iLCJwZXJmb3JtTGVhdmUiLCJzaG91bGRJbnZva2VEaXJzIiwib25Wbm9kZUJlZm9yZVVubW91bnQiLCJ1bm1vdW50Q29tcG9uZW50IiwiaXNUZWxlcG9ydERpc2FibGVkIiwicGVyZm9ybVJlbW92ZSIsInJlbW92ZUZyYWdtZW50IiwiX3Zub2RlIiwibWMiLCJwYyIsInBiYyIsImNyZWF0ZUFwcCIsImNoMSIsImNoMiIsImlzVGVsZXBvcnQiLCJfX2lzVGVsZXBvcnQiLCJkaXNhYmxlZCIsInJlc29sdmVUYXJnZXQiLCJzZWxlY3QiLCJ0YXJnZXRTZWxlY3RvciIsInRvIiwibW92ZVRlbGVwb3J0IiwidGFyZ2V0QW5jaG9yIiwiaXNSZW9yZGVyIiwiVGVsZXBvcnQiLCJxdWVyeVNlbGVjdG9yIiwibWFpbkFuY2hvciIsIndhc0Rpc2FibGVkIiwiY3VycmVudENvbnRhaW5lciIsImN1cnJlbnRBbmNob3IiLCJuZXh0VGFyZ2V0IiwidGFyZ2V0Tm9kZSIsIl9scGEiLCJzZWxmTmFtZSIsImNhcGl0YWxpemUiLCJyZWdpc3RyeSIsImJsb2NrU3RhY2siLCJjdXJyZW50QmxvY2siLCJkaXNhYmxlVHJhY2tpbmciLCJfX3ZfaXNWTm9kZSIsIm5vcm1hbGl6ZUtleSIsIm5vcm1hbGl6ZVJlZiIsImlzQmxvY2tOb2RlIiwiY2xvbmVkIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJpc0NsYXNzQ29tcG9uZW50IiwiX192Y2NPcHRzIiwiaXNQcm94eSIsImtsYXNzIiwibm9ybWFsaXplQ2xhc3MiLCJub3JtYWxpemVTdHlsZSIsImV4dHJhUHJvcHMiLCJtZXJnZVJlZiIsIm1lcmdlZFByb3BzIiwibWVyZ2VQcm9wcyIsImNyZWF0ZVRleHRWTm9kZSIsImZsYWciLCJzbG90RmxhZyIsInRvTWVyZ2UiLCJleGlzdGluZyIsImluY29taW5nIiwicGFyZW50UHJvdmlkZXMiLCJpbmplY3QiLCJ0cmVhdERlZmF1bHRBc0ZhY3RvcnkiLCJpc0luQmVmb3JlQ3JlYXRlIiwiYXBwbHlPcHRpb25zIiwiZGVmZXJyZWREYXRhIiwiZGVmZXJyZWRXYXRjaCIsImRlZmVycmVkUHJvdmlkZSIsImV4dGVuZHNPcHRpb25zIiwiZGF0YU9wdGlvbnMiLCJjb21wdXRlZE9wdGlvbnMiLCJjb21wdXRlZCIsIm1ldGhvZHMiLCJ3YXRjaE9wdGlvbnMiLCJwcm92aWRlT3B0aW9ucyIsImluamVjdE9wdGlvbnMiLCJiZWZvcmVNb3VudCIsImJlZm9yZVVwZGF0ZSIsImFjdGl2YXRlZCIsImRlYWN0aXZhdGVkIiwiYmVmb3JlVW5tb3VudCIsImJlZm9yZURlc3Ryb3kiLCJ1bm1vdW50ZWQiLCJkZXN0cm95ZWQiLCJyZW5kZXJUcmFja2VkIiwicmVuZGVyVHJpZ2dlcmVkIiwiZXJyb3JDYXB0dXJlZCIsImdsb2JhbE1peGlucyIsImNhbGxTeW5jSG9vayIsImFwcGx5TWl4aW5zIiwibWV0aG9kSGFuZGxlciIsImRhdGFGbiIsInJlc29sdmVEYXRhIiwiY29uZmlndXJhYmxlIiwiY3JlYXRlV2F0Y2hlciIsImNhbGxIb29rRnJvbU1peGlucyIsImJhc2UiLCJjYWxsSG9va0Zyb21FeHRlbmRzIiwic2VsZkhvb2siLCJiYXNlSG9vayIsImNoYWluZWRNaXhpbnMiLCJwYXRoIiwic2VnbWVudHMiLCJjcmVhdGVQYXRoR2V0dGVyIiwibWVyZ2VPcHRpb25zIiwic3RyYXRzIiwicHVibGljUHJvcGVydGllc01hcCIsIiQiLCIkZWwiLCIkZGF0YSIsIiRwcm9wcyIsIiRhdHRycyIsIiRzbG90cyIsIiRyZWZzIiwiJHBhcmVudCIsIiRyb290IiwiJGVtaXQiLCIkb3B0aW9ucyIsIl9fbWVyZ2VkIiwicmVzb2x2ZU1lcmdlZE9wdGlvbnMiLCIkZm9yY2VVcGRhdGUiLCIkbmV4dFRpY2siLCIkd2F0Y2giLCJQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJub3JtYWxpemVkUHJvcHMiLCJjc3NNb2R1bGUiLCJwdWJsaWNHZXR0ZXIiLCJfX2Nzc01vZHVsZXMiLCJSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJ1bnNjb3BhYmxlcyIsImlzR2xvYmFsbHlXaGl0ZWxpc3RlZCIsImNyZWF0ZVNldHVwQ29udGV4dCIsInNldHVwUmVzdWx0IiwicmVzb2x2ZWRSZXN1bHQiLCJmaW5pc2hDb21wb25lbnRTZXR1cCIsImRldnRvb2xzUmF3U2V0dXBTdGF0ZSIsInByb3h5UmVmcyIsInRlbXBsYXRlIiwiZGVsaW1pdGVycyIsIl9yYyIsImNsYXNzaWZ5UkUiLCJjbGFzc2lmeSIsInN0ciIsInRvVXBwZXJDYXNlIiwiX19maWxlIiwiaW5mZXJGcm9tUmVnaXN0cnkiLCJzc3JDb250ZXh0S2V5IiwibW9kdWxlcyIsIm1vZCIsInNjb3BlZCIsInByZWZpeCIsInNldFZhcnMiLCJzZXRWYXJzT25WTm9kZSIsIndhdGNoRWZmZWN0IiwidGVtcENvbnRhaW5lciIsInRlbXBTVkdDb250YWluZXIiLCJzdmdOUyIsImRvYyIsIm5vZGVPcHMiLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVDaGlsZCIsInRhZyIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwibm9kZVZhbHVlIiwic2VsZWN0b3IiLCJzZXRBdHRyaWJ1dGUiLCJ0ZW1wIiwiZmlyc3QiLCJwYXRjaENsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJfdnRjIiwiY2xhc3NOYW1lIiwicGF0Y2hTdHlsZSIsImNzc1RleHQiLCJzZXRTdHlsZSIsInJlbW92ZUF0dHJpYnV0ZSIsImltcG9ydGFudFJFIiwic2V0UHJvcGVydHkiLCJwcmVmaXhlZCIsInJhd05hbWUiLCJwcmVmaXhDYWNoZSIsInByZWZpeGVzIiwiYXV0b1ByZWZpeCIsInhsaW5rTlMiLCJwYXRjaEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZU5TIiwiaXNCb29sZWFuIiwiaXNTcGVjaWFsQm9vbGVhbkF0dHIiLCJwYXRjaERPTVByb3AiLCJlIiwiX2dldE5vdyIsIkRhdGUiLCJub3ciLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsImNhY2hlZE5vdyIsInJlc2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwYXRjaEV2ZW50IiwicHJldlZhbHVlIiwibmV4dFZhbHVlIiwiaW52b2tlcnMiLCJfdmVpIiwiZXhpc3RpbmdJbnZva2VyIiwicGFyc2VOYW1lIiwiaW52b2tlciIsImNyZWF0ZUludm9rZXIiLCJvcHRpb25zTW9kaWZpZXJSRSIsImluaXRpYWxWYWx1ZSIsImF0dGFjaGVkIiwib3JpZ2luYWxTdG9wIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiX3N0b3BwZWQiLCJwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm5hdGl2ZU9uUkUiLCJzaG91bGRTZXRBc1Byb3AiLCJ2YXJzIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsIlRyYW5zaXRpb24iLCJoIiwicmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyIsIkRPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJjc3MiLCJkdXJhdGlvbiIsImVudGVyRnJvbUNsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImVudGVyVG9DbGFzcyIsImFwcGVhckZyb21DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImxlYXZlRnJvbUNsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsIlRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJiYXNlUHJvcHMiLCJkdXJhdGlvbnMiLCJOdW1iZXJPZiIsIm5vcm1hbGl6ZUR1cmF0aW9uIiwiZW50ZXJEdXJhdGlvbiIsImxlYXZlRHVyYXRpb24iLCJmaW5pc2hFbnRlciIsImlzQXBwZWFyIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwiZmluaXNoTGVhdmUiLCJtYWtlRW50ZXJIb29rIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiY2xzIiwiY2xhc3NMaXN0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZXhwZWN0ZWRUeXBlIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJwcm9wQ291bnQiLCJlbmRFdmVudCIsImVuZGVkIiwib25FbmQiLCJzdHlsZXMiLCJ3aW5kb3ciLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0U3R5bGVQcm9wZXJ0aWVzIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZCIsInRvTXMiLCJwb3NpdGlvbk1hcCIsIm5ld1Bvc2l0aW9uTWFwIiwiVHJhbnNpdGlvbkdyb3VwIiwibW92ZUNsYXNzIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiaGFzQ1NTVHJhbnNmb3JtIiwiY2FsbFBlbmRpbmdDYnMiLCJyZWNvcmRQb3NpdGlvbiIsIm1vdmVkQ2hpbGRyZW4iLCJhcHBseVRyYW5zbGF0aW9uIiwiYm9keSIsIm9mZnNldEhlaWdodCIsInRyYW5zZm9ybSIsIndlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsIl9tb3ZlQ2IiLCJwcm9wZXJ0eU5hbWUiLCJjc3NUcmFuc2l0aW9uUHJvcHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvbGRQb3MiLCJuZXdQb3MiLCJkeCIsImxlZnQiLCJkeSIsInRvcCIsImdldE1vZGVsQXNzaWduZXIiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpbmciLCJvbkNvbXBvc2l0aW9uRW5kIiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInZNb2RlbFRleHQiLCJjcmVhdGVkIiwiX2Fzc2lnbiIsImNhc3RUb051bWJlciIsImRvbVZhbHVlIiwiYWN0aXZlRWxlbWVudCIsInZNb2RlbENoZWNrYm94Iiwic2V0Q2hlY2tlZCIsIm1vZGVsVmFsdWUiLCJfbW9kZWxWYWx1ZSIsImVsZW1lbnRWYWx1ZSIsImdldFZhbHVlIiwiY2hlY2tlZCIsImFzc2lnbiIsImxvb3NlSW5kZXhPZiIsImZvdW5kIiwic3BsaWNlIiwiZ2V0Q2hlY2tib3hWYWx1ZSIsImxvb3NlRXF1YWwiLCJ2TW9kZWxSYWRpbyIsInZNb2RlbFNlbGVjdCIsInNlbGVjdGVkVmFsIiwic2VsZWN0ZWQiLCJtdWx0aXBsZSIsInNldFNlbGVjdGVkIiwiX2JpbmRpbmciLCJpc011bHRpcGxlIiwib3B0aW9uIiwib3B0aW9uVmFsdWUiLCJzZWxlY3RlZEluZGV4Iiwidk1vZGVsRHluYW1pYyIsImNhbGxNb2RlbEhvb2siLCJtb2RlbFRvVXNlIiwic3lzdGVtTW9kaWZpZXJzIiwibW9kaWZpZXJHdWFyZHMiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzZWxmIiwiY3VycmVudFRhcmdldCIsImN0cmwiLCJjdHJsS2V5Iiwic2hpZnQiLCJzaGlmdEtleSIsImFsdCIsImFsdEtleSIsIm1ldGEiLCJtZXRhS2V5IiwiYnV0dG9uIiwibWlkZGxlIiwicmlnaHQiLCJleGFjdCIsImd1YXJkIiwia2V5TmFtZXMiLCJlc2MiLCJzcGFjZSIsInVwIiwiZG93biIsImV2ZW50S2V5IiwiayIsInZTaG93IiwiX3ZvZCIsInNldERpc3BsYXkiLCJyZW5kZXJlck9wdGlvbnMiLCJfdHJ1ZVZhbHVlIiwiX2ZhbHNlVmFsdWUiLCJlbmFibGVkSHlkcmF0aW9uIiwiZW5zdXJlUmVuZGVyZXIiLCJjcmVhdGVSZW5kZXJlciIsImVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyIiwiY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIiLCJub3JtYWxpemVDb250YWluZXIiLCJjb250YWluZXJPclNlbGVjdG9yIiwibWFrZU1hcCIsImV4cGVjdHNMb3dlckNhc2UiLCJsaXN0Iiwic3RyaW5nIiwiZXNjYXBlUkUiLCJleGVjIiwiZXNjYXBlZCIsImh0bWwiLCJsYXN0SW5kZXgiLCJjaGFyQ29kZUF0Iiwic3Vic3RyaW5nIiwic3JjIiwiY29tbWVudFN0cmlwUkUiLCJsaW5lcyIsImNvdW50IiwibGluZSIsInJlcGVhdCIsImxpbmVMZW5ndGgiLCJwYWQiLCJhdHRyVmFsaWRhdGlvbkNhY2hlIiwiaGFzT3duUHJvcGVydHkiLCJpc1Vuc2FmZSIsInVuc2FmZUF0dHJDaGFyUkUiLCJmaW5kSW5kZXgiLCJpdGVtIiwicGFyc2VTdHJpbmdTdHlsZSIsImlzTm9Vbml0TnVtZXJpY1N0eWxlUHJvcCIsIlBhdGNoRmxhZ05hbWVzIiwic3BlY2lhbEJvb2xlYW5BdHRycyIsImlzQm9vbGVhbkF0dHIiLCJhY2NlcHRDaGFyc2V0IiwiaHRtbEZvciIsImh0dHBFcXVpdiIsImlzS25vd25BdHRyIiwibGlzdERlbGltaXRlclJFIiwicHJvcGVydHlEZWxpbWl0ZXJSRSIsInRtcCIsImlzSFRNTFRhZyIsImlzU1ZHVGFnIiwiaXNWb2lkVGFnIiwiYVZhbGlkVHlwZSIsImlzRGF0ZSIsImJWYWxpZFR5cGUiLCJnZXRUaW1lIiwiZXF1YWwiLCJsb29zZUNvbXBhcmVBcnJheXMiLCJhSGFzS2V5IiwiYkhhc0tleSIsInJlcGxhY2VyIiwiZW50cmllcyIsInJlZHVjZSIsImlzUGxhaW5PYmplY3QiLCJvblJFIiwidG9UeXBlU3RyaW5nIiwib2JqZWN0VG9TdHJpbmciLCJjYWNoZVN0cmluZ0Z1bmN0aW9uIiwiY2FtZWxpemVSRSIsImh5cGhlbmF0ZVJFIiwiY2hhckF0IiwiX2dsb2JhbFRoaXMiLCJmbnMiLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJnbG9iYWxUaGlzIiwiZ2xvYmFsIiwibW9kdWxlIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIyIiwiX2l0ZW0iLCJfYXJyYXlXaXRoSG9sZXMiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJtaW5MZW4iLCJjb25zdHJ1Y3RvciIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImxvZyIsImxvY2F0aW9uIiwib3JpZ2luIiwiYWpheCIsInVybCIsInN1Y2Nlc3MiLCJjbGFzcyIsImxpc3RlbmVycyIsInBvc2l0aW9uIiwic2V0TG9jYXRpb24iLCJ0cmlnZ2VyTGlzdGVuZXJzIiwiaW5mbyIsImRpcmVjdGlvbiIsImRlbHRhIiwiTmF2aWdhdGlvblR5cGUiLCJyb3V0ZXJIaXN0b3J5IiwiY3JlYXRlSHJlZiIsImxpc3RlbiIsImRlc3Ryb3kiLCJnbyIsInNob3VsZFRyaWdnZXIiLCJOYXZpZ2F0aW9uRGlyZWN0aW9uIiwiYmFjayIsImZvcndhcmQiLCJtYXRjaGVyIiwiY3JlYXRlUm91dGVyTWF0Y2hlciIsInJvdXRlcyIsInBhcnNlUXVlcnkkMSIsInBhcnNlUXVlcnkiLCJzdHJpbmdpZnlRdWVyeSQxIiwic3RyaW5naWZ5UXVlcnkiLCJzY3JvbGxCZWhhdmlvciIsImhpc3RvcnkiLCJiZWZvcmVHdWFyZHMiLCJ1c2VDYWxsYmFja3MiLCJiZWZvcmVSZXNvbHZlR3VhcmRzIiwiYWZ0ZXJHdWFyZHMiLCJjdXJyZW50Um91dGUiLCJzaGFsbG93UmVmIiwiU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCIsInBlbmRpbmdMb2NhdGlvbiIsImlzQnJvd3NlciIsInNjcm9sbFJlc3RvcmF0aW9uIiwicmVtb3ZlSGlzdG9yeUxpc3RlbmVyIiwibm9ybWFsaXplUGFyYW1zIiwiYXBwbHlUb1BhcmFtcyIsInBhcmFtVmFsdWUiLCJlbmNvZGVQYXJhbXMiLCJlbmNvZGVQYXJhbSIsImRlY29kZVBhcmFtcyIsImRlY29kZSIsInJhd0xvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwibG9jYXRpb25Ob3JtYWxpemVkIiwicGFyc2VVUkwiLCJtYXRjaGVkUm91dGUiLCJocmVmIiwiZnVsbFBhdGgiLCJoYXNoIiwicmVkaXJlY3RlZEZyb20iLCJtYXRjaGVyTG9jYXRpb24iLCJxdWVyeSIsInN0cmluZ2lmeVVSTCIsImNvbW1vbkVuY29kZSIsIkVOQ19DVVJMWV9PUEVOX1JFIiwiRU5DX0NVUkxZX0NMT1NFX1JFIiwiRU5DX0NBUkVUX1JFIiwibm9ybWFsaXplUXVlcnkiLCJsb2NhdGlvbkFzT2JqZWN0IiwiY2hlY2tDYW5jZWxlZE5hdmlnYXRpb24iLCJjcmVhdGVSb3V0ZXJFcnJvciIsInB1c2hXaXRoUmVkaXJlY3QiLCJoYW5kbGVSZWRpcmVjdFJlY29yZCIsImxhc3RNYXRjaGVkIiwibWF0Y2hlZCIsInJlZGlyZWN0IiwibmV3VGFyZ2V0TG9jYXRpb24iLCJ0YXJnZXRMb2NhdGlvbiIsImZvcmNlIiwic2hvdWxkUmVkaXJlY3QiLCJmYWlsdXJlIiwidG9Mb2NhdGlvbiIsImFMYXN0SW5kZXgiLCJiTGFzdEluZGV4IiwiaXNTYW1lUm91dGVSZWNvcmQiLCJpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zIiwiaXNTYW1lUm91dGVMb2NhdGlvbiIsImhhbmRsZVNjcm9sbCIsIm5hdmlnYXRlIiwiaXNOYXZpZ2F0aW9uRmFpbHVyZSIsInRyaWdnZXJFcnJvciIsImZpbmFsaXplTmF2aWdhdGlvbiIsInRyaWdnZXJBZnRlckVhY2giLCJjaGVja0NhbmNlbGVkTmF2aWdhdGlvbkFuZFJlamVjdCIsImd1YXJkcyIsImxlYXZpbmdSZWNvcmRzIiwidXBkYXRpbmdSZWNvcmRzIiwiZW50ZXJpbmdSZWNvcmRzIiwicmVjb3JkRnJvbSIsInJlY29yZFRvIiwiZXh0cmFjdENoYW5naW5nUmVjb3JkcyIsImV4dHJhY3RDb21wb25lbnRzR3VhcmRzIiwicmV2ZXJzZSIsImxlYXZlR3VhcmRzIiwiZ3VhcmRUb1Byb21pc2VGbiIsImNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrIiwicnVuR3VhcmRRdWV1ZSIsInVwZGF0ZUd1YXJkcyIsInJlY29yZCIsImVudGVyQ2FsbGJhY2tzIiwiaXNQdXNoIiwiaXNGaXJzdE5hdmlnYXRpb24iLCJzY3JvbGwiLCJtYXJrQXNSZWFkeSIsInJlYWR5IiwicmVhZHlIYW5kbGVycyIsImVycm9ySGFuZGxlcnMiLCJfZnJvbSIsIm5vb3AiLCJzY3JvbGxQb3NpdGlvbiIsImdldFNjcm9sbEtleSIsImNvbXB1dGVTY3JvbGxQb3NpdGlvbiIsInNjcm9sbFBvc2l0aW9ucyIsInNjcm9sbFRvT3B0aW9ucyIsInBvc2l0aW9uRWwiLCJpc0lkU2VsZWN0b3IiLCJnZXRFbGVtZW50QnlJZCIsIm9mZnNldCIsImRvY1JlY3QiLCJkb2N1bWVudEVsZW1lbnQiLCJlbFJlY3QiLCJiZWhhdmlvciIsImdldEVsZW1lbnRQb3NpdGlvbiIsInNjcm9sbFRvIiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvUG9zaXRpb24iLCJzdGFydGVkIiwiaW5zdGFsbGVkQXBwcyIsImFkZFJvdXRlIiwicGFyZW50T3JSb3V0ZSIsInJvdXRlIiwiaXNSb3V0ZU5hbWUiLCJnZXRSZWNvcmRNYXRjaGVyIiwicmVtb3ZlUm91dGUiLCJyZWNvcmRNYXRjaGVyIiwiaGFzUm91dGUiLCJnZXRSb3V0ZXMiLCJyb3V0ZU1hdGNoZXIiLCJiZWZvcmVFYWNoIiwiYmVmb3JlUmVzb2x2ZSIsImFmdGVyRWFjaCIsImlzUmVhZHkiLCJyb3V0ZXIiLCJSb3V0ZXJMaW5rIiwiUm91dGVyVmlldyIsIiRyb3V0ZXIiLCJyZWFjdGl2ZVJvdXRlIiwicm91dGVyS2V5Iiwicm91dGVMb2NhdGlvbktleSIsInVubW91bnRBcHAiLCJyb3V0ZXJJZCIsImxpYiIsInNldHVwRGV2dG9vbHNQbHVnaW4iLCJsYWJlbCIsImFwaSIsIm9uIiwiaW5zcGVjdENvbXBvbmVudCIsInBheWxvYWQiLCJpbnN0YW5jZURhdGEiLCJlZGl0YWJsZSIsImZvcm1hdFJvdXRlTG9jYXRpb24iLCJub3RpZnlDb21wb25lbnRVcGRhdGUiLCJuYXZpZ2F0aW9uc0xheWVySWQiLCJhZGRUaW1lbGluZUxheWVyIiwiY29sb3IiLCJhZGRUaW1lbGluZUV2ZW50IiwibGF5ZXJJZCIsImxvZ1R5cGUiLCJ0aW1lIiwiZm9ybWF0RGlzcGxheSIsIl9jdXN0b20iLCJyZWFkT25seSIsIm1lc3NhZ2UiLCJ0b29sdGlwIiwic3RhdHVzIiwicm91dGVySW5zcGVjdG9ySWQiLCJhZGRJbnNwZWN0b3IiLCJpY29uIiwidHJlZUZpbHRlclBsYWNlaG9sZGVyIiwiZ2V0SW5zcGVjdG9yVHJlZSIsImluc3BlY3RvcklkIiwiaXNSb3V0ZU1hdGNoaW5nIiwiX192ZF9tYXRjaCIsInJvb3ROb2RlcyIsImZvcm1hdFJvdXRlUmVjb3JkRm9ySW5zcGVjdG9yIiwiZ2V0SW5zcGVjdG9yU3RhdGUiLCJmaW5kIiwibm9kZUlkIiwiZm9ybWF0Um91dGVSZWNvcmRNYXRjaGVyRm9yU3RhdGVJbnNwZWN0b3IiLCJhZGREZXZ0b29scyIsImhvc3QiLCJwYXRobmFtZSIsImNyZWF0ZVdlYkhpc3RvcnkiLCJsZWF2ZUd1YXJkIiwiYWN0aXZlUmVjb3JkIiwibWF0Y2hlZFJvdXRlS2V5IiwicmVnaXN0ZXJHdWFyZCIsInVwZGF0ZUd1YXJkIiwiaGFzU3ltYm9sIiwiUG9seVN5bWJvbCIsInZpZXdEZXB0aEtleSIsIm5ld1BhcmFtcyIsIlRSQUlMSU5HX1NMQVNIX1JFIiwic2VhcmNoU3RyaW5nIiwic2VhcmNoUG9zIiwiaGFzaFBvcyIsInJlc29sdmVSZWxhdGl2ZVBhdGgiLCJzdHJpcEJhc2UiLCJhbGlhc09mIiwiaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtc1ZhbHVlIiwiaXNFcXVpdmFsZW50QXJyYXkiLCJldmVyeSIsInRvUG9zaXRpb24iLCJzZWdtZW50IiwiZnJvbVNlZ21lbnRzIiwidG9TZWdtZW50cyIsIkJFRk9SRV9IQVNIX1JFIiwiY3JlYXRlQmFzZUxvY2F0aW9uIiwicHJvdG9jb2wiLCJjcmVhdGVDdXJyZW50TG9jYXRpb24iLCJzZWFyY2giLCJwYXRoRnJvbUhhc2giLCJidWlsZFN0YXRlIiwicmVwbGFjZWQiLCJjb21wdXRlU2Nyb2xsIiwiaGlzdG9yeU5hdmlnYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJjaGFuZ2VMb2NhdGlvbiIsImhhc2hJbmRleCIsImN1cnJlbnRTdGF0ZSIsInVzZUhpc3RvcnlTdGF0ZU5hdmlnYXRpb24iLCJiYXNlRWwiLCJnZXRBdHRyaWJ1dGUiLCJub3JtYWxpemVCYXNlIiwiaGlzdG9yeUxpc3RlbmVycyIsInRlYXJkb3ducyIsInBhdXNlU3RhdGUiLCJwb3BTdGF0ZUhhbmRsZXIiLCJmcm9tU3RhdGUiLCJsaXN0ZW5lciIsInVua25vd24iLCJiZWZvcmVVbmxvYWRMaXN0ZW5lciIsInJlcGxhY2VTdGF0ZSIsInBhdXNlTGlzdGVuZXJzIiwidGVhcmRvd24iLCJ1c2VIaXN0b3J5TGlzdGVuZXJzIiwiTmF2aWdhdGlvbkZhaWx1cmVUeXBlIiwiTmF2aWdhdGlvbkZhaWx1cmVTeW1ib2wiLCJwcm9wZXJ0aWVzVG9Mb2ciLCJzdHJpbmdpZnlSb3V0ZSIsIkJBU0VfUEFSQU1fUEFUVEVSTiIsIkJBU0VfUEFUSF9QQVJTRVJfT1BUSU9OUyIsInNlbnNpdGl2ZSIsInN0cmljdCIsIlJFR0VYX0NIQVJTX1JFIiwiY29tcGFyZVNjb3JlQXJyYXkiLCJkaWZmIiwiY29tcGFyZVBhdGhQYXJzZXJTY29yZSIsImFTY29yZSIsInNjb3JlIiwiYlNjb3JlIiwiUk9PVF9UT0tFTiIsIlZBTElEX1BBUkFNX1JFIiwiY3JlYXRlUm91dGVSZWNvcmRNYXRjaGVyIiwicGFyc2VyIiwiZXh0cmFPcHRpb25zIiwic2VnbWVudFNjb3JlcyIsInRva2VuSW5kZXgiLCJ0b2tlbiIsInN1YlNlZ21lbnRTY29yZSIsInJlcGVhdGFibGUiLCJvcHRpb25hbCIsInJlZ2V4cCIsInJlIiwic3ViUGF0dGVybiIsInBhcnNlIiwiYXZvaWREdXBsaWNhdGVkU2xhc2giLCJlbmRzV2l0aCIsInBhcmFtIiwidG9rZW5zVG9QYXJzZXIiLCJjcmFzaCIsImJ1ZmZlciIsInByZXZpb3VzU3RhdGUiLCJ0b2tlbnMiLCJmaW5hbGl6ZVNlZ21lbnQiLCJjaGFyIiwiY3VzdG9tUmUiLCJjb25zdW1lQnVmZmVyIiwiYWRkQ2hhclRvQnVmZmVyIiwidG9rZW5pemVQYXRoIiwiYWxpYXMiLCJnbG9iYWxPcHRpb25zIiwibWF0Y2hlcnMiLCJtYXRjaGVyTWFwIiwib3JpZ2luYWxSZWNvcmQiLCJpc1Jvb3RBZGQiLCJtYWluTm9ybWFsaXplZFJlY29yZCIsIm5vcm1hbGl6ZVJlY29yZFByb3BzIiwiaW5zdGFuY2VzIiwibm9ybWFsaXplUm91dGVSZWNvcmQiLCJvcmlnaW5hbE1hdGNoZXIiLCJub3JtYWxpemVkUmVjb3JkcyIsIm5vcm1hbGl6ZWRSZWNvcmQiLCJwYXJlbnRQYXRoIiwiY29ubmVjdGluZ1NsYXNoIiwiaXNBbGlhc1JlY29yZCIsImluc2VydE1hdGNoZXIiLCJtYXRjaGVyUmVmIiwicGFyYW1zRnJvbUxvY2F0aW9uIiwicGFyZW50TWF0Y2hlciIsIm1lcmdlTWV0YUZpZWxkcyIsInByb3BzT2JqZWN0IiwiZGVmYXVsdHMiLCJwYXJ0aWFsT3B0aW9ucyIsIkhBU0hfUkUiLCJBTVBFUlNBTkRfUkUiLCJTTEFTSF9SRSIsIkVRVUFMX1JFIiwiSU1fUkUiLCJQTFVTX1JFIiwiRU5DX0JSQUNLRVRfT1BFTl9SRSIsIkVOQ19CUkFDS0VUX0NMT1NFX1JFIiwiRU5DX0JBQ0tUSUNLX1JFIiwiRU5DX1BJUEVfUkUiLCJFTkNfU1BBQ0VfUkUiLCJlbmNvZGVVUkkiLCJlbmNvZGVRdWVyeVZhbHVlIiwiZW5jb2RlUGF0aCIsImRlY29kZVVSSUNvbXBvbmVudCIsInNlYXJjaFBhcmFtcyIsInNlYXJjaFBhcmFtIiwiZXFQb3MiLCJjdXJyZW50VmFsdWUiLCJub3JtYWxpemVkUXVlcnkiLCJoYW5kbGVycyIsInJlbW92ZUZyb21MaXN0IiwiZW50ZXJDYWxsYmFja0FycmF5IiwidmFsaWQiLCJndWFyZFJldHVybiIsImd1YXJkQ2FsbCIsImd1YXJkVHlwZSIsInJhd0NvbXBvbmVudCIsImlzUm91dGVDb21wb25lbnQiLCJjb21wb25lbnRQcm9taXNlIiwicmVzb2x2ZWQiLCJyZXNvbHZlZENvbXBvbmVudCIsInVzZUxpbmsiLCJhY3RpdmVSZWNvcmRJbmRleCIsInJvdXRlTWF0Y2hlZCIsImN1cnJlbnRNYXRjaGVkIiwicGFyZW50UmVjb3JkUGF0aCIsImdldE9yaWdpbmFsUGF0aCIsImlzQWN0aXZlIiwib3V0ZXIiLCJpbm5lciIsImlubmVyVmFsdWUiLCJvdXRlclZhbHVlIiwiaW5jbHVkZXNQYXJhbXMiLCJpc0V4YWN0QWN0aXZlIiwiZ3VhcmRFdmVudCIsInJlcXVpcmVkIiwiYWN0aXZlQ2xhc3MiLCJleGFjdEFjdGl2ZUNsYXNzIiwiY3VzdG9tIiwiYXJpYUN1cnJlbnRWYWx1ZSIsImxpbmsiLCJlbENsYXNzIiwiZ2V0TGlua0NsYXNzIiwibGlua0FjdGl2ZUNsYXNzIiwibGlua0V4YWN0QWN0aXZlQ2xhc3MiLCJkZWZhdWx0UHJldmVudGVkIiwicHJvcENsYXNzIiwiZ2xvYmFsQ2xhc3MiLCJkZWZhdWx0Q2xhc3MiLCJpbmplY3RlZFJvdXRlIiwiZGVwdGgiLCJtYXRjaGVkUm91dGVSZWYiLCJ2aWV3UmVmIiwib2xkSW5zdGFuY2UiLCJWaWV3Q29tcG9uZW50IiwiY3VycmVudE5hbWUiLCJyb3V0ZVByb3BzT3B0aW9uIiwicm91dGVQcm9wcyIsImNvbW1vbmpzR2xvYmFsIiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJiYXNlZGlyIiwicmVxdWlyZSIsImNvbW1vbmpzUmVxdWlyZSIsImVudiIsIm5hdmlnYXRvciIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJfY29uc3QiLCJBcGlIb29rRXZlbnRzIiwiSG9va3MiLCJhcGkkMSIsIl9fY3JlYXRlQmluZGluZyIsImsyIiwiX19leHBvcnRTdGFyIiwicGx1Z2luRGVzY3JpcHRvciIsInNldHVwRm4iLCJTRVRVUF9ERVZUT09MU19QTFVHSU4iLCJfX1ZVRV9ERVZUT09MU19QTFVHSU5TX18iLCJyb3V0ZUxvY2F0aW9uIiwiY29weSIsImZpZWxkcyIsIm1vZGlmaWVyRm9yS2V5IiwidGFncyIsInRleHRDb2xvciIsImJhY2tncm91bmRDb2xvciIsIkVYVFJBQ1RfUkVHRVhQX1JFIiwiZGVjb2RlZFBhdGgiLCJwcm9taXNlIiwiY3JlYXRlUm91dGVyIiwiY3JlYXRlV2ViSGFzaEhpc3RvcnkiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIm1lbW8iLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJzdHlsZVNoZWV0IiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJhcHBseVRvVGFnIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlSW5kZXgiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJhbGwiLCJhdG9iIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwiZyIsIkFwcCJdLCJtYXBwaW5ncyI6Im9HQTR6QkEsU0FBa0JBLEdBQ2QsSUFBSUMsRUFDQUMsRUFhSixPQVpJLElBQUFDLFlBQVdILElBQ1hDLEVBQVNELEVBQ1RFLEVBSU1FLFNBR05ILEVBQVNELEVBQWdCSyxJQUN6QkgsRUFBU0YsRUFBZ0JNLEtBRXRCLElBQUlDLEdBQWdCTixFQUFRQyxHQUFRLElBQUFDLFlBQVdILEtBQXFCQSxFQUFnQk0sTSxZQTNFL0YsU0FBbUJFLEdBQ2YsT0FBTyxJQUFJQyxHQUFjRCxJLHdDQXJGN0IsU0FBaUJFLEdBQ2IsT0FBT0MsR0FBV0Qs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SUFDQyxPQUFPcnRDLE1BQVEsSUFBSW1hLFNBQVMsY0FBYixHQUNkLE1BQU9xakIsR0FDUixHQUFzQixpQkFBWHVFLE9BQXFCLE9BQU9BLFFBTGpCLEdDQXhCeXFCLEVBQW9CbDNDLEVBQUksQ0FBQ3ZMLEVBQUs0USxJQUFTcGMsT0FBT3VCLFVBQVU0cUMsZUFBZWhwQyxLQUFLcUksRUFBSzRRLEdDQ2pGNnhDLEVBQW9Cdm9ELEVBQUt1cEMsSUFDSCxvQkFBWDN4QyxRQUEwQkEsT0FBTzhMLGFBQzFDcEosT0FBT290QixlQUFlNmhCLEVBQVMzeEMsT0FBTzhMLFlBQWEsQ0FBRWhPLE1BQU8sV0FFN0Q0RSxPQUFPb3RCLGVBQWU2aEIsRUFBUyxhQUFjLENBQUU3ekMsT0FBTyxLLE1DTHZELGFBQ0EsWUFDQSxZLG9EQUlBLElBQUF3NEIsV0FBVTA2QixXQUFLM21DLElBQUk2eUIsV0FBUXh5QixNQUFNLFUiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVNUFRZX09CSiwgaXNBcnJheSwgaXNNYXAsIGlzSW50ZWdlcktleSwgaXNTeW1ib2wsIGV4dGVuZCwgaGFzT3duLCBpc09iamVjdCwgaGFzQ2hhbmdlZCwgY2FwaXRhbGl6ZSwgdG9SYXdUeXBlLCBkZWYsIGlzRnVuY3Rpb24sIE5PT1AgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHRhcmdldE1hcCA9IG5ldyBXZWFrTWFwKCk7XHJcbmNvbnN0IGVmZmVjdFN0YWNrID0gW107XHJcbmxldCBhY3RpdmVFZmZlY3Q7XHJcbmNvbnN0IElURVJBVEVfS0VZID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdpdGVyYXRlJyA6ICcnKTtcclxuY29uc3QgTUFQX0tFWV9JVEVSQVRFX0tFWSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnTWFwIGtleSBpdGVyYXRlJyA6ICcnKTtcclxuZnVuY3Rpb24gaXNFZmZlY3QoZm4pIHtcclxuICAgIHJldHVybiBmbiAmJiBmbi5faXNFZmZlY3QgPT09IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gZWZmZWN0KGZuLCBvcHRpb25zID0gRU1QVFlfT0JKKSB7XHJcbiAgICBpZiAoaXNFZmZlY3QoZm4pKSB7XHJcbiAgICAgICAgZm4gPSBmbi5yYXc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBlZmZlY3QgPSBjcmVhdGVSZWFjdGl2ZUVmZmVjdChmbiwgb3B0aW9ucyk7XHJcbiAgICBpZiAoIW9wdGlvbnMubGF6eSkge1xyXG4gICAgICAgIGVmZmVjdCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVmZmVjdDtcclxufVxyXG5mdW5jdGlvbiBzdG9wKGVmZmVjdCkge1xyXG4gICAgaWYgKGVmZmVjdC5hY3RpdmUpIHtcclxuICAgICAgICBjbGVhbnVwKGVmZmVjdCk7XHJcbiAgICAgICAgaWYgKGVmZmVjdC5vcHRpb25zLm9uU3RvcCkge1xyXG4gICAgICAgICAgICBlZmZlY3Qub3B0aW9ucy5vblN0b3AoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWZmZWN0LmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbmxldCB1aWQgPSAwO1xyXG5mdW5jdGlvbiBjcmVhdGVSZWFjdGl2ZUVmZmVjdChmbiwgb3B0aW9ucykge1xyXG4gICAgY29uc3QgZWZmZWN0ID0gZnVuY3Rpb24gcmVhY3RpdmVFZmZlY3QoKSB7XHJcbiAgICAgICAgaWYgKCFlZmZlY3QuYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnNjaGVkdWxlciA/IHVuZGVmaW5lZCA6IGZuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZWZmZWN0U3RhY2suaW5jbHVkZXMoZWZmZWN0KSkge1xyXG4gICAgICAgICAgICBjbGVhbnVwKGVmZmVjdCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVUcmFja2luZygpO1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0U3RhY2sucHVzaChlZmZlY3QpO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRWZmZWN0ID0gZWZmZWN0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3RTdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUVmZmVjdCA9IGVmZmVjdFN0YWNrW2VmZmVjdFN0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGVmZmVjdC5pZCA9IHVpZCsrO1xyXG4gICAgZWZmZWN0LmFsbG93UmVjdXJzZSA9ICEhb3B0aW9ucy5hbGxvd1JlY3Vyc2U7XHJcbiAgICBlZmZlY3QuX2lzRWZmZWN0ID0gdHJ1ZTtcclxuICAgIGVmZmVjdC5hY3RpdmUgPSB0cnVlO1xyXG4gICAgZWZmZWN0LnJhdyA9IGZuO1xyXG4gICAgZWZmZWN0LmRlcHMgPSBbXTtcclxuICAgIGVmZmVjdC5vcHRpb25zID0gb3B0aW9ucztcclxuICAgIHJldHVybiBlZmZlY3Q7XHJcbn1cclxuZnVuY3Rpb24gY2xlYW51cChlZmZlY3QpIHtcclxuICAgIGNvbnN0IHsgZGVwcyB9ID0gZWZmZWN0O1xyXG4gICAgaWYgKGRlcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRlcHNbaV0uZGVsZXRlKGVmZmVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlcHMubGVuZ3RoID0gMDtcclxuICAgIH1cclxufVxyXG5sZXQgc2hvdWxkVHJhY2sgPSB0cnVlO1xyXG5jb25zdCB0cmFja1N0YWNrID0gW107XHJcbmZ1bmN0aW9uIHBhdXNlVHJhY2tpbmcoKSB7XHJcbiAgICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xyXG4gICAgc2hvdWxkVHJhY2sgPSBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBlbmFibGVUcmFja2luZygpIHtcclxuICAgIHRyYWNrU3RhY2sucHVzaChzaG91bGRUcmFjayk7XHJcbiAgICBzaG91bGRUcmFjayA9IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gcmVzZXRUcmFja2luZygpIHtcclxuICAgIGNvbnN0IGxhc3QgPSB0cmFja1N0YWNrLnBvcCgpO1xyXG4gICAgc2hvdWxkVHJhY2sgPSBsYXN0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogbGFzdDtcclxufVxyXG5mdW5jdGlvbiB0cmFjayh0YXJnZXQsIHR5cGUsIGtleSkge1xyXG4gICAgaWYgKCFzaG91bGRUcmFjayB8fCBhY3RpdmVFZmZlY3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBkZXBzTWFwID0gdGFyZ2V0TWFwLmdldCh0YXJnZXQpO1xyXG4gICAgaWYgKCFkZXBzTWFwKSB7XHJcbiAgICAgICAgdGFyZ2V0TWFwLnNldCh0YXJnZXQsIChkZXBzTWFwID0gbmV3IE1hcCgpKSk7XHJcbiAgICB9XHJcbiAgICBsZXQgZGVwID0gZGVwc01hcC5nZXQoa2V5KTtcclxuICAgIGlmICghZGVwKSB7XHJcbiAgICAgICAgZGVwc01hcC5zZXQoa2V5LCAoZGVwID0gbmV3IFNldCgpKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWRlcC5oYXMoYWN0aXZlRWZmZWN0KSkge1xyXG4gICAgICAgIGRlcC5hZGQoYWN0aXZlRWZmZWN0KTtcclxuICAgICAgICBhY3RpdmVFZmZlY3QuZGVwcy5wdXNoKGRlcCk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBhY3RpdmVFZmZlY3Qub3B0aW9ucy5vblRyYWNrKSB7XHJcbiAgICAgICAgICAgIGFjdGl2ZUVmZmVjdC5vcHRpb25zLm9uVHJhY2soe1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0OiBhY3RpdmVFZmZlY3QsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAga2V5XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0cmlnZ2VyKHRhcmdldCwgdHlwZSwga2V5LCBuZXdWYWx1ZSwgb2xkVmFsdWUsIG9sZFRhcmdldCkge1xyXG4gICAgY29uc3QgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcclxuICAgIGlmICghZGVwc01hcCkge1xyXG4gICAgICAgIC8vIG5ldmVyIGJlZW4gdHJhY2tlZFxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGVmZmVjdHMgPSBuZXcgU2V0KCk7XHJcbiAgICBjb25zdCBhZGQgPSAoZWZmZWN0c1RvQWRkKSA9PiB7XHJcbiAgICAgICAgaWYgKGVmZmVjdHNUb0FkZCkge1xyXG4gICAgICAgICAgICBlZmZlY3RzVG9BZGQuZm9yRWFjaChlZmZlY3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVmZmVjdCAhPT0gYWN0aXZlRWZmZWN0IHx8IGVmZmVjdC5hbGxvd1JlY3Vyc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RzLmFkZChlZmZlY3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaWYgKHR5cGUgPT09IFwiY2xlYXJcIiAvKiBDTEVBUiAqLykge1xyXG4gICAgICAgIC8vIGNvbGxlY3Rpb24gYmVpbmcgY2xlYXJlZFxyXG4gICAgICAgIC8vIHRyaWdnZXIgYWxsIGVmZmVjdHMgZm9yIHRhcmdldFxyXG4gICAgICAgIGRlcHNNYXAuZm9yRWFjaChhZGQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoa2V5ID09PSAnbGVuZ3RoJyAmJiBpc0FycmF5KHRhcmdldCkpIHtcclxuICAgICAgICBkZXBzTWFwLmZvckVhY2goKGRlcCwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdsZW5ndGgnIHx8IGtleSA+PSBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgYWRkKGRlcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIHNjaGVkdWxlIHJ1bnMgZm9yIFNFVCB8IEFERCB8IERFTEVURVxyXG4gICAgICAgIGlmIChrZXkgIT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICBhZGQoZGVwc01hcC5nZXQoa2V5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFsc28gcnVuIGZvciBpdGVyYXRpb24ga2V5IG9uIEFERCB8IERFTEVURSB8IE1hcC5TRVRcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcImFkZFwiIC8qIEFERCAqLzpcclxuICAgICAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0ludGVnZXJLZXkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldyBpbmRleCBhZGRlZCB0byBhcnJheSAtPiBsZW5ndGggY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldCgnbGVuZ3RoJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkZWxldGVcIiAvKiBERUxFVEUgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldChNQVBfS0VZX0lURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJzZXRcIiAvKiBTRVQgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgcnVuID0gKGVmZmVjdCkgPT4ge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZWZmZWN0Lm9wdGlvbnMub25UcmlnZ2VyKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdC5vcHRpb25zLm9uVHJpZ2dlcih7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICBrZXksXHJcbiAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAgbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSxcclxuICAgICAgICAgICAgICAgIG9sZFRhcmdldFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVmZmVjdC5vcHRpb25zLnNjaGVkdWxlcikge1xyXG4gICAgICAgICAgICBlZmZlY3Qub3B0aW9ucy5zY2hlZHVsZXIoZWZmZWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVmZmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBlZmZlY3RzLmZvckVhY2gocnVuKTtcclxufVxuXG5jb25zdCBidWlsdEluU3ltYm9scyA9IG5ldyBTZXQoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoU3ltYm9sKVxyXG4gICAgLm1hcChrZXkgPT4gU3ltYm9sW2tleV0pXHJcbiAgICAuZmlsdGVyKGlzU3ltYm9sKSk7XHJcbmNvbnN0IGdldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKCk7XHJcbmNvbnN0IHNoYWxsb3dHZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcihmYWxzZSwgdHJ1ZSk7XHJcbmNvbnN0IHJlYWRvbmx5R2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIodHJ1ZSk7XHJcbmNvbnN0IHNoYWxsb3dSZWFkb25seUdldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKHRydWUsIHRydWUpO1xyXG5jb25zdCBhcnJheUluc3RydW1lbnRhdGlvbnMgPSB7fTtcclxuWydpbmNsdWRlcycsICdpbmRleE9mJywgJ2xhc3RJbmRleE9mJ10uZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgY29uc3QgbWV0aG9kID0gQXJyYXkucHJvdG90eXBlW2tleV07XHJcbiAgICBhcnJheUluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgY29uc3QgYXJyID0gdG9SYXcodGhpcyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICB0cmFjayhhcnIsIFwiZ2V0XCIgLyogR0VUICovLCBpICsgJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3ZSBydW4gdGhlIG1ldGhvZCB1c2luZyB0aGUgb3JpZ2luYWwgYXJncyBmaXJzdCAod2hpY2ggbWF5IGJlIHJlYWN0aXZlKVxyXG4gICAgICAgIGNvbnN0IHJlcyA9IG1ldGhvZC5hcHBseShhcnIsIGFyZ3MpO1xyXG4gICAgICAgIGlmIChyZXMgPT09IC0xIHx8IHJlcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgLy8gaWYgdGhhdCBkaWRuJ3Qgd29yaywgcnVuIGl0IGFnYWluIHVzaW5nIHJhdyB2YWx1ZXMuXHJcbiAgICAgICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkoYXJyLCBhcmdzLm1hcCh0b1JhdykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KTtcclxuWydwdXNoJywgJ3BvcCcsICdzaGlmdCcsICd1bnNoaWZ0JywgJ3NwbGljZSddLmZvckVhY2goa2V5ID0+IHtcclxuICAgIGNvbnN0IG1ldGhvZCA9IEFycmF5LnByb3RvdHlwZVtrZXldO1xyXG4gICAgYXJyYXlJbnN0cnVtZW50YXRpb25zW2tleV0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcclxuICAgICAgICBjb25zdCByZXMgPSBtZXRob2QuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgcmVzZXRUcmFja2luZygpO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG59KTtcclxuZnVuY3Rpb24gY3JlYXRlR2V0dGVyKGlzUmVhZG9ubHkgPSBmYWxzZSwgc2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikge1xyXG4gICAgICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gIWlzUmVhZG9ubHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiIC8qIFJBVyAqLyAmJlxyXG4gICAgICAgICAgICByZWNlaXZlciA9PT0gKGlzUmVhZG9ubHkgPyByZWFkb25seU1hcCA6IHJlYWN0aXZlTWFwKS5nZXQodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0YXJnZXRJc0FycmF5ID0gaXNBcnJheSh0YXJnZXQpO1xyXG4gICAgICAgIGlmICh0YXJnZXRJc0FycmF5ICYmIGhhc093bihhcnJheUluc3RydW1lbnRhdGlvbnMsIGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KGFycmF5SW5zdHJ1bWVudGF0aW9ucywga2V5LCByZWNlaXZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlcyA9IFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcik7XHJcbiAgICAgICAgaWYgKGlzU3ltYm9sKGtleSlcclxuICAgICAgICAgICAgPyBidWlsdEluU3ltYm9scy5oYXMoa2V5KVxyXG4gICAgICAgICAgICA6IGtleSA9PT0gYF9fcHJvdG9fX2AgfHwga2V5ID09PSBgX192X2lzUmVmYCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzUmVhZG9ubHkpIHtcclxuICAgICAgICAgICAgdHJhY2sodGFyZ2V0LCBcImdldFwiIC8qIEdFVCAqLywga2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYWxsb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzUmVmKHJlcykpIHtcclxuICAgICAgICAgICAgLy8gcmVmIHVud3JhcHBpbmcgLSBkb2VzIG5vdCBhcHBseSBmb3IgQXJyYXkgKyBpbnRlZ2VyIGtleS5cclxuICAgICAgICAgICAgY29uc3Qgc2hvdWxkVW53cmFwID0gIXRhcmdldElzQXJyYXkgfHwgIWlzSW50ZWdlcktleShrZXkpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2hvdWxkVW53cmFwID8gcmVzLnZhbHVlIDogcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNPYmplY3QocmVzKSkge1xyXG4gICAgICAgICAgICAvLyBDb252ZXJ0IHJldHVybmVkIHZhbHVlIGludG8gYSBwcm94eSBhcyB3ZWxsLiB3ZSBkbyB0aGUgaXNPYmplY3QgY2hlY2tcclxuICAgICAgICAgICAgLy8gaGVyZSB0byBhdm9pZCBpbnZhbGlkIHZhbHVlIHdhcm5pbmcuIEFsc28gbmVlZCB0byBsYXp5IGFjY2VzcyByZWFkb25seVxyXG4gICAgICAgICAgICAvLyBhbmQgcmVhY3RpdmUgaGVyZSB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5LlxyXG4gICAgICAgICAgICByZXR1cm4gaXNSZWFkb25seSA/IHJlYWRvbmx5KHJlcykgOiByZWFjdGl2ZShyZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBzZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZVNldHRlcigpO1xyXG5jb25zdCBzaGFsbG93U2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVTZXR0ZXIodHJ1ZSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZVNldHRlcihzaGFsbG93ID0gZmFsc2UpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBzZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikge1xyXG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XHJcbiAgICAgICAgaWYgKCFzaGFsbG93KSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSAmJiBpc1JlZihvbGRWYWx1ZSkgJiYgIWlzUmVmKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgb2xkVmFsdWUudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGhhZEtleSA9IGlzQXJyYXkodGFyZ2V0KSAmJiBpc0ludGVnZXJLZXkoa2V5KVxyXG4gICAgICAgICAgICA/IE51bWJlcihrZXkpIDwgdGFyZ2V0Lmxlbmd0aFxyXG4gICAgICAgICAgICA6IGhhc093bih0YXJnZXQsIGtleSk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5zZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcik7XHJcbiAgICAgICAgLy8gZG9uJ3QgdHJpZ2dlciBpZiB0YXJnZXQgaXMgc29tZXRoaW5nIHVwIGluIHRoZSBwcm90b3R5cGUgY2hhaW4gb2Ygb3JpZ2luYWxcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSB0b1JhdyhyZWNlaXZlcikpIHtcclxuICAgICAgICAgICAgaWYgKCFoYWRLZXkpIHtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiIC8qIEFERCAqLywga2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJzZXRcIiAvKiBTRVQgKi8sIGtleSwgdmFsdWUsIG9sZFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSkge1xyXG4gICAgY29uc3QgaGFkS2V5ID0gaGFzT3duKHRhcmdldCwga2V5KTtcclxuICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XHJcbiAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KTtcclxuICAgIGlmIChyZXN1bHQgJiYgaGFkS2V5KSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiZGVsZXRlXCIgLyogREVMRVRFICovLCBrZXksIHVuZGVmaW5lZCwgb2xkVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBoYXModGFyZ2V0LCBrZXkpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuaGFzKHRhcmdldCwga2V5KTtcclxuICAgIGlmICghaXNTeW1ib2woa2V5KSB8fCAhYnVpbHRJblN5bWJvbHMuaGFzKGtleSkpIHtcclxuICAgICAgICB0cmFjayh0YXJnZXQsIFwiaGFzXCIgLyogSEFTICovLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBvd25LZXlzKHRhcmdldCkge1xyXG4gICAgdHJhY2sodGFyZ2V0LCBcIml0ZXJhdGVcIiAvKiBJVEVSQVRFICovLCBpc0FycmF5KHRhcmdldCkgPyAnbGVuZ3RoJyA6IElURVJBVEVfS0VZKTtcclxuICAgIHJldHVybiBSZWZsZWN0Lm93bktleXModGFyZ2V0KTtcclxufVxyXG5jb25zdCBtdXRhYmxlSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQsXHJcbiAgICBzZXQsXHJcbiAgICBkZWxldGVQcm9wZXJ0eSxcclxuICAgIGhhcyxcclxuICAgIG93bktleXNcclxufTtcclxuY29uc3QgcmVhZG9ubHlIYW5kbGVycyA9IHtcclxuICAgIGdldDogcmVhZG9ubHlHZXQsXHJcbiAgICBzZXQodGFyZ2V0LCBrZXkpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgU2V0IG9wZXJhdGlvbiBvbiBrZXkgXCIke1N0cmluZyhrZXkpfVwiIGZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYERlbGV0ZSBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufTtcclxuY29uc3Qgc2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMgPSBleHRlbmQoe30sIG11dGFibGVIYW5kbGVycywge1xyXG4gICAgZ2V0OiBzaGFsbG93R2V0LFxyXG4gICAgc2V0OiBzaGFsbG93U2V0XHJcbn0pO1xyXG4vLyBQcm9wcyBoYW5kbGVycyBhcmUgc3BlY2lhbCBpbiB0aGUgc2Vuc2UgdGhhdCBpdCBzaG91bGQgbm90IHVud3JhcCB0b3AtbGV2ZWxcclxuLy8gcmVmcyAoaW4gb3JkZXIgdG8gYWxsb3cgcmVmcyB0byBiZSBleHBsaWNpdGx5IHBhc3NlZCBkb3duKSwgYnV0IHNob3VsZFxyXG4vLyByZXRhaW4gdGhlIHJlYWN0aXZpdHkgb2YgdGhlIG5vcm1hbCByZWFkb25seSBvYmplY3QuXHJcbmNvbnN0IHNoYWxsb3dSZWFkb25seUhhbmRsZXJzID0gZXh0ZW5kKHt9LCByZWFkb25seUhhbmRsZXJzLCB7XHJcbiAgICBnZXQ6IHNoYWxsb3dSZWFkb25seUdldFxyXG59KTtcblxuY29uc3QgdG9SZWFjdGl2ZSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhY3RpdmUodmFsdWUpIDogdmFsdWU7XHJcbmNvbnN0IHRvUmVhZG9ubHkgPSAodmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSA/IHJlYWRvbmx5KHZhbHVlKSA6IHZhbHVlO1xyXG5jb25zdCB0b1NoYWxsb3cgPSAodmFsdWUpID0+IHZhbHVlO1xyXG5jb25zdCBnZXRQcm90byA9ICh2KSA9PiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHYpO1xyXG5mdW5jdGlvbiBnZXQkMSh0YXJnZXQsIGtleSwgaXNSZWFkb25seSA9IGZhbHNlLCBpc1NoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgLy8gIzE3NzI6IHJlYWRvbmx5KHJlYWN0aXZlKE1hcCkpIHNob3VsZCByZXR1cm4gcmVhZG9ubHkgKyByZWFjdGl2ZSB2ZXJzaW9uXHJcbiAgICAvLyBvZiB0aGUgdmFsdWVcclxuICAgIHRhcmdldCA9IHRhcmdldFtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dO1xyXG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcclxuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XHJcbiAgICBpZiAoa2V5ICE9PSByYXdLZXkpIHtcclxuICAgICAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIgLyogR0VUICovLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcImdldFwiIC8qIEdFVCAqLywgcmF3S2V5KTtcclxuICAgIGNvbnN0IHsgaGFzIH0gPSBnZXRQcm90byhyYXdUYXJnZXQpO1xyXG4gICAgY29uc3Qgd3JhcCA9IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogaXNTaGFsbG93ID8gdG9TaGFsbG93IDogdG9SZWFjdGl2ZTtcclxuICAgIGlmIChoYXMuY2FsbChyYXdUYXJnZXQsIGtleSkpIHtcclxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KGtleSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaGFzLmNhbGwocmF3VGFyZ2V0LCByYXdLZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0LmdldChyYXdLZXkpKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBoYXMkMShrZXksIGlzUmVhZG9ubHkgPSBmYWxzZSkge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIiAvKiBSQVcgKi9dO1xyXG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcclxuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XHJcbiAgICBpZiAoa2V5ICE9PSByYXdLZXkpIHtcclxuICAgICAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaGFzXCIgLyogSEFTICovLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiIC8qIEhBUyAqLywgcmF3S2V5KTtcclxuICAgIHJldHVybiBrZXkgPT09IHJhd0tleVxyXG4gICAgICAgID8gdGFyZ2V0LmhhcyhrZXkpXHJcbiAgICAgICAgOiB0YXJnZXQuaGFzKGtleSkgfHwgdGFyZ2V0LmhhcyhyYXdLZXkpO1xyXG59XHJcbmZ1bmN0aW9uIHNpemUodGFyZ2V0LCBpc1JlYWRvbmx5ID0gZmFsc2UpIHtcclxuICAgIHRhcmdldCA9IHRhcmdldFtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dO1xyXG4gICAgIWlzUmVhZG9ubHkgJiYgdHJhY2sodG9SYXcodGFyZ2V0KSwgXCJpdGVyYXRlXCIgLyogSVRFUkFURSAqLywgSVRFUkFURV9LRVkpO1xyXG4gICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgJ3NpemUnLCB0YXJnZXQpO1xyXG59XHJcbmZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xyXG4gICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IHByb3RvID0gZ2V0UHJvdG8odGFyZ2V0KTtcclxuICAgIGNvbnN0IGhhZEtleSA9IHByb3RvLmhhcy5jYWxsKHRhcmdldCwgdmFsdWUpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmFkZCh2YWx1ZSk7XHJcbiAgICBpZiAoIWhhZEtleSkge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiIC8qIEFERCAqLywgdmFsdWUsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gc2V0JDEoa2V5LCB2YWx1ZSkge1xyXG4gICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IHsgaGFzLCBnZXQgfSA9IGdldFByb3RvKHRhcmdldCk7XHJcbiAgICBsZXQgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKCFoYWRLZXkpIHtcclxuICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xyXG4gICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQuY2FsbCh0YXJnZXQsIGtleSk7XHJcbiAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgaWYgKCFoYWRLZXkpIHtcclxuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJhZGRcIiAvKiBBREQgKi8sIGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpKSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwic2V0XCIgLyogU0VUICovLCBrZXksIHZhbHVlLCBvbGRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGRlbGV0ZUVudHJ5KGtleSkge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XHJcbiAgICBjb25zdCB7IGhhcywgZ2V0IH0gPSBnZXRQcm90byh0YXJnZXQpO1xyXG4gICAgbGV0IGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcclxuICAgIGlmICghaGFkS2V5KSB7XHJcbiAgICAgICAga2V5ID0gdG9SYXcoa2V5KTtcclxuICAgICAgICBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhcywga2V5KTtcclxuICAgIH1cclxuICAgIGNvbnN0IG9sZFZhbHVlID0gZ2V0ID8gZ2V0LmNhbGwodGFyZ2V0LCBrZXkpIDogdW5kZWZpbmVkO1xyXG4gICAgLy8gZm9yd2FyZCB0aGUgb3BlcmF0aW9uIGJlZm9yZSBxdWV1ZWluZyByZWFjdGlvbnNcclxuICAgIGNvbnN0IHJlc3VsdCA9IHRhcmdldC5kZWxldGUoa2V5KTtcclxuICAgIGlmIChoYWRLZXkpIHtcclxuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiAvKiBERUxFVEUgKi8sIGtleSwgdW5kZWZpbmVkLCBvbGRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGNsZWFyKCkge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XHJcbiAgICBjb25zdCBoYWRJdGVtcyA9IHRhcmdldC5zaXplICE9PSAwO1xyXG4gICAgY29uc3Qgb2xkVGFyZ2V0ID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgPyBpc01hcCh0YXJnZXQpXHJcbiAgICAgICAgICAgID8gbmV3IE1hcCh0YXJnZXQpXHJcbiAgICAgICAgICAgIDogbmV3IFNldCh0YXJnZXQpXHJcbiAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgICAvLyBmb3J3YXJkIHRoZSBvcGVyYXRpb24gYmVmb3JlIHF1ZXVlaW5nIHJlYWN0aW9uc1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmNsZWFyKCk7XHJcbiAgICBpZiAoaGFkSXRlbXMpIHtcclxuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJjbGVhclwiIC8qIENMRUFSICovLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb2xkVGFyZ2V0KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlRm9yRWFjaChpc1JlYWRvbmx5LCBpc1NoYWxsb3cpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrLCB0aGlzQXJnKSB7XHJcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZWQgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IG9ic2VydmVkW1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICAgICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcclxuICAgICAgICBjb25zdCB3cmFwID0gaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiB0b1JlYWN0aXZlO1xyXG4gICAgICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIgLyogSVRFUkFURSAqLywgSVRFUkFURV9LRVkpO1xyXG4gICAgICAgIHJldHVybiB0YXJnZXQuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICAvLyBpbXBvcnRhbnQ6IG1ha2Ugc3VyZSB0aGUgY2FsbGJhY2sgaXNcclxuICAgICAgICAgICAgLy8gMS4gaW52b2tlZCB3aXRoIHRoZSByZWFjdGl2ZSBtYXAgYXMgYHRoaXNgIGFuZCAzcmQgYXJnXHJcbiAgICAgICAgICAgIC8vIDIuIHRoZSB2YWx1ZSByZWNlaXZlZCBzaG91bGQgYmUgYSBjb3JyZXNwb25kaW5nIHJlYWN0aXZlL3JlYWRvbmx5LlxyXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB3cmFwKHZhbHVlKSwgd3JhcChrZXkpLCBvYnNlcnZlZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgaXNSZWFkb25seSwgaXNTaGFsbG93KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICAgICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcclxuICAgICAgICBjb25zdCB0YXJnZXRJc01hcCA9IGlzTWFwKHJhd1RhcmdldCk7XHJcbiAgICAgICAgY29uc3QgaXNQYWlyID0gbWV0aG9kID09PSAnZW50cmllcycgfHwgKG1ldGhvZCA9PT0gU3ltYm9sLml0ZXJhdG9yICYmIHRhcmdldElzTWFwKTtcclxuICAgICAgICBjb25zdCBpc0tleU9ubHkgPSBtZXRob2QgPT09ICdrZXlzJyAmJiB0YXJnZXRJc01hcDtcclxuICAgICAgICBjb25zdCBpbm5lckl0ZXJhdG9yID0gdGFyZ2V0W21ldGhvZF0oLi4uYXJncyk7XHJcbiAgICAgICAgY29uc3Qgd3JhcCA9IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogaXNTaGFsbG93ID8gdG9TaGFsbG93IDogdG9SZWFjdGl2ZTtcclxuICAgICAgICAhaXNSZWFkb25seSAmJlxyXG4gICAgICAgICAgICB0cmFjayhyYXdUYXJnZXQsIFwiaXRlcmF0ZVwiIC8qIElURVJBVEUgKi8sIGlzS2V5T25seSA/IE1BUF9LRVlfSVRFUkFURV9LRVkgOiBJVEVSQVRFX0tFWSk7XHJcbiAgICAgICAgLy8gcmV0dXJuIGEgd3JhcHBlZCBpdGVyYXRvciB3aGljaCByZXR1cm5zIG9ic2VydmVkIHZlcnNpb25zIG9mIHRoZVxyXG4gICAgICAgIC8vIHZhbHVlcyBlbWl0dGVkIGZyb20gdGhlIHJlYWwgaXRlcmF0b3JcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAvLyBpdGVyYXRvciBwcm90b2NvbFxyXG4gICAgICAgICAgICBuZXh0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gaW5uZXJJdGVyYXRvci5uZXh0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZVxyXG4gICAgICAgICAgICAgICAgICAgID8geyB2YWx1ZSwgZG9uZSB9XHJcbiAgICAgICAgICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpc1BhaXIgPyBbd3JhcCh2YWx1ZVswXSksIHdyYXAodmFsdWVbMV0pXSA6IHdyYXAodmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gaXRlcmFibGUgcHJvdG9jb2xcclxuICAgICAgICAgICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlYWRvbmx5TWV0aG9kKHR5cGUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgY29uc3Qga2V5ID0gYXJnc1swXSA/IGBvbiBrZXkgXCIke2FyZ3NbMF19XCIgYCA6IGBgO1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7Y2FwaXRhbGl6ZSh0eXBlKX0gb3BlcmF0aW9uICR7a2V5fWZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRvUmF3KHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHR5cGUgPT09IFwiZGVsZXRlXCIgLyogREVMRVRFICovID8gZmFsc2UgOiB0aGlzO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyA9IHtcclxuICAgIGdldChrZXkpIHtcclxuICAgICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5KTtcclxuICAgIH0sXHJcbiAgICBnZXQgc2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gc2l6ZSh0aGlzKTtcclxuICAgIH0sXHJcbiAgICBoYXM6IGhhcyQxLFxyXG4gICAgYWRkLFxyXG4gICAgc2V0OiBzZXQkMSxcclxuICAgIGRlbGV0ZTogZGVsZXRlRW50cnksXHJcbiAgICBjbGVhcixcclxuICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIGZhbHNlKVxyXG59O1xyXG5jb25zdCBzaGFsbG93SW5zdHJ1bWVudGF0aW9ucyA9IHtcclxuICAgIGdldChrZXkpIHtcclxuICAgICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5LCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0IHNpemUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNpemUodGhpcyk7XHJcbiAgICB9LFxyXG4gICAgaGFzOiBoYXMkMSxcclxuICAgIGFkZCxcclxuICAgIHNldDogc2V0JDEsXHJcbiAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxyXG4gICAgY2xlYXIsXHJcbiAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKGZhbHNlLCB0cnVlKVxyXG59O1xyXG5jb25zdCByZWFkb25seUluc3RydW1lbnRhdGlvbnMgPSB7XHJcbiAgICBnZXQoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSwgdHJ1ZSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0IHNpemUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNpemUodGhpcywgdHJ1ZSk7XHJcbiAgICB9LFxyXG4gICAgaGFzKGtleSkge1xyXG4gICAgICAgIHJldHVybiBoYXMkMS5jYWxsKHRoaXMsIGtleSwgdHJ1ZSk7XHJcbiAgICB9LFxyXG4gICAgYWRkOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImFkZFwiIC8qIEFERCAqLyksXHJcbiAgICBzZXQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwic2V0XCIgLyogU0VUICovKSxcclxuICAgIGRlbGV0ZTogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJkZWxldGVcIiAvKiBERUxFVEUgKi8pLFxyXG4gICAgY2xlYXI6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiY2xlYXJcIiAvKiBDTEVBUiAqLyksXHJcbiAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKHRydWUsIGZhbHNlKVxyXG59O1xyXG5jb25zdCBpdGVyYXRvck1ldGhvZHMgPSBbJ2tleXMnLCAndmFsdWVzJywgJ2VudHJpZXMnLCBTeW1ib2wuaXRlcmF0b3JdO1xyXG5pdGVyYXRvck1ldGhvZHMuZm9yRWFjaChtZXRob2QgPT4ge1xyXG4gICAgbXV0YWJsZUluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgZmFsc2UsIGZhbHNlKTtcclxuICAgIHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCB0cnVlLCBmYWxzZSk7XHJcbiAgICBzaGFsbG93SW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBmYWxzZSwgdHJ1ZSk7XHJcbn0pO1xyXG5mdW5jdGlvbiBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoaXNSZWFkb25seSwgc2hhbGxvdykge1xyXG4gICAgY29uc3QgaW5zdHJ1bWVudGF0aW9ucyA9IHNoYWxsb3dcclxuICAgICAgICA/IHNoYWxsb3dJbnN0cnVtZW50YXRpb25zXHJcbiAgICAgICAgOiBpc1JlYWRvbmx5XHJcbiAgICAgICAgICAgID8gcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zXHJcbiAgICAgICAgICAgIDogbXV0YWJsZUluc3RydW1lbnRhdGlvbnM7XHJcbiAgICByZXR1cm4gKHRhcmdldCwga2V5LCByZWNlaXZlcikgPT4ge1xyXG4gICAgICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gIWlzUmVhZG9ubHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiIC8qIFJBVyAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQoaGFzT3duKGluc3RydW1lbnRhdGlvbnMsIGtleSkgJiYga2V5IGluIHRhcmdldFxyXG4gICAgICAgICAgICA/IGluc3RydW1lbnRhdGlvbnNcclxuICAgICAgICAgICAgOiB0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoZmFsc2UsIGZhbHNlKVxyXG59O1xyXG5jb25zdCBzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoZmFsc2UsIHRydWUpXHJcbn07XHJcbmNvbnN0IHJlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIodHJ1ZSwgZmFsc2UpXHJcbn07XHJcbmZ1bmN0aW9uIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpIHtcclxuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XHJcbiAgICBpZiAocmF3S2V5ICE9PSBrZXkgJiYgaGFzLmNhbGwodGFyZ2V0LCByYXdLZXkpKSB7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9IHRvUmF3VHlwZSh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgUmVhY3RpdmUgJHt0eXBlfSBjb250YWlucyBib3RoIHRoZSByYXcgYW5kIHJlYWN0aXZlIGAgK1xyXG4gICAgICAgICAgICBgdmVyc2lvbnMgb2YgdGhlIHNhbWUgb2JqZWN0JHt0eXBlID09PSBgTWFwYCA/IGAgYXMga2V5c2AgOiBgYH0sIGAgK1xyXG4gICAgICAgICAgICBgd2hpY2ggY2FuIGxlYWQgdG8gaW5jb25zaXN0ZW5jaWVzLiBgICtcclxuICAgICAgICAgICAgYEF2b2lkIGRpZmZlcmVudGlhdGluZyBiZXR3ZWVuIHRoZSByYXcgYW5kIHJlYWN0aXZlIHZlcnNpb25zIGAgK1xyXG4gICAgICAgICAgICBgb2YgYW4gb2JqZWN0IGFuZCBvbmx5IHVzZSB0aGUgcmVhY3RpdmUgdmVyc2lvbiBpZiBwb3NzaWJsZS5gKTtcclxuICAgIH1cclxufVxuXG5jb25zdCByZWFjdGl2ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XHJcbmNvbnN0IHJlYWRvbmx5TWFwID0gbmV3IFdlYWtNYXAoKTtcclxuZnVuY3Rpb24gdGFyZ2V0VHlwZU1hcChyYXdUeXBlKSB7XHJcbiAgICBzd2l0Y2ggKHJhd1R5cGUpIHtcclxuICAgICAgICBjYXNlICdPYmplY3QnOlxyXG4gICAgICAgIGNhc2UgJ0FycmF5JzpcclxuICAgICAgICAgICAgcmV0dXJuIDEgLyogQ09NTU9OICovO1xyXG4gICAgICAgIGNhc2UgJ01hcCc6XHJcbiAgICAgICAgY2FzZSAnU2V0JzpcclxuICAgICAgICBjYXNlICdXZWFrTWFwJzpcclxuICAgICAgICBjYXNlICdXZWFrU2V0JzpcclxuICAgICAgICAgICAgcmV0dXJuIDIgLyogQ09MTEVDVElPTiAqLztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gMCAvKiBJTlZBTElEICovO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldFRhcmdldFR5cGUodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZVtcIl9fdl9za2lwXCIgLyogU0tJUCAqL10gfHwgIU9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpXHJcbiAgICAgICAgPyAwIC8qIElOVkFMSUQgKi9cclxuICAgICAgICA6IHRhcmdldFR5cGVNYXAodG9SYXdUeXBlKHZhbHVlKSk7XHJcbn1cclxuZnVuY3Rpb24gcmVhY3RpdmUodGFyZ2V0KSB7XHJcbiAgICAvLyBpZiB0cnlpbmcgdG8gb2JzZXJ2ZSBhIHJlYWRvbmx5IHByb3h5LCByZXR1cm4gdGhlIHJlYWRvbmx5IHZlcnNpb24uXHJcbiAgICBpZiAodGFyZ2V0ICYmIHRhcmdldFtcIl9fdl9pc1JlYWRvbmx5XCIgLyogSVNfUkVBRE9OTFkgKi9dKSB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgIH1cclxuICAgIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIGZhbHNlLCBtdXRhYmxlSGFuZGxlcnMsIG11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMpO1xyXG59XHJcbi8vIFJldHVybiBhIHJlYWN0aXZlLWNvcHkgb2YgdGhlIG9yaWdpbmFsIG9iamVjdCwgd2hlcmUgb25seSB0aGUgcm9vdCBsZXZlbFxyXG4vLyBwcm9wZXJ0aWVzIGFyZSByZWFjdGl2ZSwgYW5kIGRvZXMgTk9UIHVud3JhcCByZWZzIG5vciByZWN1cnNpdmVseSBjb252ZXJ0XHJcbi8vIHJldHVybmVkIHByb3BlcnRpZXMuXHJcbmZ1bmN0aW9uIHNoYWxsb3dSZWFjdGl2ZSh0YXJnZXQpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIGZhbHNlLCBzaGFsbG93UmVhY3RpdmVIYW5kbGVycywgc2hhbGxvd0NvbGxlY3Rpb25IYW5kbGVycyk7XHJcbn1cclxuZnVuY3Rpb24gcmVhZG9ubHkodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCB0cnVlLCByZWFkb25seUhhbmRsZXJzLCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyk7XHJcbn1cclxuLy8gUmV0dXJuIGEgcmVhY3RpdmUtY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290IGxldmVsXHJcbi8vIHByb3BlcnRpZXMgYXJlIHJlYWRvbmx5LCBhbmQgZG9lcyBOT1QgdW53cmFwIHJlZnMgbm9yIHJlY3Vyc2l2ZWx5IGNvbnZlcnRcclxuLy8gcmV0dXJuZWQgcHJvcGVydGllcy5cclxuLy8gVGhpcyBpcyB1c2VkIGZvciBjcmVhdGluZyB0aGUgcHJvcHMgcHJveHkgb2JqZWN0IGZvciBzdGF0ZWZ1bCBjb21wb25lbnRzLlxyXG5mdW5jdGlvbiBzaGFsbG93UmVhZG9ubHkodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCB0cnVlLCBzaGFsbG93UmVhZG9ubHlIYW5kbGVycywgcmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMpO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgaXNSZWFkb25seSwgYmFzZUhhbmRsZXJzLCBjb2xsZWN0aW9uSGFuZGxlcnMpIHtcclxuICAgIGlmICghaXNPYmplY3QodGFyZ2V0KSkge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGB2YWx1ZSBjYW5ub3QgYmUgbWFkZSByZWFjdGl2ZTogJHtTdHJpbmcodGFyZ2V0KX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgIH1cclxuICAgIC8vIHRhcmdldCBpcyBhbHJlYWR5IGEgUHJveHksIHJldHVybiBpdC5cclxuICAgIC8vIGV4Y2VwdGlvbjogY2FsbGluZyByZWFkb25seSgpIG9uIGEgcmVhY3RpdmUgb2JqZWN0XHJcbiAgICBpZiAodGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJBVyAqL10gJiZcclxuICAgICAgICAhKGlzUmVhZG9ubHkgJiYgdGFyZ2V0W1wiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqL10pKSB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgIH1cclxuICAgIC8vIHRhcmdldCBhbHJlYWR5IGhhcyBjb3JyZXNwb25kaW5nIFByb3h5XHJcbiAgICBjb25zdCBwcm94eU1hcCA9IGlzUmVhZG9ubHkgPyByZWFkb25seU1hcCA6IHJlYWN0aXZlTWFwO1xyXG4gICAgY29uc3QgZXhpc3RpbmdQcm94eSA9IHByb3h5TWFwLmdldCh0YXJnZXQpO1xyXG4gICAgaWYgKGV4aXN0aW5nUHJveHkpIHtcclxuICAgICAgICByZXR1cm4gZXhpc3RpbmdQcm94eTtcclxuICAgIH1cclxuICAgIC8vIG9ubHkgYSB3aGl0ZWxpc3Qgb2YgdmFsdWUgdHlwZXMgY2FuIGJlIG9ic2VydmVkLlxyXG4gICAgY29uc3QgdGFyZ2V0VHlwZSA9IGdldFRhcmdldFR5cGUodGFyZ2V0KTtcclxuICAgIGlmICh0YXJnZXRUeXBlID09PSAwIC8qIElOVkFMSUQgKi8pIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkodGFyZ2V0LCB0YXJnZXRUeXBlID09PSAyIC8qIENPTExFQ1RJT04gKi8gPyBjb2xsZWN0aW9uSGFuZGxlcnMgOiBiYXNlSGFuZGxlcnMpO1xyXG4gICAgcHJveHlNYXAuc2V0KHRhcmdldCwgcHJveHkpO1xyXG4gICAgcmV0dXJuIHByb3h5O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVhY3RpdmUodmFsdWUpIHtcclxuICAgIGlmIChpc1JlYWRvbmx5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiBpc1JlYWN0aXZlKHZhbHVlW1wiX192X3Jhd1wiIC8qIFJBVyAqL10pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlW1wiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqL10pO1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVhZG9ubHkodmFsdWUpIHtcclxuICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1JlYWRvbmx5XCIgLyogSVNfUkVBRE9OTFkgKi9dKTtcclxufVxyXG5mdW5jdGlvbiBpc1Byb3h5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZSkgfHwgaXNSZWFkb25seSh2YWx1ZSk7XHJcbn1cclxuZnVuY3Rpb24gdG9SYXcob2JzZXJ2ZWQpIHtcclxuICAgIHJldHVybiAoKG9ic2VydmVkICYmIHRvUmF3KG9ic2VydmVkW1wiX192X3Jhd1wiIC8qIFJBVyAqL10pKSB8fCBvYnNlcnZlZCk7XHJcbn1cclxuZnVuY3Rpb24gbWFya1Jhdyh2YWx1ZSkge1xyXG4gICAgZGVmKHZhbHVlLCBcIl9fdl9za2lwXCIgLyogU0tJUCAqLywgdHJ1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cblxuY29uc3QgY29udmVydCA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgPyByZWFjdGl2ZSh2YWwpIDogdmFsO1xyXG5mdW5jdGlvbiBpc1JlZihyKSB7XHJcbiAgICByZXR1cm4gQm9vbGVhbihyICYmIHIuX192X2lzUmVmID09PSB0cnVlKTtcclxufVxyXG5mdW5jdGlvbiByZWYodmFsdWUpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWYodmFsdWUpO1xyXG59XHJcbmZ1bmN0aW9uIHNoYWxsb3dSZWYodmFsdWUpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWYodmFsdWUsIHRydWUpO1xyXG59XHJcbmNsYXNzIFJlZkltcGwge1xyXG4gICAgY29uc3RydWN0b3IoX3Jhd1ZhbHVlLCBfc2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5fcmF3VmFsdWUgPSBfcmF3VmFsdWU7XHJcbiAgICAgICAgdGhpcy5fc2hhbGxvdyA9IF9zaGFsbG93O1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IF9zaGFsbG93ID8gX3Jhd1ZhbHVlIDogY29udmVydChfcmF3VmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgIHRyYWNrKHRvUmF3KHRoaXMpLCBcImdldFwiIC8qIEdFVCAqLywgJ3ZhbHVlJyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xyXG4gICAgICAgIGlmIChoYXNDaGFuZ2VkKHRvUmF3KG5ld1ZhbCksIHRoaXMuX3Jhd1ZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9yYXdWYWx1ZSA9IG5ld1ZhbDtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9zaGFsbG93ID8gbmV3VmFsIDogY29udmVydChuZXdWYWwpO1xyXG4gICAgICAgICAgICB0cmlnZ2VyKHRvUmF3KHRoaXMpLCBcInNldFwiIC8qIFNFVCAqLywgJ3ZhbHVlJywgbmV3VmFsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUmVmKHJhd1ZhbHVlLCBzaGFsbG93ID0gZmFsc2UpIHtcclxuICAgIGlmIChpc1JlZihyYXdWYWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gcmF3VmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IFJlZkltcGwocmF3VmFsdWUsIHNoYWxsb3cpO1xyXG59XHJcbmZ1bmN0aW9uIHRyaWdnZXJSZWYocmVmKSB7XHJcbiAgICB0cmlnZ2VyKHRvUmF3KHJlZiksIFwic2V0XCIgLyogU0VUICovLCAndmFsdWUnLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyByZWYudmFsdWUgOiB2b2lkIDApO1xyXG59XHJcbmZ1bmN0aW9uIHVucmVmKHJlZikge1xyXG4gICAgcmV0dXJuIGlzUmVmKHJlZikgPyByZWYudmFsdWUgOiByZWY7XHJcbn1cclxuY29uc3Qgc2hhbGxvd1Vud3JhcEhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiAodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSA9PiB1bnJlZihSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpKSxcclxuICAgIHNldDogKHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpID0+IHtcclxuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xyXG4gICAgICAgIGlmIChpc1JlZihvbGRWYWx1ZSkgJiYgIWlzUmVmKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHByb3h5UmVmcyhvYmplY3RXaXRoUmVmcykge1xyXG4gICAgcmV0dXJuIGlzUmVhY3RpdmUob2JqZWN0V2l0aFJlZnMpXHJcbiAgICAgICAgPyBvYmplY3RXaXRoUmVmc1xyXG4gICAgICAgIDogbmV3IFByb3h5KG9iamVjdFdpdGhSZWZzLCBzaGFsbG93VW53cmFwSGFuZGxlcnMpO1xyXG59XHJcbmNsYXNzIEN1c3RvbVJlZkltcGwge1xyXG4gICAgY29uc3RydWN0b3IoZmFjdG9yeSkge1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCB7IGdldCwgc2V0IH0gPSBmYWN0b3J5KCgpID0+IHRyYWNrKHRoaXMsIFwiZ2V0XCIgLyogR0VUICovLCAndmFsdWUnKSwgKCkgPT4gdHJpZ2dlcih0aGlzLCBcInNldFwiIC8qIFNFVCAqLywgJ3ZhbHVlJykpO1xyXG4gICAgICAgIHRoaXMuX2dldCA9IGdldDtcclxuICAgICAgICB0aGlzLl9zZXQgPSBzZXQ7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldCgpO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xyXG4gICAgICAgIHRoaXMuX3NldChuZXdWYWwpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGN1c3RvbVJlZihmYWN0b3J5KSB7XHJcbiAgICByZXR1cm4gbmV3IEN1c3RvbVJlZkltcGwoZmFjdG9yeSk7XHJcbn1cclxuZnVuY3Rpb24gdG9SZWZzKG9iamVjdCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNQcm94eShvYmplY3QpKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGB0b1JlZnMoKSBleHBlY3RzIGEgcmVhY3RpdmUgb2JqZWN0IGJ1dCByZWNlaXZlZCBhIHBsYWluIG9uZS5gKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJldCA9IGlzQXJyYXkob2JqZWN0KSA/IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKSA6IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XHJcbiAgICAgICAgcmV0W2tleV0gPSB0b1JlZihvYmplY3QsIGtleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcbmNsYXNzIE9iamVjdFJlZkltcGwge1xyXG4gICAgY29uc3RydWN0b3IoX29iamVjdCwgX2tleSkge1xyXG4gICAgICAgIHRoaXMuX29iamVjdCA9IF9vYmplY3Q7XHJcbiAgICAgICAgdGhpcy5fa2V5ID0gX2tleTtcclxuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29iamVjdFt0aGlzLl9rZXldO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xyXG4gICAgICAgIHRoaXMuX29iamVjdFt0aGlzLl9rZXldID0gbmV3VmFsO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHRvUmVmKG9iamVjdCwga2V5KSB7XHJcbiAgICByZXR1cm4gaXNSZWYob2JqZWN0W2tleV0pXHJcbiAgICAgICAgPyBvYmplY3Rba2V5XVxyXG4gICAgICAgIDogbmV3IE9iamVjdFJlZkltcGwob2JqZWN0LCBrZXkpO1xyXG59XG5cbmNsYXNzIENvbXB1dGVkUmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihnZXR0ZXIsIF9zZXR0ZXIsIGlzUmVhZG9ubHkpIHtcclxuICAgICAgICB0aGlzLl9zZXR0ZXIgPSBfc2V0dGVyO1xyXG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5lZmZlY3QgPSBlZmZlY3QoZ2V0dGVyLCB7XHJcbiAgICAgICAgICAgIGxhenk6IHRydWUsXHJcbiAgICAgICAgICAgIHNjaGVkdWxlcjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRvUmF3KHRoaXMpLCBcInNldFwiIC8qIFNFVCAqLywgJ3ZhbHVlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIiAvKiBJU19SRUFET05MWSAqL10gPSBpc1JlYWRvbmx5O1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kaXJ0eSkge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMuZWZmZWN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyYWNrKHRvUmF3KHRoaXMpLCBcImdldFwiIC8qIEdFVCAqLywgJ3ZhbHVlJyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0dGVyKG5ld1ZhbHVlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjb21wdXRlZChnZXR0ZXJPck9wdGlvbnMpIHtcclxuICAgIGxldCBnZXR0ZXI7XHJcbiAgICBsZXQgc2V0dGVyO1xyXG4gICAgaWYgKGlzRnVuY3Rpb24oZ2V0dGVyT3JPcHRpb25zKSkge1xyXG4gICAgICAgIGdldHRlciA9IGdldHRlck9yT3B0aW9ucztcclxuICAgICAgICBzZXR0ZXIgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICAgICAgPyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1dyaXRlIG9wZXJhdGlvbiBmYWlsZWQ6IGNvbXB1dGVkIHZhbHVlIGlzIHJlYWRvbmx5Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgOiBOT09QO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zLmdldDtcclxuICAgICAgICBzZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnMuc2V0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBDb21wdXRlZFJlZkltcGwoZ2V0dGVyLCBzZXR0ZXIsIGlzRnVuY3Rpb24oZ2V0dGVyT3JPcHRpb25zKSB8fCAhZ2V0dGVyT3JPcHRpb25zLnNldCk7XHJcbn1cblxuZXhwb3J0IHsgSVRFUkFURV9LRVksIGNvbXB1dGVkLCBjdXN0b21SZWYsIGVmZmVjdCwgZW5hYmxlVHJhY2tpbmcsIGlzUHJveHksIGlzUmVhY3RpdmUsIGlzUmVhZG9ubHksIGlzUmVmLCBtYXJrUmF3LCBwYXVzZVRyYWNraW5nLCBwcm94eVJlZnMsIHJlYWN0aXZlLCByZWFkb25seSwgcmVmLCByZXNldFRyYWNraW5nLCBzaGFsbG93UmVhY3RpdmUsIHNoYWxsb3dSZWFkb25seSwgc2hhbGxvd1JlZiwgc3RvcCwgdG9SYXcsIHRvUmVmLCB0b1JlZnMsIHRyYWNrLCB0cmlnZ2VyLCB0cmlnZ2VyUmVmLCB1bnJlZiB9O1xuIiwiaW1wb3J0IHsgcGF1c2VUcmFja2luZywgcmVzZXRUcmFja2luZywgaXNSZWYsIHRvUmF3LCBzaGFsbG93UmVhY3RpdmUsIHRyaWdnZXIsIGlzUmVhY3RpdmUsIGVmZmVjdCwgc3RvcCwgaXNQcm94eSwgcmVhY3RpdmUsIHNoYWxsb3dSZWFkb25seSwgdHJhY2ssIHByb3h5UmVmcywgY29tcHV0ZWQgYXMgY29tcHV0ZWQkMSwgcmVmLCBpc1JlYWRvbmx5IH0gZnJvbSAnQHZ1ZS9yZWFjdGl2aXR5JztcbmV4cG9ydCB7IGN1c3RvbVJlZiwgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIG1hcmtSYXcsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdHJpZ2dlclJlZiwgdW5yZWYgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzRnVuY3Rpb24sIGlzUHJvbWlzZSwgaXNBcnJheSwgZXh0ZW5kLCBFTVBUWV9PQkosIHRvSGFuZGxlcktleSwgdG9OdW1iZXIsIGh5cGhlbmF0ZSwgY2FtZWxpemUsIGlzT24sIGhhc093biwgaXNNb2RlbExpc3RlbmVyLCBkZWYsIGlzUmVzZXJ2ZWRQcm9wLCBFTVBUWV9BUlIsIGlzT2JqZWN0LCBjYXBpdGFsaXplLCB0b1Jhd1R5cGUsIG1ha2VNYXAsIHJlbW92ZSwgTk9PUCwgaGFzQ2hhbmdlZCwgaXNTZXQsIGlzTWFwLCBpbnZva2VBcnJheUZucywgTk8sIGdldEdsb2JhbFRoaXMsIG5vcm1hbGl6ZUNsYXNzLCBub3JtYWxpemVTdHlsZSwgaXNHbG9iYWxseVdoaXRlbGlzdGVkIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuZXhwb3J0IHsgY2FtZWxpemUsIGNhcGl0YWxpemUsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5IH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCBzdGFjayA9IFtdO1xyXG5mdW5jdGlvbiBwdXNoV2FybmluZ0NvbnRleHQodm5vZGUpIHtcclxuICAgIHN0YWNrLnB1c2godm5vZGUpO1xyXG59XHJcbmZ1bmN0aW9uIHBvcFdhcm5pbmdDb250ZXh0KCkge1xyXG4gICAgc3RhY2sucG9wKCk7XHJcbn1cclxuZnVuY3Rpb24gd2Fybihtc2csIC4uLmFyZ3MpIHtcclxuICAgIC8vIGF2b2lkIHByb3BzIGZvcm1hdHRpbmcgb3Igd2FybiBoYW5kbGVyIHRyYWNraW5nIGRlcHMgdGhhdCBtaWdodCBiZSBtdXRhdGVkXHJcbiAgICAvLyBkdXJpbmcgcGF0Y2gsIGxlYWRpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxyXG4gICAgcGF1c2VUcmFja2luZygpO1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBzdGFjay5sZW5ndGggPyBzdGFja1tzdGFjay5sZW5ndGggLSAxXS5jb21wb25lbnQgOiBudWxsO1xyXG4gICAgY29uc3QgYXBwV2FybkhhbmRsZXIgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy53YXJuSGFuZGxlcjtcclxuICAgIGNvbnN0IHRyYWNlID0gZ2V0Q29tcG9uZW50VHJhY2UoKTtcclxuICAgIGlmIChhcHBXYXJuSGFuZGxlcikge1xyXG4gICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhhcHBXYXJuSGFuZGxlciwgaW5zdGFuY2UsIDExIC8qIEFQUF9XQVJOX0hBTkRMRVIgKi8sIFtcclxuICAgICAgICAgICAgbXNnICsgYXJncy5qb2luKCcnKSxcclxuICAgICAgICAgICAgaW5zdGFuY2UgJiYgaW5zdGFuY2UucHJveHksXHJcbiAgICAgICAgICAgIHRyYWNlXHJcbiAgICAgICAgICAgICAgICAubWFwKCh7IHZub2RlIH0pID0+IGBhdCA8JHtmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCB2bm9kZS50eXBlKX0+YClcclxuICAgICAgICAgICAgICAgIC5qb2luKCdcXG4nKSxcclxuICAgICAgICAgICAgdHJhY2VcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHdhcm5BcmdzID0gW2BbVnVlIHdhcm5dOiAke21zZ31gLCAuLi5hcmdzXTtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAodHJhY2UubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIC8vIGF2b2lkIHNwYW1taW5nIGNvbnNvbGUgZHVyaW5nIHRlc3RzXHJcbiAgICAgICAgICAgICFmYWxzZSkge1xyXG4gICAgICAgICAgICB3YXJuQXJncy5wdXNoKGBcXG5gLCAuLi5mb3JtYXRUcmFjZSh0cmFjZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLndhcm4oLi4ud2FybkFyZ3MpO1xyXG4gICAgfVxyXG4gICAgcmVzZXRUcmFja2luZygpO1xyXG59XHJcbmZ1bmN0aW9uIGdldENvbXBvbmVudFRyYWNlKCkge1xyXG4gICAgbGV0IGN1cnJlbnRWTm9kZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgaWYgKCFjdXJyZW50Vk5vZGUpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICAvLyB3ZSBjYW4ndCBqdXN0IHVzZSB0aGUgc3RhY2sgYmVjYXVzZSBpdCB3aWxsIGJlIGluY29tcGxldGUgZHVyaW5nIHVwZGF0ZXNcclxuICAgIC8vIHRoYXQgZGlkIG5vdCBzdGFydCBmcm9tIHRoZSByb290LiBSZS1jb25zdHJ1Y3QgdGhlIHBhcmVudCBjaGFpbiB1c2luZ1xyXG4gICAgLy8gaW5zdGFuY2UgcGFyZW50IHBvaW50ZXJzLlxyXG4gICAgY29uc3Qgbm9ybWFsaXplZFN0YWNrID0gW107XHJcbiAgICB3aGlsZSAoY3VycmVudFZOb2RlKSB7XHJcbiAgICAgICAgY29uc3QgbGFzdCA9IG5vcm1hbGl6ZWRTdGFja1swXTtcclxuICAgICAgICBpZiAobGFzdCAmJiBsYXN0LnZub2RlID09PSBjdXJyZW50Vk5vZGUpIHtcclxuICAgICAgICAgICAgbGFzdC5yZWN1cnNlQ291bnQrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRTdGFjay5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHZub2RlOiBjdXJyZW50Vk5vZGUsXHJcbiAgICAgICAgICAgICAgICByZWN1cnNlQ291bnQ6IDBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhcmVudEluc3RhbmNlID0gY3VycmVudFZOb2RlLmNvbXBvbmVudCAmJiBjdXJyZW50Vk5vZGUuY29tcG9uZW50LnBhcmVudDtcclxuICAgICAgICBjdXJyZW50Vk5vZGUgPSBwYXJlbnRJbnN0YW5jZSAmJiBwYXJlbnRJbnN0YW5jZS52bm9kZTtcclxuICAgIH1cclxuICAgIHJldHVybiBub3JtYWxpemVkU3RhY2s7XHJcbn1cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gZm9ybWF0VHJhY2UodHJhY2UpIHtcclxuICAgIGNvbnN0IGxvZ3MgPSBbXTtcclxuICAgIHRyYWNlLmZvckVhY2goKGVudHJ5LCBpKSA9PiB7XHJcbiAgICAgICAgbG9ncy5wdXNoKC4uLihpID09PSAwID8gW10gOiBbYFxcbmBdKSwgLi4uZm9ybWF0VHJhY2VFbnRyeShlbnRyeSkpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbG9ncztcclxufVxyXG5mdW5jdGlvbiBmb3JtYXRUcmFjZUVudHJ5KHsgdm5vZGUsIHJlY3Vyc2VDb3VudCB9KSB7XHJcbiAgICBjb25zdCBwb3N0Zml4ID0gcmVjdXJzZUNvdW50ID4gMCA/IGAuLi4gKCR7cmVjdXJzZUNvdW50fSByZWN1cnNpdmUgY2FsbHMpYCA6IGBgO1xyXG4gICAgY29uc3QgaXNSb290ID0gdm5vZGUuY29tcG9uZW50ID8gdm5vZGUuY29tcG9uZW50LnBhcmVudCA9PSBudWxsIDogZmFsc2U7XHJcbiAgICBjb25zdCBvcGVuID0gYCBhdCA8JHtmb3JtYXRDb21wb25lbnROYW1lKHZub2RlLmNvbXBvbmVudCwgdm5vZGUudHlwZSwgaXNSb290KX1gO1xyXG4gICAgY29uc3QgY2xvc2UgPSBgPmAgKyBwb3N0Zml4O1xyXG4gICAgcmV0dXJuIHZub2RlLnByb3BzXHJcbiAgICAgICAgPyBbb3BlbiwgLi4uZm9ybWF0UHJvcHModm5vZGUucHJvcHMpLCBjbG9zZV1cclxuICAgICAgICA6IFtvcGVuICsgY2xvc2VdO1xyXG59XHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIGZvcm1hdFByb3BzKHByb3BzKSB7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9wcyk7XHJcbiAgICBrZXlzLnNsaWNlKDAsIDMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICByZXMucHVzaCguLi5mb3JtYXRQcm9wKGtleSwgcHJvcHNba2V5XSkpO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoa2V5cy5sZW5ndGggPiAzKSB7XHJcbiAgICAgICAgcmVzLnB1c2goYCAuLi5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gZm9ybWF0UHJvcChrZXksIHZhbHVlLCByYXcpIHtcclxuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT0ke3ZhbHVlfWBdO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxyXG4gICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8XHJcbiAgICAgICAgdmFsdWUgPT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1JlZih2YWx1ZSkpIHtcclxuICAgICAgICB2YWx1ZSA9IGZvcm1hdFByb3Aoa2V5LCB0b1Jhdyh2YWx1ZS52YWx1ZSksIHRydWUpO1xyXG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PVJlZjxgLCB2YWx1ZSwgYD5gXTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIFtgJHtrZXl9PWZuJHt2YWx1ZS5uYW1lID8gYDwke3ZhbHVlLm5hbWV9PmAgOiBgYH1gXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PWAsIHZhbHVlXTtcclxuICAgIH1cclxufVxuXG5jb25zdCBFcnJvclR5cGVTdHJpbmdzID0ge1xyXG4gICAgW1wiYmNcIiAvKiBCRUZPUkVfQ1JFQVRFICovXTogJ2JlZm9yZUNyZWF0ZSBob29rJyxcclxuICAgIFtcImNcIiAvKiBDUkVBVEVEICovXTogJ2NyZWF0ZWQgaG9vaycsXHJcbiAgICBbXCJibVwiIC8qIEJFRk9SRV9NT1VOVCAqL106ICdiZWZvcmVNb3VudCBob29rJyxcclxuICAgIFtcIm1cIiAvKiBNT1VOVEVEICovXTogJ21vdW50ZWQgaG9vaycsXHJcbiAgICBbXCJidVwiIC8qIEJFRk9SRV9VUERBVEUgKi9dOiAnYmVmb3JlVXBkYXRlIGhvb2snLFxyXG4gICAgW1widVwiIC8qIFVQREFURUQgKi9dOiAndXBkYXRlZCcsXHJcbiAgICBbXCJidW1cIiAvKiBCRUZPUkVfVU5NT1VOVCAqL106ICdiZWZvcmVVbm1vdW50IGhvb2snLFxyXG4gICAgW1widW1cIiAvKiBVTk1PVU5URUQgKi9dOiAndW5tb3VudGVkIGhvb2snLFxyXG4gICAgW1wiYVwiIC8qIEFDVElWQVRFRCAqL106ICdhY3RpdmF0ZWQgaG9vaycsXHJcbiAgICBbXCJkYVwiIC8qIERFQUNUSVZBVEVEICovXTogJ2RlYWN0aXZhdGVkIGhvb2snLFxyXG4gICAgW1wiZWNcIiAvKiBFUlJPUl9DQVBUVVJFRCAqL106ICdlcnJvckNhcHR1cmVkIGhvb2snLFxyXG4gICAgW1wicnRjXCIgLyogUkVOREVSX1RSQUNLRUQgKi9dOiAncmVuZGVyVHJhY2tlZCBob29rJyxcclxuICAgIFtcInJ0Z1wiIC8qIFJFTkRFUl9UUklHR0VSRUQgKi9dOiAncmVuZGVyVHJpZ2dlcmVkIGhvb2snLFxyXG4gICAgWzAgLyogU0VUVVBfRlVOQ1RJT04gKi9dOiAnc2V0dXAgZnVuY3Rpb24nLFxyXG4gICAgWzEgLyogUkVOREVSX0ZVTkNUSU9OICovXTogJ3JlbmRlciBmdW5jdGlvbicsXHJcbiAgICBbMiAvKiBXQVRDSF9HRVRURVIgKi9dOiAnd2F0Y2hlciBnZXR0ZXInLFxyXG4gICAgWzMgLyogV0FUQ0hfQ0FMTEJBQ0sgKi9dOiAnd2F0Y2hlciBjYWxsYmFjaycsXHJcbiAgICBbNCAvKiBXQVRDSF9DTEVBTlVQICovXTogJ3dhdGNoZXIgY2xlYW51cCBmdW5jdGlvbicsXHJcbiAgICBbNSAvKiBOQVRJVkVfRVZFTlRfSEFORExFUiAqL106ICduYXRpdmUgZXZlbnQgaGFuZGxlcicsXHJcbiAgICBbNiAvKiBDT01QT05FTlRfRVZFTlRfSEFORExFUiAqL106ICdjb21wb25lbnQgZXZlbnQgaGFuZGxlcicsXHJcbiAgICBbNyAvKiBWTk9ERV9IT09LICovXTogJ3Zub2RlIGhvb2snLFxyXG4gICAgWzggLyogRElSRUNUSVZFX0hPT0sgKi9dOiAnZGlyZWN0aXZlIGhvb2snLFxyXG4gICAgWzkgLyogVFJBTlNJVElPTl9IT09LICovXTogJ3RyYW5zaXRpb24gaG9vaycsXHJcbiAgICBbMTAgLyogQVBQX0VSUk9SX0hBTkRMRVIgKi9dOiAnYXBwIGVycm9ySGFuZGxlcicsXHJcbiAgICBbMTEgLyogQVBQX1dBUk5fSEFORExFUiAqL106ICdhcHAgd2FybkhhbmRsZXInLFxyXG4gICAgWzEyIC8qIEZVTkNUSU9OX1JFRiAqL106ICdyZWYgZnVuY3Rpb24nLFxyXG4gICAgWzEzIC8qIEFTWU5DX0NPTVBPTkVOVF9MT0FERVIgKi9dOiAnYXN5bmMgY29tcG9uZW50IGxvYWRlcicsXHJcbiAgICBbMTQgLyogU0NIRURVTEVSICovXTogJ3NjaGVkdWxlciBmbHVzaC4gVGhpcyBpcyBsaWtlbHkgYSBWdWUgaW50ZXJuYWxzIGJ1Zy4gJyArXHJcbiAgICAgICAgJ1BsZWFzZSBvcGVuIGFuIGlzc3VlIGF0IGh0dHBzOi8vbmV3LWlzc3VlLnZ1ZWpzLm9yZy8/cmVwbz12dWVqcy92dWUtbmV4dCdcclxufTtcclxuZnVuY3Rpb24gY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncykge1xyXG4gICAgbGV0IHJlcztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmVzID0gYXJncyA/IGZuKC4uLmFyZ3MpIDogZm4oKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihmbikpIHtcclxuICAgICAgICBjb25zdCByZXMgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKTtcclxuICAgICAgICBpZiAocmVzICYmIGlzUHJvbWlzZShyZXMpKSB7XHJcbiAgICAgICAgICAgIHJlcy5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdmFsdWVzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFsdWVzLnB1c2goY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm5baV0sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWVzO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIHR5cGUsIHRocm93SW5EZXYgPSB0cnVlKSB7XHJcbiAgICBjb25zdCBjb250ZXh0Vk5vZGUgPSBpbnN0YW5jZSA/IGluc3RhbmNlLnZub2RlIDogbnVsbDtcclxuICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGxldCBjdXIgPSBpbnN0YW5jZS5wYXJlbnQ7XHJcbiAgICAgICAgLy8gdGhlIGV4cG9zZWQgaW5zdGFuY2UgaXMgdGhlIHJlbmRlciBwcm94eSB0byBrZWVwIGl0IGNvbnNpc3RlbnQgd2l0aCAyLnhcclxuICAgICAgICBjb25zdCBleHBvc2VkSW5zdGFuY2UgPSBpbnN0YW5jZS5wcm94eTtcclxuICAgICAgICAvLyBpbiBwcm9kdWN0aW9uIHRoZSBob29rIHJlY2VpdmVzIG9ubHkgdGhlIGVycm9yIGNvZGVcclxuICAgICAgICBjb25zdCBlcnJvckluZm8gPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBFcnJvclR5cGVTdHJpbmdzW3R5cGVdIDogdHlwZTtcclxuICAgICAgICB3aGlsZSAoY3VyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yQ2FwdHVyZWRIb29rcyA9IGN1ci5lYztcclxuICAgICAgICAgICAgaWYgKGVycm9yQ2FwdHVyZWRIb29rcykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcnJvckNhcHR1cmVkSG9va3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYXB0dXJlZEhvb2tzW2ldKGVyciwgZXhwb3NlZEluc3RhbmNlLCBlcnJvckluZm8pID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1ciA9IGN1ci5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFwcC1sZXZlbCBoYW5kbGluZ1xyXG4gICAgICAgIGNvbnN0IGFwcEVycm9ySGFuZGxlciA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmVycm9ySGFuZGxlcjtcclxuICAgICAgICBpZiAoYXBwRXJyb3JIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhhcHBFcnJvckhhbmRsZXIsIG51bGwsIDEwIC8qIEFQUF9FUlJPUl9IQU5ETEVSICovLCBbZXJyLCBleHBvc2VkSW5zdGFuY2UsIGVycm9ySW5mb10pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYpO1xyXG59XHJcbmZ1bmN0aW9uIGxvZ0Vycm9yKGVyciwgdHlwZSwgY29udGV4dFZOb2RlLCB0aHJvd0luRGV2ID0gdHJ1ZSkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IGluZm8gPSBFcnJvclR5cGVTdHJpbmdzW3R5cGVdO1xyXG4gICAgICAgIGlmIChjb250ZXh0Vk5vZGUpIHtcclxuICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KGNvbnRleHRWTm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdhcm4oYFVuaGFuZGxlZCBlcnJvciR7aW5mbyA/IGAgZHVyaW5nIGV4ZWN1dGlvbiBvZiAke2luZm99YCA6IGBgfWApO1xyXG4gICAgICAgIGlmIChjb250ZXh0Vk5vZGUpIHtcclxuICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY3Jhc2ggaW4gZGV2IGJ5IGRlZmF1bHQgc28gaXQncyBtb3JlIG5vdGljZWFibGVcclxuICAgICAgICBpZiAodGhyb3dJbkRldikge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gcmVjb3ZlciBpbiBwcm9kIHRvIHJlZHVjZSB0aGUgaW1wYWN0IG9uIGVuZC11c2VyXHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgfVxyXG59XG5cbmxldCBpc0ZsdXNoaW5nID0gZmFsc2U7XHJcbmxldCBpc0ZsdXNoUGVuZGluZyA9IGZhbHNlO1xyXG5jb25zdCBxdWV1ZSA9IFtdO1xyXG5sZXQgZmx1c2hJbmRleCA9IDA7XHJcbmNvbnN0IHBlbmRpbmdQcmVGbHVzaENicyA9IFtdO1xyXG5sZXQgYWN0aXZlUHJlRmx1c2hDYnMgPSBudWxsO1xyXG5sZXQgcHJlRmx1c2hJbmRleCA9IDA7XHJcbmNvbnN0IHBlbmRpbmdQb3N0Rmx1c2hDYnMgPSBbXTtcclxubGV0IGFjdGl2ZVBvc3RGbHVzaENicyA9IG51bGw7XHJcbmxldCBwb3N0Rmx1c2hJbmRleCA9IDA7XHJcbmNvbnN0IHJlc29sdmVkUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG5sZXQgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XHJcbmxldCBjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IgPSBudWxsO1xyXG5jb25zdCBSRUNVUlNJT05fTElNSVQgPSAxMDA7XHJcbmZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XHJcbiAgICBjb25zdCBwID0gY3VycmVudEZsdXNoUHJvbWlzZSB8fCByZXNvbHZlZFByb21pc2U7XHJcbiAgICByZXR1cm4gZm4gPyBwLnRoZW4odGhpcyA/IGZuLmJpbmQodGhpcykgOiBmbikgOiBwO1xyXG59XHJcbmZ1bmN0aW9uIHF1ZXVlSm9iKGpvYikge1xyXG4gICAgLy8gdGhlIGRlZHVwZSBzZWFyY2ggdXNlcyB0aGUgc3RhcnRJbmRleCBhcmd1bWVudCBvZiBBcnJheS5pbmNsdWRlcygpXHJcbiAgICAvLyBieSBkZWZhdWx0IHRoZSBzZWFyY2ggaW5kZXggaW5jbHVkZXMgdGhlIGN1cnJlbnQgam9iIHRoYXQgaXMgYmVpbmcgcnVuXHJcbiAgICAvLyBzbyBpdCBjYW5ub3QgcmVjdXJzaXZlbHkgdHJpZ2dlciBpdHNlbGYgYWdhaW4uXHJcbiAgICAvLyBpZiB0aGUgam9iIGlzIGEgd2F0Y2goKSBjYWxsYmFjaywgdGhlIHNlYXJjaCB3aWxsIHN0YXJ0IHdpdGggYSArMSBpbmRleCB0b1xyXG4gICAgLy8gYWxsb3cgaXQgcmVjdXJzaXZlbHkgdHJpZ2dlciBpdHNlbGYgLSBpdCBpcyB0aGUgdXNlcidzIHJlc3BvbnNpYmlsaXR5IHRvXHJcbiAgICAvLyBlbnN1cmUgaXQgZG9lc24ndCBlbmQgdXAgaW4gYW4gaW5maW5pdGUgbG9vcC5cclxuICAgIGlmICgoIXF1ZXVlLmxlbmd0aCB8fFxyXG4gICAgICAgICFxdWV1ZS5pbmNsdWRlcyhqb2IsIGlzRmx1c2hpbmcgJiYgam9iLmFsbG93UmVjdXJzZSA/IGZsdXNoSW5kZXggKyAxIDogZmx1c2hJbmRleCkpICYmXHJcbiAgICAgICAgam9iICE9PSBjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IpIHtcclxuICAgICAgICBxdWV1ZS5wdXNoKGpvYik7XHJcbiAgICAgICAgcXVldWVGbHVzaCgpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHF1ZXVlRmx1c2goKSB7XHJcbiAgICBpZiAoIWlzRmx1c2hpbmcgJiYgIWlzRmx1c2hQZW5kaW5nKSB7XHJcbiAgICAgICAgaXNGbHVzaFBlbmRpbmcgPSB0cnVlO1xyXG4gICAgICAgIGN1cnJlbnRGbHVzaFByb21pc2UgPSByZXNvbHZlZFByb21pc2UudGhlbihmbHVzaEpvYnMpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGludmFsaWRhdGVKb2Ioam9iKSB7XHJcbiAgICBjb25zdCBpID0gcXVldWUuaW5kZXhPZihqb2IpO1xyXG4gICAgaWYgKGkgPiAtMSkge1xyXG4gICAgICAgIHF1ZXVlW2ldID0gbnVsbDtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBxdWV1ZUNiKGNiLCBhY3RpdmVRdWV1ZSwgcGVuZGluZ1F1ZXVlLCBpbmRleCkge1xyXG4gICAgaWYgKCFpc0FycmF5KGNiKSkge1xyXG4gICAgICAgIGlmICghYWN0aXZlUXVldWUgfHxcclxuICAgICAgICAgICAgIWFjdGl2ZVF1ZXVlLmluY2x1ZGVzKGNiLCBjYi5hbGxvd1JlY3Vyc2UgPyBpbmRleCArIDEgOiBpbmRleCkpIHtcclxuICAgICAgICAgICAgcGVuZGluZ1F1ZXVlLnB1c2goY2IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGlmIGNiIGlzIGFuIGFycmF5LCBpdCBpcyBhIGNvbXBvbmVudCBsaWZlY3ljbGUgaG9vayB3aGljaCBjYW4gb25seSBiZVxyXG4gICAgICAgIC8vIHRyaWdnZXJlZCBieSBhIGpvYiwgd2hpY2ggaXMgYWxyZWFkeSBkZWR1cGVkIGluIHRoZSBtYWluIHF1ZXVlLCBzb1xyXG4gICAgICAgIC8vIHdlIGNhbiBza2lwIGR1cGxpY2F0ZSBjaGVjayBoZXJlIHRvIGltcHJvdmUgcGVyZlxyXG4gICAgICAgIHBlbmRpbmdRdWV1ZS5wdXNoKC4uLmNiKTtcclxuICAgIH1cclxuICAgIHF1ZXVlRmx1c2goKTtcclxufVxyXG5mdW5jdGlvbiBxdWV1ZVByZUZsdXNoQ2IoY2IpIHtcclxuICAgIHF1ZXVlQ2IoY2IsIGFjdGl2ZVByZUZsdXNoQ2JzLCBwZW5kaW5nUHJlRmx1c2hDYnMsIHByZUZsdXNoSW5kZXgpO1xyXG59XHJcbmZ1bmN0aW9uIHF1ZXVlUG9zdEZsdXNoQ2IoY2IpIHtcclxuICAgIHF1ZXVlQ2IoY2IsIGFjdGl2ZVBvc3RGbHVzaENicywgcGVuZGluZ1Bvc3RGbHVzaENicywgcG9zdEZsdXNoSW5kZXgpO1xyXG59XHJcbmZ1bmN0aW9uIGZsdXNoUHJlRmx1c2hDYnMoc2VlbiwgcGFyZW50Sm9iID0gbnVsbCkge1xyXG4gICAgaWYgKHBlbmRpbmdQcmVGbHVzaENicy5sZW5ndGgpIHtcclxuICAgICAgICBjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IgPSBwYXJlbnRKb2I7XHJcbiAgICAgICAgYWN0aXZlUHJlRmx1c2hDYnMgPSBbLi4ubmV3IFNldChwZW5kaW5nUHJlRmx1c2hDYnMpXTtcclxuICAgICAgICBwZW5kaW5nUHJlRmx1c2hDYnMubGVuZ3RoID0gMDtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChwcmVGbHVzaEluZGV4ID0gMDsgcHJlRmx1c2hJbmRleCA8IGFjdGl2ZVByZUZsdXNoQ2JzLmxlbmd0aDsgcHJlRmx1c2hJbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBhY3RpdmVQcmVGbHVzaENic1twcmVGbHVzaEluZGV4XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWN0aXZlUHJlRmx1c2hDYnNbcHJlRmx1c2hJbmRleF0oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWN0aXZlUHJlRmx1c2hDYnMgPSBudWxsO1xyXG4gICAgICAgIHByZUZsdXNoSW5kZXggPSAwO1xyXG4gICAgICAgIGN1cnJlbnRQcmVGbHVzaFBhcmVudEpvYiA9IG51bGw7XHJcbiAgICAgICAgLy8gcmVjdXJzaXZlbHkgZmx1c2ggdW50aWwgaXQgZHJhaW5zXHJcbiAgICAgICAgZmx1c2hQcmVGbHVzaENicyhzZWVuLCBwYXJlbnRKb2IpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGZsdXNoUG9zdEZsdXNoQ2JzKHNlZW4pIHtcclxuICAgIGlmIChwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGRlZHVwZWQgPSBbLi4ubmV3IFNldChwZW5kaW5nUG9zdEZsdXNoQ2JzKV07XHJcbiAgICAgICAgcGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGggPSAwO1xyXG4gICAgICAgIC8vICMxOTQ3IGFscmVhZHkgaGFzIGFjdGl2ZSBxdWV1ZSwgbmVzdGVkIGZsdXNoUG9zdEZsdXNoQ2JzIGNhbGxcclxuICAgICAgICBpZiAoYWN0aXZlUG9zdEZsdXNoQ2JzKSB7XHJcbiAgICAgICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicy5wdXNoKC4uLmRlZHVwZWQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicyA9IGRlZHVwZWQ7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicy5zb3J0KChhLCBiKSA9PiBnZXRJZChhKSAtIGdldElkKGIpKTtcclxuICAgICAgICBmb3IgKHBvc3RGbHVzaEluZGV4ID0gMDsgcG9zdEZsdXNoSW5kZXggPCBhY3RpdmVQb3N0Rmx1c2hDYnMubGVuZ3RoOyBwb3N0Rmx1c2hJbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBhY3RpdmVQb3N0Rmx1c2hDYnNbcG9zdEZsdXNoSW5kZXhdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnNbcG9zdEZsdXNoSW5kZXhdKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicyA9IG51bGw7XHJcbiAgICAgICAgcG9zdEZsdXNoSW5kZXggPSAwO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGdldElkID0gKGpvYikgPT4gam9iLmlkID09IG51bGwgPyBJbmZpbml0eSA6IGpvYi5pZDtcclxuZnVuY3Rpb24gZmx1c2hKb2JzKHNlZW4pIHtcclxuICAgIGlzRmx1c2hQZW5kaW5nID0gZmFsc2U7XHJcbiAgICBpc0ZsdXNoaW5nID0gdHJ1ZTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBmbHVzaFByZUZsdXNoQ2JzKHNlZW4pO1xyXG4gICAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXHJcbiAgICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcclxuICAgIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcclxuICAgIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZCBzbyBpdHMgcmVuZGVyIGVmZmVjdCB3aWxsIGhhdmUgc21hbGxlclxyXG4gICAgLy8gICAgcHJpb3JpdHkgbnVtYmVyKVxyXG4gICAgLy8gMi4gSWYgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB1cGRhdGUsXHJcbiAgICAvLyAgICBpdHMgdXBkYXRlIGNhbiBiZSBza2lwcGVkLlxyXG4gICAgLy8gSm9icyBjYW4gbmV2ZXIgYmUgbnVsbCBiZWZvcmUgZmx1c2ggc3RhcnRzLCBzaW5jZSB0aGV5IGFyZSBvbmx5IGludmFsaWRhdGVkXHJcbiAgICAvLyBkdXJpbmcgZXhlY3V0aW9uIG9mIGFub3RoZXIgZmx1c2hlZCBqb2IuXHJcbiAgICBxdWV1ZS5zb3J0KChhLCBiKSA9PiBnZXRJZChhKSAtIGdldElkKGIpKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZm9yIChmbHVzaEluZGV4ID0gMDsgZmx1c2hJbmRleCA8IHF1ZXVlLmxlbmd0aDsgZmx1c2hJbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGpvYiA9IHF1ZXVlW2ZsdXNoSW5kZXhdO1xyXG4gICAgICAgICAgICBpZiAoam9iKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGpvYik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoam9iLCBudWxsLCAxNCAvKiBTQ0hFRFVMRVIgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgZmx1c2hJbmRleCA9IDA7XHJcbiAgICAgICAgcXVldWUubGVuZ3RoID0gMDtcclxuICAgICAgICBmbHVzaFBvc3RGbHVzaENicyhzZWVuKTtcclxuICAgICAgICBpc0ZsdXNoaW5nID0gZmFsc2U7XHJcbiAgICAgICAgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XHJcbiAgICAgICAgLy8gc29tZSBwb3N0Rmx1c2hDYiBxdWV1ZWQgam9icyFcclxuICAgICAgICAvLyBrZWVwIGZsdXNoaW5nIHVudGlsIGl0IGRyYWlucy5cclxuICAgICAgICBpZiAocXVldWUubGVuZ3RoIHx8IHBlbmRpbmdQb3N0Rmx1c2hDYnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGZsdXNoSm9icyhzZWVuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGZuKSB7XHJcbiAgICBpZiAoIXNlZW4uaGFzKGZuKSkge1xyXG4gICAgICAgIHNlZW4uc2V0KGZuLCAxKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gc2Vlbi5nZXQoZm4pO1xyXG4gICAgICAgIGlmIChjb3VudCA+IFJFQ1VSU0lPTl9MSU1JVCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1heGltdW0gcmVjdXJzaXZlIHVwZGF0ZXMgZXhjZWVkZWQuIGAgK1xyXG4gICAgICAgICAgICAgICAgYFRoaXMgbWVhbnMgeW91IGhhdmUgYSByZWFjdGl2ZSBlZmZlY3QgdGhhdCBpcyBtdXRhdGluZyBpdHMgb3duIGAgK1xyXG4gICAgICAgICAgICAgICAgYGRlcGVuZGVuY2llcyBhbmQgdGh1cyByZWN1cnNpdmVseSB0cmlnZ2VyaW5nIGl0c2VsZi4gUG9zc2libGUgc291cmNlcyBgICtcclxuICAgICAgICAgICAgICAgIGBpbmNsdWRlIGNvbXBvbmVudCB0ZW1wbGF0ZSwgcmVuZGVyIGZ1bmN0aW9uLCB1cGRhdGVkIGhvb2sgb3IgYCArXHJcbiAgICAgICAgICAgICAgICBgd2F0Y2hlciBzb3VyY2UgZnVuY3Rpb24uYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZWVuLnNldChmbiwgY291bnQgKyAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXHJcbmxldCBpc0htclVwZGF0aW5nID0gZmFsc2U7XHJcbmNvbnN0IGhtckRpcnR5Q29tcG9uZW50cyA9IG5ldyBTZXQoKTtcclxuLy8gRXhwb3NlIHRoZSBITVIgcnVudGltZSBvbiB0aGUgZ2xvYmFsIG9iamVjdFxyXG4vLyBUaGlzIG1ha2VzIGl0IGVudGlyZWx5IHRyZWUtc2hha2FibGUgd2l0aG91dCBwb2xsdXRpbmcgdGhlIGV4cG9ydHMgYW5kIG1ha2VzXHJcbi8vIGl0IGVhc2llciB0byBiZSB1c2VkIGluIHRvb2xpbmdzIGxpa2UgdnVlLWxvYWRlclxyXG4vLyBOb3RlOiBmb3IgYSBjb21wb25lbnQgdG8gYmUgZWxpZ2libGUgZm9yIEhNUiBpdCBhbHNvIG5lZWRzIHRoZSBfX2htcklkIG9wdGlvblxyXG4vLyB0byBiZSBzZXQgc28gdGhhdCBpdHMgaW5zdGFuY2VzIGNhbiBiZSByZWdpc3RlcmVkIC8gcmVtb3ZlZC5cclxuaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAodHJ1ZSApKSB7XHJcbiAgICBjb25zdCBnbG9iYWxPYmplY3QgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgID8gZ2xvYmFsXHJcbiAgICAgICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgPyBzZWxmXHJcbiAgICAgICAgICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgID8gd2luZG93XHJcbiAgICAgICAgICAgICAgICA6IHt9O1xyXG4gICAgZ2xvYmFsT2JqZWN0Ll9fVlVFX0hNUl9SVU5USU1FX18gPSB7XHJcbiAgICAgICAgY3JlYXRlUmVjb3JkOiB0cnlXcmFwKGNyZWF0ZVJlY29yZCksXHJcbiAgICAgICAgcmVyZW5kZXI6IHRyeVdyYXAocmVyZW5kZXIpLFxyXG4gICAgICAgIHJlbG9hZDogdHJ5V3JhcChyZWxvYWQpXHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcclxuZnVuY3Rpb24gcmVnaXN0ZXJITVIoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IGlkID0gaW5zdGFuY2UudHlwZS5fX2htcklkO1xyXG4gICAgbGV0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xyXG4gICAgaWYgKCFyZWNvcmQpIHtcclxuICAgICAgICBjcmVhdGVSZWNvcmQoaWQpO1xyXG4gICAgICAgIHJlY29yZCA9IG1hcC5nZXQoaWQpO1xyXG4gICAgfVxyXG4gICAgcmVjb3JkLmFkZChpbnN0YW5jZSk7XHJcbn1cclxuZnVuY3Rpb24gdW5yZWdpc3RlckhNUihpbnN0YW5jZSkge1xyXG4gICAgbWFwLmdldChpbnN0YW5jZS50eXBlLl9faG1ySWQpLmRlbGV0ZShpbnN0YW5jZSk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUmVjb3JkKGlkKSB7XHJcbiAgICBpZiAobWFwLmhhcyhpZCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBtYXAuc2V0KGlkLCBuZXcgU2V0KCkpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gcmVyZW5kZXIoaWQsIG5ld1JlbmRlcikge1xyXG4gICAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICBpZiAoIXJlY29yZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBBcnJheS5mcm9tIGNyZWF0ZXMgYSBzbmFwc2hvdCB3aGljaCBhdm9pZHMgdGhlIHNldCBiZWluZyBtdXRhdGVkIGR1cmluZ1xyXG4gICAgLy8gdXBkYXRlc1xyXG4gICAgQXJyYXkuZnJvbShyZWNvcmQpLmZvckVhY2goaW5zdGFuY2UgPT4ge1xyXG4gICAgICAgIGlmIChuZXdSZW5kZXIpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gbmV3UmVuZGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnN0YW5jZS5yZW5kZXJDYWNoZSA9IFtdO1xyXG4gICAgICAgIC8vIHRoaXMgZmxhZyBmb3JjZXMgY2hpbGQgY29tcG9uZW50cyB3aXRoIHNsb3QgY29udGVudCB0byB1cGRhdGVcclxuICAgICAgICBpc0htclVwZGF0aW5nID0gdHJ1ZTtcclxuICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcclxuICAgICAgICBpc0htclVwZGF0aW5nID0gZmFsc2U7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiByZWxvYWQoaWQsIG5ld0NvbXApIHtcclxuICAgIGNvbnN0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xyXG4gICAgaWYgKCFyZWNvcmQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgLy8gQXJyYXkuZnJvbSBjcmVhdGVzIGEgc25hcHNob3Qgd2hpY2ggYXZvaWRzIHRoZSBzZXQgYmVpbmcgbXV0YXRlZCBkdXJpbmdcclxuICAgIC8vIHVwZGF0ZXNcclxuICAgIEFycmF5LmZyb20ocmVjb3JkKS5mb3JFYWNoKGluc3RhbmNlID0+IHtcclxuICAgICAgICBjb25zdCBjb21wID0gaW5zdGFuY2UudHlwZTtcclxuICAgICAgICBpZiAoIWhtckRpcnR5Q29tcG9uZW50cy5oYXMoY29tcCkpIHtcclxuICAgICAgICAgICAgLy8gMS4gVXBkYXRlIGV4aXN0aW5nIGNvbXAgZGVmaW5pdGlvbiB0byBtYXRjaCBuZXcgb25lXHJcbiAgICAgICAgICAgIG5ld0NvbXAgPSBpc0NsYXNzQ29tcG9uZW50KG5ld0NvbXApID8gbmV3Q29tcC5fX3ZjY09wdHMgOiBuZXdDb21wO1xyXG4gICAgICAgICAgICBleHRlbmQoY29tcCwgbmV3Q29tcCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGNvbXApIHtcclxuICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiBuZXdDb21wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb21wW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gMi4gTWFyayBjb21wb25lbnQgZGlydHkuIFRoaXMgZm9yY2VzIHRoZSByZW5kZXJlciB0byByZXBsYWNlIHRoZSBjb21wb25lbnRcclxuICAgICAgICAgICAgLy8gb24gcGF0Y2guXHJcbiAgICAgICAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5hZGQoY29tcCk7XHJcbiAgICAgICAgICAgIC8vIDMuIE1ha2Ugc3VyZSB0byB1bm1hcmsgdGhlIGNvbXBvbmVudCBhZnRlciB0aGUgcmVsb2FkLlxyXG4gICAgICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5kZWxldGUoY29tcCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5zdGFuY2UucGFyZW50KSB7XHJcbiAgICAgICAgICAgIC8vIDQuIEZvcmNlIHRoZSBwYXJlbnQgaW5zdGFuY2UgdG8gcmUtcmVuZGVyLiBUaGlzIHdpbGwgY2F1c2UgYWxsIHVwZGF0ZWRcclxuICAgICAgICAgICAgLy8gY29tcG9uZW50cyB0byBiZSB1bm1vdW50ZWQgYW5kIHJlLW1vdW50ZWQuIFF1ZXVlIHRoZSB1cGRhdGUgc28gdGhhdCB3ZVxyXG4gICAgICAgICAgICAvLyBkb24ndCBlbmQgdXAgZm9yY2luZyB0aGUgc2FtZSBwYXJlbnQgdG8gcmUtcmVuZGVyIG11bHRpcGxlIHRpbWVzLlxyXG4gICAgICAgICAgICBxdWV1ZUpvYihpbnN0YW5jZS5wYXJlbnQudXBkYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5yZWxvYWQpIHtcclxuICAgICAgICAgICAgLy8gcm9vdCBpbnN0YW5jZSBtb3VudGVkIHZpYSBjcmVhdGVBcHAoKSBoYXMgYSByZWxvYWQgbWV0aG9kXHJcbiAgICAgICAgICAgIGluc3RhbmNlLmFwcENvbnRleHQucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIC8vIHJvb3QgaW5zdGFuY2UgaW5zaWRlIHRyZWUgY3JlYXRlZCB2aWEgcmF3IHJlbmRlcigpLiBGb3JjZSByZWxvYWQuXHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW0hNUl0gUm9vdCBvciBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlIG1vZGlmaWVkLiBGdWxsIHJlbG9hZCByZXF1aXJlZC4nKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiB0cnlXcmFwKGZuKSB7XHJcbiAgICByZXR1cm4gKGlkLCBhcmcpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gZm4oaWQsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW0hNUl0gU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIFZ1ZSBjb21wb25lbnQgaG90LXJlbG9hZC4gYCArXHJcbiAgICAgICAgICAgICAgICBgRnVsbCByZWxvYWQgcmVxdWlyZWQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxuXG5sZXQgZGV2dG9vbHM7XHJcbmZ1bmN0aW9uIHNldERldnRvb2xzSG9vayhob29rKSB7XHJcbiAgICBkZXZ0b29scyA9IGhvb2s7XHJcbn1cclxuZnVuY3Rpb24gZGV2dG9vbHNJbml0QXBwKGFwcCwgdmVyc2lvbikge1xyXG4gICAgLy8gVE9ETyBxdWV1ZSBpZiBkZXZ0b29scyBpcyB1bmRlZmluZWRcclxuICAgIGlmICghZGV2dG9vbHMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgZGV2dG9vbHMuZW1pdChcImFwcDppbml0XCIgLyogQVBQX0lOSVQgKi8sIGFwcCwgdmVyc2lvbiwge1xyXG4gICAgICAgIEZyYWdtZW50LFxyXG4gICAgICAgIFRleHQsXHJcbiAgICAgICAgQ29tbWVudCxcclxuICAgICAgICBTdGF0aWNcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGRldnRvb2xzVW5tb3VudEFwcChhcHApIHtcclxuICAgIGlmICghZGV2dG9vbHMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgZGV2dG9vbHMuZW1pdChcImFwcDp1bm1vdW50XCIgLyogQVBQX1VOTU9VTlQgKi8sIGFwcCk7XHJcbn1cclxuY29uc3QgZGV2dG9vbHNDb21wb25lbnRBZGRlZCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OmFkZGVkXCIgLyogQ09NUE9ORU5UX0FEREVEICovKTtcclxuY29uc3QgZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkID0gLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6dXBkYXRlZFwiIC8qIENPTVBPTkVOVF9VUERBVEVEICovKTtcclxuY29uc3QgZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkID0gLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6cmVtb3ZlZFwiIC8qIENPTVBPTkVOVF9SRU1PVkVEICovKTtcclxuZnVuY3Rpb24gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKGhvb2spIHtcclxuICAgIHJldHVybiAoY29tcG9uZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKCFkZXZ0b29scylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGRldnRvb2xzLmVtaXQoaG9vaywgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLCBjb21wb25lbnQudWlkLCBjb21wb25lbnQucGFyZW50ID8gY29tcG9uZW50LnBhcmVudC51aWQgOiB1bmRlZmluZWQpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBkZXZ0b29sc0NvbXBvbmVudEVtaXQoY29tcG9uZW50LCBldmVudCwgcGFyYW1zKSB7XHJcbiAgICBpZiAoIWRldnRvb2xzKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGRldnRvb2xzLmVtaXQoXCJjb21wb25lbnQ6ZW1pdFwiIC8qIENPTVBPTkVOVF9FTUlUICovLCBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsIGNvbXBvbmVudCwgZXZlbnQsIHBhcmFtcyk7XHJcbn1cblxuZnVuY3Rpb24gZW1pdChpbnN0YW5jZSwgZXZlbnQsIC4uLnJhd0FyZ3MpIHtcclxuICAgIGNvbnN0IHByb3BzID0gaW5zdGFuY2Uudm5vZGUucHJvcHMgfHwgRU1QVFlfT0JKO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IHsgZW1pdHNPcHRpb25zLCBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICBpZiAoZW1pdHNPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmICghKGV2ZW50IGluIGVtaXRzT3B0aW9ucykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcHJvcHNPcHRpb25zIHx8ICEodG9IYW5kbGVyS2V5KGV2ZW50KSBpbiBwcm9wc09wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IGVtaXR0ZWQgZXZlbnQgXCIke2V2ZW50fVwiIGJ1dCBpdCBpcyBuZWl0aGVyIGRlY2xhcmVkIGluIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgdGhlIGVtaXRzIG9wdGlvbiBub3IgYXMgYW4gXCIke3RvSGFuZGxlcktleShldmVudCl9XCIgcHJvcC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IGVtaXRzT3B0aW9uc1tldmVudF07XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWxpZGF0b3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRvciguLi5yYXdBcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSW52YWxpZCBldmVudCBhcmd1bWVudHM6IGV2ZW50IHZhbGlkYXRpb24gZmFpbGVkIGZvciBldmVudCBcIiR7ZXZlbnR9XCIuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IGFyZ3MgPSByYXdBcmdzO1xyXG4gICAgY29uc3QgaXNNb2RlbExpc3RlbmVyID0gZXZlbnQuc3RhcnRzV2l0aCgndXBkYXRlOicpO1xyXG4gICAgLy8gZm9yIHYtbW9kZWwgdXBkYXRlOnh4eCBldmVudHMsIGFwcGx5IG1vZGlmaWVycyBvbiBhcmdzXHJcbiAgICBjb25zdCBtb2RlbEFyZyA9IGlzTW9kZWxMaXN0ZW5lciAmJiBldmVudC5zbGljZSg3KTtcclxuICAgIGlmIChtb2RlbEFyZyAmJiBtb2RlbEFyZyBpbiBwcm9wcykge1xyXG4gICAgICAgIGNvbnN0IG1vZGlmaWVyc0tleSA9IGAke21vZGVsQXJnID09PSAnbW9kZWxWYWx1ZScgPyAnbW9kZWwnIDogbW9kZWxBcmd9TW9kaWZpZXJzYDtcclxuICAgICAgICBjb25zdCB7IG51bWJlciwgdHJpbSB9ID0gcHJvcHNbbW9kaWZpZXJzS2V5XSB8fCBFTVBUWV9PQko7XHJcbiAgICAgICAgaWYgKHRyaW0pIHtcclxuICAgICAgICAgICAgYXJncyA9IHJhd0FyZ3MubWFwKGEgPT4gYS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChudW1iZXIpIHtcclxuICAgICAgICAgICAgYXJncyA9IHJhd0FyZ3MubWFwKHRvTnVtYmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgIGRldnRvb2xzQ29tcG9uZW50RW1pdChpbnN0YW5jZSwgZXZlbnQsIGFyZ3MpO1xyXG4gICAgfVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHByb3BzW3RvSGFuZGxlcktleShsb3dlckNhc2VFdmVudCldKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEV2ZW50IFwiJHtsb3dlckNhc2VFdmVudH1cIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBgICtcclxuICAgICAgICAgICAgICAgIGAke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIGluc3RhbmNlLnR5cGUpfSBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXCIke2V2ZW50fVwiLiBgICtcclxuICAgICAgICAgICAgICAgIGBOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBgICtcclxuICAgICAgICAgICAgICAgIGB2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gYCArXHJcbiAgICAgICAgICAgICAgICBgWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXCIke2h5cGhlbmF0ZShldmVudCl9XCIgaW5zdGVhZCBvZiBcIiR7ZXZlbnR9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY29udmVydCBoYW5kbGVyIG5hbWUgdG8gY2FtZWxDYXNlLiBTZWUgaXNzdWUgIzIyNDlcclxuICAgIGxldCBoYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShjYW1lbGl6ZShldmVudCkpO1xyXG4gICAgbGV0IGhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZV07XHJcbiAgICAvLyBmb3Igdi1tb2RlbCB1cGRhdGU6eHh4IGV2ZW50cywgYWxzbyB0cmlnZ2VyIGtlYmFiLWNhc2UgZXF1aXZhbGVudFxyXG4gICAgLy8gZm9yIHByb3BzIHBhc3NlZCB2aWEga2ViYWItY2FzZVxyXG4gICAgaWYgKCFoYW5kbGVyICYmIGlzTW9kZWxMaXN0ZW5lcikge1xyXG4gICAgICAgIGhhbmRsZXJOYW1lID0gdG9IYW5kbGVyS2V5KGh5cGhlbmF0ZShldmVudCkpO1xyXG4gICAgICAgIGhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZV07XHJcbiAgICB9XHJcbiAgICBpZiAoaGFuZGxlcikge1xyXG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhhbmRsZXIsIGluc3RhbmNlLCA2IC8qIENPTVBPTkVOVF9FVkVOVF9IQU5ETEVSICovLCBhcmdzKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG9uY2VIYW5kbGVyID0gcHJvcHNbaGFuZGxlck5hbWUgKyBgT25jZWBdO1xyXG4gICAgaWYgKG9uY2VIYW5kbGVyKSB7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZS5lbWl0dGVkKSB7XHJcbiAgICAgICAgICAgIChpbnN0YW5jZS5lbWl0dGVkID0ge30pW2hhbmRsZXJOYW1lXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLmVtaXR0ZWRbaGFuZGxlck5hbWVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcob25jZUhhbmRsZXIsIGluc3RhbmNlLCA2IC8qIENPTVBPTkVOVF9FVkVOVF9IQU5ETEVSICovLCBhcmdzKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVFbWl0c09wdGlvbnMoY29tcCwgYXBwQ29udGV4dCwgYXNNaXhpbiA9IGZhbHNlKSB7XHJcbiAgICBpZiAoIWFwcENvbnRleHQuZGVvcHQgJiYgY29tcC5fX2VtaXRzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gY29tcC5fX2VtaXRzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmF3ID0gY29tcC5lbWl0cztcclxuICAgIGxldCBub3JtYWxpemVkID0ge307XHJcbiAgICAvLyBhcHBseSBtaXhpbi9leHRlbmRzIHByb3BzXHJcbiAgICBsZXQgaGFzRXh0ZW5kcyA9IGZhbHNlO1xyXG4gICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcclxuICAgICAgICBjb25zdCBleHRlbmRFbWl0cyA9IChyYXcpID0+IHtcclxuICAgICAgICAgICAgaGFzRXh0ZW5kcyA9IHRydWU7XHJcbiAgICAgICAgICAgIGV4dGVuZChub3JtYWxpemVkLCBub3JtYWxpemVFbWl0c09wdGlvbnMocmF3LCBhcHBDb250ZXh0LCB0cnVlKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoIWFzTWl4aW4gJiYgYXBwQ29udGV4dC5taXhpbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGFwcENvbnRleHQubWl4aW5zLmZvckVhY2goZXh0ZW5kRW1pdHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29tcC5leHRlbmRzKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZEVtaXRzKGNvbXAuZXh0ZW5kcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb21wLm1peGlucykge1xyXG4gICAgICAgICAgICBjb21wLm1peGlucy5mb3JFYWNoKGV4dGVuZEVtaXRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIXJhdyAmJiAhaGFzRXh0ZW5kcykge1xyXG4gICAgICAgIHJldHVybiAoY29tcC5fX2VtaXRzID0gbnVsbCk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNBcnJheShyYXcpKSB7XHJcbiAgICAgICAgcmF3LmZvckVhY2goa2V5ID0+IChub3JtYWxpemVkW2tleV0gPSBudWxsKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgcmF3KTtcclxuICAgIH1cclxuICAgIHJldHVybiAoY29tcC5fX2VtaXRzID0gbm9ybWFsaXplZCk7XHJcbn1cclxuLy8gQ2hlY2sgaWYgYW4gaW5jb21pbmcgcHJvcCBrZXkgaXMgYSBkZWNsYXJlZCBlbWl0IGV2ZW50IGxpc3RlbmVyLlxyXG4vLyBlLmcuIFdpdGggYGVtaXRzOiB7IGNsaWNrOiBudWxsIH1gLCBwcm9wcyBuYW1lZCBgb25DbGlja2AgYW5kIGBvbmNsaWNrYCBhcmVcclxuLy8gYm90aCBjb25zaWRlcmVkIG1hdGNoZWQgbGlzdGVuZXJzLlxyXG5mdW5jdGlvbiBpc0VtaXRMaXN0ZW5lcihvcHRpb25zLCBrZXkpIHtcclxuICAgIGlmICghb3B0aW9ucyB8fCAhaXNPbihrZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAga2V5ID0ga2V5LnJlcGxhY2UoL09uY2UkLywgJycpO1xyXG4gICAgcmV0dXJuIChoYXNPd24ob3B0aW9ucywga2V5WzJdLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMykpIHx8XHJcbiAgICAgICAgaGFzT3duKG9wdGlvbnMsIGtleS5zbGljZSgyKSkpO1xyXG59XG5cbi8vIG1hcmsgdGhlIGN1cnJlbnQgcmVuZGVyaW5nIGluc3RhbmNlIGZvciBhc3NldCByZXNvbHV0aW9uIChlLmcuXHJcbi8vIHJlc29sdmVDb21wb25lbnQsIHJlc29sdmVEaXJlY3RpdmUpIGR1cmluZyByZW5kZXJcclxubGV0IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XHJcbmZ1bmN0aW9uIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShpbnN0YW5jZSkge1xyXG4gICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gaW5zdGFuY2U7XHJcbn1cclxuLy8gZGV2IG9ubHkgZmxhZyB0byB0cmFjayB3aGV0aGVyICRhdHRycyB3YXMgdXNlZCBkdXJpbmcgcmVuZGVyLlxyXG4vLyBJZiAkYXR0cnMgd2FzIHVzZWQgZHVyaW5nIHJlbmRlciB0aGVuIHRoZSB3YXJuaW5nIGZvciBmYWlsZWQgYXR0cnNcclxuLy8gZmFsbHRocm91Z2ggY2FuIGJlIHN1cHByZXNzZWQuXHJcbmxldCBhY2Nlc3NlZEF0dHJzID0gZmFsc2U7XHJcbmZ1bmN0aW9uIG1hcmtBdHRyc0FjY2Vzc2VkKCkge1xyXG4gICAgYWNjZXNzZWRBdHRycyA9IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgeyB0eXBlOiBDb21wb25lbnQsIHZub2RlLCBwcm94eSwgd2l0aFByb3h5LCBwcm9wcywgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSwgc2xvdHMsIGF0dHJzLCBlbWl0LCByZW5kZXIsIHJlbmRlckNhY2hlLCBkYXRhLCBzZXR1cFN0YXRlLCBjdHggfSA9IGluc3RhbmNlO1xyXG4gICAgbGV0IHJlc3VsdDtcclxuICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGFjY2Vzc2VkQXR0cnMgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IGZhbGx0aHJvdWdoQXR0cnM7XHJcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIC8vIHdpdGhQcm94eSBpcyBhIHByb3h5IHdpdGggYSBkaWZmZXJlbnQgYGhhc2AgdHJhcCBvbmx5IGZvclxyXG4gICAgICAgICAgICAvLyBydW50aW1lLWNvbXBpbGVkIHJlbmRlciBmdW5jdGlvbnMgdXNpbmcgYHdpdGhgIGJsb2NrLlxyXG4gICAgICAgICAgICBjb25zdCBwcm94eVRvVXNlID0gd2l0aFByb3h5IHx8IHByb3h5O1xyXG4gICAgICAgICAgICByZXN1bHQgPSBub3JtYWxpemVWTm9kZShyZW5kZXIuY2FsbChwcm94eVRvVXNlLCBwcm94eVRvVXNlLCByZW5kZXJDYWNoZSwgcHJvcHMsIHNldHVwU3RhdGUsIGRhdGEsIGN0eCkpO1xyXG4gICAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzID0gYXR0cnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsXHJcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlciA9IENvbXBvbmVudDtcclxuICAgICAgICAgICAgLy8gaW4gZGV2LCBtYXJrIGF0dHJzIGFjY2Vzc2VkIGlmIG9wdGlvbmFsIHByb3BzIChhdHRycyA9PT0gcHJvcHMpXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgYXR0cnMgPT09IHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKHJlbmRlci5sZW5ndGggPiAxXHJcbiAgICAgICAgICAgICAgICA/IHJlbmRlcihwcm9wcywgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldCBhdHRycygpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXR0cnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3RzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIDogeyBhdHRycywgc2xvdHMsIGVtaXQgfSlcclxuICAgICAgICAgICAgICAgIDogcmVuZGVyKHByb3BzLCBudWxsIC8qIHdlIGtub3cgaXQgZG9lc24ndCBuZWVkIGl0ICovKSk7XHJcbiAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBDb21wb25lbnQucHJvcHNcclxuICAgICAgICAgICAgICAgID8gYXR0cnNcclxuICAgICAgICAgICAgICAgIDogZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoKGF0dHJzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYXR0ciBtZXJnaW5nXHJcbiAgICAgICAgLy8gaW4gZGV2IG1vZGUsIGNvbW1lbnRzIGFyZSBwcmVzZXJ2ZWQsIGFuZCBpdCdzIHBvc3NpYmxlIGZvciBhIHRlbXBsYXRlXHJcbiAgICAgICAgLy8gdG8gaGF2ZSBjb21tZW50cyBhbG9uZyBzaWRlIHRoZSByb290IGVsZW1lbnQgd2hpY2ggbWFrZXMgaXQgYSBmcmFnbWVudFxyXG4gICAgICAgIGxldCByb290ID0gcmVzdWx0O1xyXG4gICAgICAgIGxldCBzZXRSb290ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICBbcm9vdCwgc2V0Um9vdF0gPSBnZXRDaGlsZFJvb3QocmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKENvbXBvbmVudC5pbmhlcml0QXR0cnMgIT09IGZhbHNlICYmIGZhbGx0aHJvdWdoQXR0cnMpIHtcclxuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGZhbGx0aHJvdWdoQXR0cnMpO1xyXG4gICAgICAgICAgICBjb25zdCB7IHNoYXBlRmxhZyB9ID0gcm9vdDtcclxuICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHNPcHRpb25zICYmIGtleXMuc29tZShpc01vZGVsTGlzdGVuZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGEgdi1tb2RlbCBsaXN0ZW5lciAob25VcGRhdGU6eHh4KSBoYXMgYSBjb3JyZXNwb25kaW5nIGRlY2xhcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb3AsIGl0IGluZGljYXRlcyB0aGlzIGNvbXBvbmVudCBleHBlY3RzIHRvIGhhbmRsZSB2LW1vZGVsIGFuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCBzaG91bGQgbm90IGZhbGx0aHJvdWdoLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZWxhdGVkOiAjMTU0MywgIzE2NDMsICMxOTg5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBmaWx0ZXJNb2RlbExpc3RlbmVycyhmYWxsdGhyb3VnaEF0dHJzLCBwcm9wc09wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByb290ID0gY2xvbmVWTm9kZShyb290LCBmYWxsdGhyb3VnaEF0dHJzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhYWNjZXNzZWRBdHRycyAmJiByb290LnR5cGUgIT09IENvbW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxBdHRycyA9IE9iamVjdC5rZXlzKGF0dHJzKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudEF0dHJzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0cmFBdHRycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYWxsQXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGFsbEF0dHJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNPbihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgdi1tb2RlbCBoYW5kbGVycyB3aGVuIHRoZXkgZmFpbCB0byBmYWxsdGhyb3VnaFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBgb25gLCBsb3dlcmNhc2UgZmlyc3QgbGV0dGVyIHRvIHJlZmxlY3QgZXZlbnQgY2FzaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWNjdXJhdGVseVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50QXR0cnMucHVzaChrZXlbMl0udG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYUF0dHJzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0cmFBdHRycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgRXh0cmFuZW91cyBub24tcHJvcHMgYXR0cmlidXRlcyAoYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtleHRyYUF0dHJzLmpvaW4oJywgJyl9KSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50QXR0cnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEV4dHJhbmVvdXMgbm9uLWVtaXRzIGV2ZW50IGxpc3RlbmVycyAoYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtldmVudEF0dHJzLmpvaW4oJywgJyl9KSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgSWYgdGhlIGxpc3RlbmVyIGlzIGludGVuZGVkIHRvIGJlIGEgY29tcG9uZW50IGN1c3RvbSBldmVudCBsaXN0ZW5lciBvbmx5LCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBkZWNsYXJlIGl0IHVzaW5nIHRoZSBcImVtaXRzXCIgb3B0aW9uLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbmhlcml0IGRpcmVjdGl2ZXNcclxuICAgICAgICBpZiAodm5vZGUuZGlycykge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0VsZW1lbnRSb290KHJvb3QpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBSdW50aW1lIGRpcmVjdGl2ZSB1c2VkIG9uIGNvbXBvbmVudCB3aXRoIG5vbi1lbGVtZW50IHJvb3Qgbm9kZS4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYFRoZSBkaXJlY3RpdmVzIHdpbGwgbm90IGZ1bmN0aW9uIGFzIGludGVuZGVkLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJvb3QuZGlycyA9IHJvb3QuZGlycyA/IHJvb3QuZGlycy5jb25jYXQodm5vZGUuZGlycykgOiB2bm9kZS5kaXJzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbmhlcml0IHRyYW5zaXRpb24gZGF0YVxyXG4gICAgICAgIGlmICh2bm9kZS50cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBpbnNpZGUgPFRyYW5zaXRpb24+IHJlbmRlcnMgbm9uLWVsZW1lbnQgcm9vdCBub2RlIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGB0aGF0IGNhbm5vdCBiZSBhbmltYXRlZC5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByb290LnRyYW5zaXRpb24gPSB2bm9kZS50cmFuc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNldFJvb3QpIHtcclxuICAgICAgICAgICAgc2V0Um9vdChyb290KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJvb3Q7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIDEgLyogUkVOREVSX0ZVTkNUSU9OICovKTtcclxuICAgICAgICByZXN1bHQgPSBjcmVhdGVWTm9kZShDb21tZW50KTtcclxuICAgIH1cclxuICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKiBJbiBkZXYgbW9kZSwgdGVtcGxhdGUgcm9vdCBsZXZlbCBjb21tZW50cyBhcmUgcmVuZGVyZWQsIHdoaWNoIHR1cm5zIHRoZVxyXG4gKiB0ZW1wbGF0ZSBpbnRvIGEgZnJhZ21lbnQgcm9vdCwgYnV0IHdlIG5lZWQgdG8gbG9jYXRlIHRoZSBzaW5nbGUgZWxlbWVudFxyXG4gKiByb290IGZvciBhdHRycyBhbmQgc2NvcGUgaWQgcHJvY2Vzc2luZy5cclxuICovXHJcbmNvbnN0IGdldENoaWxkUm9vdCA9ICh2bm9kZSkgPT4ge1xyXG4gICAgaWYgKHZub2RlLnR5cGUgIT09IEZyYWdtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIFt2bm9kZSwgdW5kZWZpbmVkXTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJhd0NoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XHJcbiAgICBjb25zdCBkeW5hbWljQ2hpbGRyZW4gPSB2bm9kZS5keW5hbWljQ2hpbGRyZW47XHJcbiAgICBjb25zdCBjaGlsZFJvb3QgPSBmaWx0ZXJTaW5nbGVSb290KHJhd0NoaWxkcmVuKTtcclxuICAgIGlmICghY2hpbGRSb290KSB7XHJcbiAgICAgICAgcmV0dXJuIFt2bm9kZSwgdW5kZWZpbmVkXTtcclxuICAgIH1cclxuICAgIGNvbnN0IGluZGV4ID0gcmF3Q2hpbGRyZW4uaW5kZXhPZihjaGlsZFJvb3QpO1xyXG4gICAgY29uc3QgZHluYW1pY0luZGV4ID0gZHluYW1pY0NoaWxkcmVuID8gZHluYW1pY0NoaWxkcmVuLmluZGV4T2YoY2hpbGRSb290KSA6IC0xO1xyXG4gICAgY29uc3Qgc2V0Um9vdCA9ICh1cGRhdGVkUm9vdCkgPT4ge1xyXG4gICAgICAgIHJhd0NoaWxkcmVuW2luZGV4XSA9IHVwZGF0ZWRSb290O1xyXG4gICAgICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKGR5bmFtaWNJbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW5bZHluYW1pY0luZGV4XSA9IHVwZGF0ZWRSb290O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHVwZGF0ZWRSb290LnBhdGNoRmxhZyA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZub2RlLmR5bmFtaWNDaGlsZHJlbiA9IFsuLi5keW5hbWljQ2hpbGRyZW4sIHVwZGF0ZWRSb290XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gW25vcm1hbGl6ZVZOb2RlKGNoaWxkUm9vdCksIHNldFJvb3RdO1xyXG59O1xyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIGZpbHRlclNpbmdsZVJvb3QoY2hpbGRyZW4pIHtcclxuICAgIGNvbnN0IGZpbHRlcmVkID0gY2hpbGRyZW4uZmlsdGVyKGNoaWxkID0+IHtcclxuICAgICAgICByZXR1cm4gIShpc1ZOb2RlKGNoaWxkKSAmJlxyXG4gICAgICAgICAgICBjaGlsZC50eXBlID09PSBDb21tZW50ICYmXHJcbiAgICAgICAgICAgIGNoaWxkLmNoaWxkcmVuICE9PSAndi1pZicpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZmlsdGVyZWQubGVuZ3RoID09PSAxICYmIGlzVk5vZGUoZmlsdGVyZWRbMF0pID8gZmlsdGVyZWRbMF0gOiBudWxsO1xyXG59XHJcbmNvbnN0IGdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaCA9IChhdHRycykgPT4ge1xyXG4gICAgbGV0IHJlcztcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJyB8fCBrZXkgPT09ICdzdHlsZScgfHwgaXNPbihrZXkpKSB7XHJcbiAgICAgICAgICAgIChyZXMgfHwgKHJlcyA9IHt9KSlba2V5XSA9IGF0dHJzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufTtcclxuY29uc3QgZmlsdGVyTW9kZWxMaXN0ZW5lcnMgPSAoYXR0cnMsIHByb3BzKSA9PiB7XHJcbiAgICBjb25zdCByZXMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XHJcbiAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSB8fCAhKGtleS5zbGljZSg5KSBpbiBwcm9wcykpIHtcclxuICAgICAgICAgICAgcmVzW2tleV0gPSBhdHRyc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn07XHJcbmNvbnN0IGlzRWxlbWVudFJvb3QgPSAodm5vZGUpID0+IHtcclxuICAgIHJldHVybiAodm5vZGUuc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8gfHxcclxuICAgICAgICB2bm9kZS5zaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gfHxcclxuICAgICAgICB2bm9kZS50eXBlID09PSBDb21tZW50IC8vIHBvdGVudGlhbCB2LWlmIGJyYW5jaCBzd2l0Y2hcclxuICAgICk7XHJcbn07XHJcbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZUNvbXBvbmVudChwcmV2Vk5vZGUsIG5leHRWTm9kZSwgb3B0aW1pemVkKSB7XHJcbiAgICBjb25zdCB7IHByb3BzOiBwcmV2UHJvcHMsIGNoaWxkcmVuOiBwcmV2Q2hpbGRyZW4sIGNvbXBvbmVudCB9ID0gcHJldlZOb2RlO1xyXG4gICAgY29uc3QgeyBwcm9wczogbmV4dFByb3BzLCBjaGlsZHJlbjogbmV4dENoaWxkcmVuLCBwYXRjaEZsYWcgfSA9IG5leHRWTm9kZTtcclxuICAgIGNvbnN0IGVtaXRzID0gY29tcG9uZW50LmVtaXRzT3B0aW9ucztcclxuICAgIC8vIFBhcmVudCBjb21wb25lbnQncyByZW5kZXIgZnVuY3Rpb24gd2FzIGhvdC11cGRhdGVkLiBTaW5jZSB0aGlzIG1heSBoYXZlXHJcbiAgICAvLyBjYXVzZWQgdGhlIGNoaWxkIGNvbXBvbmVudCdzIHNsb3RzIGNvbnRlbnQgdG8gaGF2ZSBjaGFuZ2VkLCB3ZSBuZWVkIHRvXHJcbiAgICAvLyBmb3JjZSB0aGUgY2hpbGQgdG8gdXBkYXRlIGFzIHdlbGwuXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIChwcmV2Q2hpbGRyZW4gfHwgbmV4dENoaWxkcmVuKSAmJiBpc0htclVwZGF0aW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyBmb3JjZSBjaGlsZCB1cGRhdGUgZm9yIHJ1bnRpbWUgZGlyZWN0aXZlIG9yIHRyYW5zaXRpb24gb24gY29tcG9uZW50IHZub2RlLlxyXG4gICAgaWYgKG5leHRWTm9kZS5kaXJzIHx8IG5leHRWTm9kZS50cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW1pemVkICYmIHBhdGNoRmxhZyA+IDApIHtcclxuICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTAyNCAvKiBEWU5BTUlDX1NMT1RTICovKSB7XHJcbiAgICAgICAgICAgIC8vIHNsb3QgY29udGVudCB0aGF0IHJlZmVyZW5jZXMgdmFsdWVzIHRoYXQgbWlnaHQgaGF2ZSBjaGFuZ2VkLFxyXG4gICAgICAgICAgICAvLyBlLmcuIGluIGEgdi1mb3JcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiAxNiAvKiBGVUxMX1BST1BTICovKSB7XHJcbiAgICAgICAgICAgIGlmICghcHJldlByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gISFuZXh0UHJvcHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcHJlc2VuY2Ugb2YgdGhpcyBmbGFnIGluZGljYXRlcyBwcm9wcyBhcmUgYWx3YXlzIG5vbi1udWxsXHJcbiAgICAgICAgICAgIHJldHVybiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGF0Y2hGbGFnICYgOCAvKiBQUk9QUyAqLykge1xyXG4gICAgICAgICAgICBjb25zdCBkeW5hbWljUHJvcHMgPSBuZXh0Vk5vZGUuZHluYW1pY1Byb3BzO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGR5bmFtaWNQcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZHluYW1pY1Byb3BzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRQcm9wc1trZXldICE9PSBwcmV2UHJvcHNba2V5XSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICFpc0VtaXRMaXN0ZW5lcihlbWl0cywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gdGhpcyBwYXRoIGlzIG9ubHkgdGFrZW4gYnkgbWFudWFsbHkgd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zXHJcbiAgICAgICAgLy8gc28gcHJlc2VuY2Ugb2YgYW55IGNoaWxkcmVuIGxlYWRzIHRvIGEgZm9yY2VkIHVwZGF0ZVxyXG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4gfHwgbmV4dENoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGlmICghbmV4dENoaWxkcmVuIHx8ICFuZXh0Q2hpbGRyZW4uJHN0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXZQcm9wcyA9PT0gbmV4dFByb3BzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFwcmV2UHJvcHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhbmV4dFByb3BzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIW5leHRQcm9wcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHNPcHRpb25zKSB7XHJcbiAgICBjb25zdCBuZXh0S2V5cyA9IE9iamVjdC5rZXlzKG5leHRQcm9wcyk7XHJcbiAgICBpZiAobmV4dEtleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhwcmV2UHJvcHMpLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXh0S2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IG5leHRLZXlzW2ldO1xyXG4gICAgICAgIGlmIChuZXh0UHJvcHNba2V5XSAhPT0gcHJldlByb3BzW2tleV0gJiZcclxuICAgICAgICAgICAgIWlzRW1pdExpc3RlbmVyKGVtaXRzT3B0aW9ucywga2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlSE9DSG9zdEVsKHsgdm5vZGUsIHBhcmVudCB9LCBlbCAvLyBIb3N0Tm9kZVxyXG4pIHtcclxuICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnN1YlRyZWUgPT09IHZub2RlKSB7XHJcbiAgICAgICAgKHZub2RlID0gcGFyZW50LnZub2RlKS5lbCA9IGVsO1xyXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgaXNTdXNwZW5zZSA9ICh0eXBlKSA9PiB0eXBlLl9faXNTdXNwZW5zZTtcclxuLy8gU3VzcGVuc2UgZXhwb3NlcyBhIGNvbXBvbmVudC1saWtlIEFQSSwgYW5kIGlzIHRyZWF0ZWQgbGlrZSBhIGNvbXBvbmVudFxyXG4vLyBpbiB0aGUgY29tcGlsZXIsIGJ1dCBpbnRlcm5hbGx5IGl0J3MgYSBzcGVjaWFsIGJ1aWx0LWluIHR5cGUgdGhhdCBob29rc1xyXG4vLyBkaXJlY3RseSBpbnRvIHRoZSByZW5kZXJlci5cclxuY29uc3QgU3VzcGVuc2VJbXBsID0ge1xyXG4gICAgLy8gSW4gb3JkZXIgdG8gbWFrZSBTdXNwZW5zZSB0cmVlLXNoYWthYmxlLCB3ZSBuZWVkIHRvIGF2b2lkIGltcG9ydGluZyBpdFxyXG4gICAgLy8gZGlyZWN0bHkgaW4gdGhlIHJlbmRlcmVyLiBUaGUgcmVuZGVyZXIgY2hlY2tzIGZvciB0aGUgX19pc1N1c3BlbnNlIGZsYWdcclxuICAgIC8vIG9uIGEgdm5vZGUncyB0eXBlIGFuZCBjYWxscyB0aGUgYHByb2Nlc3NgIG1ldGhvZCwgcGFzc2luZyBpbiByZW5kZXJlclxyXG4gICAgLy8gaW50ZXJuYWxzLlxyXG4gICAgX19pc1N1c3BlbnNlOiB0cnVlLFxyXG4gICAgcHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkLCBcclxuICAgIC8vIHBsYXRmb3JtLXNwZWNpZmljIGltcGwgcGFzc2VkIGZyb20gcmVuZGVyZXJcclxuICAgIHJlbmRlcmVySW50ZXJuYWxzKSB7XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgbW91bnRTdXNwZW5zZShuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHBhdGNoU3VzcGVuc2UobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBpc1NWRywgcmVuZGVyZXJJbnRlcm5hbHMpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoeWRyYXRlOiBoeWRyYXRlU3VzcGVuc2UsXHJcbiAgICBjcmVhdGU6IGNyZWF0ZVN1c3BlbnNlQm91bmRhcnlcclxufTtcclxuLy8gRm9yY2UtY2FzdGVkIHB1YmxpYyB0eXBpbmcgZm9yIGggYW5kIFRTWCBwcm9wcyBpbmZlcmVuY2VcclxuY29uc3QgU3VzcGVuc2UgPSAoIFN1c3BlbnNlSW1wbFxyXG4gICAgKTtcclxuZnVuY3Rpb24gbW91bnRTdXNwZW5zZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKSB7XHJcbiAgICBjb25zdCB7IHA6IHBhdGNoLCBvOiB7IGNyZWF0ZUVsZW1lbnQgfSB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XHJcbiAgICBjb25zdCBoaWRkZW5Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbnN0IHN1c3BlbnNlID0gKHZub2RlLnN1c3BlbnNlID0gY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSh2bm9kZSwgcGFyZW50U3VzcGVuc2UsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyLCBoaWRkZW5Db250YWluZXIsIGFuY2hvciwgaXNTVkcsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpKTtcclxuICAgIC8vIHN0YXJ0IG1vdW50aW5nIHRoZSBjb250ZW50IHN1YnRyZWUgaW4gYW4gb2ZmLWRvbSBjb250YWluZXJcclxuICAgIHBhdGNoKG51bGwsIChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gdm5vZGUuc3NDb250ZW50KSwgaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAvLyBub3cgY2hlY2sgaWYgd2UgaGF2ZSBlbmNvdW50ZXJlZCBhbnkgYXN5bmMgZGVwc1xyXG4gICAgaWYgKHN1c3BlbnNlLmRlcHMgPiAwKSB7XHJcbiAgICAgICAgLy8gaGFzIGFzeW5jXHJcbiAgICAgICAgLy8gbW91bnQgdGhlIGZhbGxiYWNrIHRyZWVcclxuICAgICAgICBwYXRjaChudWxsLCB2bm9kZS5zc0ZhbGxiYWNrLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxyXG4gICAgICAgIGlzU1ZHKTtcclxuICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIHZub2RlLnNzRmFsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gU3VzcGVuc2UgaGFzIG5vIGFzeW5jIGRlcHMuIEp1c3QgcmVzb2x2ZS5cclxuICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcGF0Y2hTdXNwZW5zZShuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIGlzU1ZHLCB7IHA6IHBhdGNoLCB1bTogdW5tb3VudCwgbzogeyBjcmVhdGVFbGVtZW50IH0gfSkge1xyXG4gICAgY29uc3Qgc3VzcGVuc2UgPSAobjIuc3VzcGVuc2UgPSBuMS5zdXNwZW5zZSk7XHJcbiAgICBzdXNwZW5zZS52bm9kZSA9IG4yO1xyXG4gICAgbjIuZWwgPSBuMS5lbDtcclxuICAgIGNvbnN0IG5ld0JyYW5jaCA9IG4yLnNzQ29udGVudDtcclxuICAgIGNvbnN0IG5ld0ZhbGxiYWNrID0gbjIuc3NGYWxsYmFjaztcclxuICAgIGNvbnN0IHsgYWN0aXZlQnJhbmNoLCBwZW5kaW5nQnJhbmNoLCBpc0luRmFsbGJhY2ssIGlzSHlkcmF0aW5nIH0gPSBzdXNwZW5zZTtcclxuICAgIGlmIChwZW5kaW5nQnJhbmNoKSB7XHJcbiAgICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IG5ld0JyYW5jaDtcclxuICAgICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG5ld0JyYW5jaCwgcGVuZGluZ0JyYW5jaCkpIHtcclxuICAgICAgICAgICAgLy8gc2FtZSByb290IHR5cGUgYnV0IGNvbnRlbnQgbWF5IGhhdmUgY2hhbmdlZC5cclxuICAgICAgICAgICAgcGF0Y2gocGVuZGluZ0JyYW5jaCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzSW5GYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdGYWxsYmFjaywgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcclxuICAgICAgICAgICAgICAgIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3RmFsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0b2dnbGVkIGJlZm9yZSBwZW5kaW5nIHRyZWUgaXMgcmVzb2x2ZWRcclxuICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkKys7XHJcbiAgICAgICAgICAgIGlmIChpc0h5ZHJhdGluZykge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgdG9nZ2xlZCBiZWZvcmUgaHlkcmF0aW9uIGlzIGZpbmlzaGVkLCB0aGUgY3VycmVudCBET00gdHJlZSBpc1xyXG4gICAgICAgICAgICAgICAgLy8gbm8gbG9uZ2VyIHZhbGlkLiBzZXQgaXQgYXMgdGhlIGFjdGl2ZSBicmFuY2ggc28gaXQgd2lsbCBiZSB1bm1vdW50ZWRcclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gcmVzb2x2ZWRcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggPSBwZW5kaW5nQnJhbmNoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudChwZW5kaW5nQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpbmNyZW1lbnQgcGVuZGluZyBJRC4gdGhpcyBpcyB1c2VkIHRvIGludmFsaWRhdGUgYXN5bmMgY2FsbGJhY2tzXHJcbiAgICAgICAgICAgIC8vIHJlc2V0IHN1c3BlbnNlIHN0YXRlXHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmRlcHMgPSAwO1xyXG4gICAgICAgICAgICAvLyBkaXNjYXJkIGVmZmVjdHMgZnJvbSBwZW5kaW5nIGJyYW5jaFxyXG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIC8vIGRpc2NhcmQgcHJldmlvdXMgY29udGFpbmVyXHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBpZiAoaXNJbkZhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhbHJlYWR5IGluIGZhbGxiYWNrIHN0YXRlXHJcbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKGFjdGl2ZUJyYW5jaCwgbmV3RmFsbGJhY2ssIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3RmFsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGFjdGl2ZUJyYW5jaCAmJiBpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBhY3RpdmVCcmFuY2gpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0b2dnbGVkIFwiYmFja1wiIHRvIGN1cnJlbnQgYWN0aXZlIGJyYW5jaFxyXG4gICAgICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICAvLyBmb3JjZSByZXNvbHZlXHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gc3dpdGNoZWQgdG8gYSAzcmQgYnJhbmNoXHJcbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChhY3RpdmVCcmFuY2ggJiYgaXNTYW1lVk5vZGVUeXBlKG5ld0JyYW5jaCwgYWN0aXZlQnJhbmNoKSkge1xyXG4gICAgICAgICAgICAvLyByb290IGRpZCBub3QgY2hhbmdlLCBqdXN0IG5vcm1hbCBwYXRjaFxyXG4gICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0JyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdCcmFuY2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gcm9vdCBub2RlIHRvZ2dsZWRcclxuICAgICAgICAgICAgLy8gaW52b2tlIEBwZW5kaW5nIGV2ZW50XHJcbiAgICAgICAgICAgIGNvbnN0IG9uUGVuZGluZyA9IG4yLnByb3BzICYmIG4yLnByb3BzLm9uUGVuZGluZztcclxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob25QZW5kaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgb25QZW5kaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbW91bnQgcGVuZGluZyBicmFuY2ggaW4gb2ZmLWRvbSBjb250YWluZXJcclxuICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IG5ld0JyYW5jaDtcclxuICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkKys7XHJcbiAgICAgICAgICAgIHBhdGNoKG51bGwsIG5ld0JyYW5jaCwgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIGluY29taW5nIGJyYW5jaCBoYXMgbm8gYXN5bmMgZGVwcywgcmVzb2x2ZSBub3cuXHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRpbWVvdXQsIHBlbmRpbmdJZCB9ID0gc3VzcGVuc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAodGltZW91dCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdJZCA9PT0gcGVuZGluZ0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5mYWxsYmFjayhuZXdGYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRpbWVvdXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5mYWxsYmFjayhuZXdGYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxubGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xyXG5mdW5jdGlvbiBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnQsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyLCBoaWRkZW5Db250YWluZXIsIGFuY2hvciwgaXNTVkcsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGlzSHlkcmF0aW5nID0gZmFsc2UpIHtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZmFsc2UgJiYgIWhhc1dhcm5lZCkge1xyXG4gICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBgY29uc29sZS5pbmZvYCBjYW5ub3QgYmUgbnVsbCBlcnJvclxyXG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKGA8U3VzcGVuc2U+IGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIGFuZCBpdHMgQVBJIHdpbGwgbGlrZWx5IGNoYW5nZS5gKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgcDogcGF0Y2gsIG06IG1vdmUsIHVtOiB1bm1vdW50LCBuOiBuZXh0LCBvOiB7IHBhcmVudE5vZGUsIHJlbW92ZSB9IH0gPSByZW5kZXJlckludGVybmFscztcclxuICAgIGNvbnN0IHRpbWVvdXQgPSB0b051bWJlcih2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50aW1lb3V0KTtcclxuICAgIGNvbnN0IHN1c3BlbnNlID0ge1xyXG4gICAgICAgIHZub2RlLFxyXG4gICAgICAgIHBhcmVudCxcclxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXHJcbiAgICAgICAgaXNTVkcsXHJcbiAgICAgICAgY29udGFpbmVyLFxyXG4gICAgICAgIGhpZGRlbkNvbnRhaW5lcixcclxuICAgICAgICBhbmNob3IsXHJcbiAgICAgICAgZGVwczogMCxcclxuICAgICAgICBwZW5kaW5nSWQ6IDAsXHJcbiAgICAgICAgdGltZW91dDogdHlwZW9mIHRpbWVvdXQgPT09ICdudW1iZXInID8gdGltZW91dCA6IC0xLFxyXG4gICAgICAgIGFjdGl2ZUJyYW5jaDogbnVsbCxcclxuICAgICAgICBwZW5kaW5nQnJhbmNoOiBudWxsLFxyXG4gICAgICAgIGlzSW5GYWxsYmFjazogdHJ1ZSxcclxuICAgICAgICBpc0h5ZHJhdGluZyxcclxuICAgICAgICBpc1VubW91bnRlZDogZmFsc2UsXHJcbiAgICAgICAgZWZmZWN0czogW10sXHJcbiAgICAgICAgcmVzb2x2ZShyZXN1bWUgPSBmYWxzZSkge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VtZSAmJiAhc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCB3aXRob3V0IGEgcGVuZGluZyBicmFuY2guYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UuaXNVbm1vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN1c3BlbnNlLnJlc29sdmUoKSBpcyBjYWxsZWQgb24gYW4gYWxyZWFkeSB1bm1vdW50ZWQgc3VzcGVuc2UgYm91bmRhcnkuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgeyB2bm9kZSwgYWN0aXZlQnJhbmNoLCBwZW5kaW5nQnJhbmNoLCBwZW5kaW5nSWQsIGVmZmVjdHMsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyIH0gPSBzdXNwZW5zZTtcclxuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmlzSHlkcmF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5pc0h5ZHJhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFyZXN1bWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRlbGF5RW50ZXIgPSBhY3RpdmVCcmFuY2ggJiZcclxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nQnJhbmNoLnRyYW5zaXRpb24gJiZcclxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nQnJhbmNoLnRyYW5zaXRpb24ubW9kZSA9PT0gJ291dC1pbic7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVsYXlFbnRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUJyYW5jaC50cmFuc2l0aW9uLmFmdGVyTGVhdmUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nSWQgPT09IHN1c3BlbnNlLnBlbmRpbmdJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZShwZW5kaW5nQnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgMCAvKiBFTlRFUiAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBpbml0aWFsIGFuY2hvciBvbiBtb3VudFxyXG4gICAgICAgICAgICAgICAgbGV0IHsgYW5jaG9yIH0gPSBzdXNwZW5zZTtcclxuICAgICAgICAgICAgICAgIC8vIHVubW91bnQgY3VycmVudCBhY3RpdmUgdHJlZVxyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUJyYW5jaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBmYWxsYmFjayB0cmVlIHdhcyBtb3VudGVkLCBpdCBtYXkgaGF2ZSBiZWVuIG1vdmVkXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXMgcGFydCBvZiBhIHBhcmVudCBzdXNwZW5zZS4gZ2V0IHRoZSBsYXRlc3QgYW5jaG9yIGZvciBpbnNlcnRpb25cclxuICAgICAgICAgICAgICAgICAgICBhbmNob3IgPSBuZXh0KGFjdGl2ZUJyYW5jaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudChhY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFkZWxheUVudGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBjb250ZW50IGZyb20gb2ZmLWRvbSBjb250YWluZXIgdG8gYWN0dWFsIGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgIG1vdmUocGVuZGluZ0JyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIDAgLyogRU5URVIgKi8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgcGVuZGluZ0JyYW5jaCk7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBudWxsO1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5pc0luRmFsbGJhY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gZmx1c2ggYnVmZmVyZWQgZWZmZWN0c1xyXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBhIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlXHJcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSBzdXNwZW5zZS5wYXJlbnQ7XHJcbiAgICAgICAgICAgIGxldCBoYXNVbnJlc29sdmVkQW5jZXN0b3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgd2hpbGUgKHBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5wZW5kaW5nQnJhbmNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZm91bmQgYSBwZW5kaW5nIHBhcmVudCBzdXNwZW5zZSwgbWVyZ2UgYnVmZmVyZWQgcG9zdCBqb2JzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW50byB0aGF0IHBhcmVudFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5lZmZlY3RzLnB1c2goLi4uZWZmZWN0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzVW5yZXNvbHZlZEFuY2VzdG9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbm8gcGVuZGluZyBwYXJlbnQgc3VzcGVuc2UsIGZsdXNoIGFsbCBqb2JzXHJcbiAgICAgICAgICAgIGlmICghaGFzVW5yZXNvbHZlZEFuY2VzdG9yKSB7XHJcbiAgICAgICAgICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGVmZmVjdHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMgPSBbXTtcclxuICAgICAgICAgICAgLy8gaW52b2tlIEByZXNvbHZlIGV2ZW50XHJcbiAgICAgICAgICAgIGNvbnN0IG9uUmVzb2x2ZSA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uUmVzb2x2ZTtcclxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob25SZXNvbHZlKSkge1xyXG4gICAgICAgICAgICAgICAgb25SZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGZhbGxiYWNrKGZhbGxiYWNrVk5vZGUpIHtcclxuICAgICAgICAgICAgaWYgKCFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgeyB2bm9kZSwgYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIGNvbnRhaW5lciwgaXNTVkcgfSA9IHN1c3BlbnNlO1xyXG4gICAgICAgICAgICAvLyBpbnZva2UgQGZhbGxiYWNrIGV2ZW50XHJcbiAgICAgICAgICAgIGNvbnN0IG9uRmFsbGJhY2sgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy5vbkZhbGxiYWNrO1xyXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvbkZhbGxiYWNrKSkge1xyXG4gICAgICAgICAgICAgICAgb25GYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IG5leHQoYWN0aXZlQnJhbmNoKTtcclxuICAgICAgICAgICAgY29uc3QgbW91bnRGYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghc3VzcGVuc2UuaXNJbkZhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gbW91bnQgdGhlIGZhbGxiYWNrIHRyZWVcclxuICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIGZhbGxiYWNrVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XHJcbiAgICAgICAgICAgICAgICBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIGZhbGxiYWNrVk5vZGUpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBkZWxheUVudGVyID0gZmFsbGJhY2tWTm9kZS50cmFuc2l0aW9uICYmIGZhbGxiYWNrVk5vZGUudHJhbnNpdGlvbi5tb2RlID09PSAnb3V0LWluJztcclxuICAgICAgICAgICAgaWYgKGRlbGF5RW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUJyYW5jaC50cmFuc2l0aW9uLmFmdGVyTGVhdmUgPSBtb3VudEZhbGxiYWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHVubW91bnQgY3VycmVudCBhY3RpdmUgYnJhbmNoXHJcbiAgICAgICAgICAgIHVubW91bnQoYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIG5vIHN1c3BlbnNlIHNvIHVubW91bnQgaG9va3MgZmlyZSBub3dcclxuICAgICAgICAgICAgdHJ1ZSAvLyBzaG91bGRSZW1vdmVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgc3VzcGVuc2UuaXNJbkZhbGxiYWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKCFkZWxheUVudGVyKSB7XHJcbiAgICAgICAgICAgICAgICBtb3VudEZhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vdmUoY29udGFpbmVyLCBhbmNob3IsIHR5cGUpIHtcclxuICAgICAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoICYmXHJcbiAgICAgICAgICAgICAgICBtb3ZlKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIHR5cGUpO1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBuZXh0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3VzcGVuc2UuYWN0aXZlQnJhbmNoICYmIG5leHQoc3VzcGVuc2UuYWN0aXZlQnJhbmNoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCkge1xyXG4gICAgICAgICAgICBpZiAoIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBoeWRyYXRlZEVsID0gaW5zdGFuY2Uudm5vZGUuZWw7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmRlcHMrKztcclxuICAgICAgICAgICAgaW5zdGFuY2VcclxuICAgICAgICAgICAgICAgIC5hc3luY0RlcC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMCAvKiBTRVRVUF9GVU5DVElPTiAqLyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihhc3luY1NldHVwUmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIHJldHJ5IHdoZW4gdGhlIHNldHVwKCkgcHJvbWlzZSByZXNvbHZlcy5cclxuICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgaGF2ZSBiZWVuIHVubW91bnRlZCBiZWZvcmUgcmVzb2x2ZS5cclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5pc1VubW91bnRlZCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzVW5tb3VudGVkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkICE9PSBpbnN0YW5jZS5zdXNwZW5zZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UuZGVwcy0tO1xyXG4gICAgICAgICAgICAgICAgLy8gcmV0cnkgZnJvbSB0aGlzIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHZub2RlIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQodm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIGFzeW5jU2V0dXBSZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGh5ZHJhdGVkRWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB2bm9kZSBtYXkgaGF2ZSBiZWVuIHJlcGxhY2VkIGlmIGFuIHVwZGF0ZSBoYXBwZW5lZCBiZWZvcmUgdGhlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXN5bmMgZGVwIGlzIHJlc29sdmVkLlxyXG4gICAgICAgICAgICAgICAgICAgIHZub2RlLmVsID0gaHlkcmF0ZWRFbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gIWh5ZHJhdGVkRWwgJiYgaW5zdGFuY2Uuc3ViVHJlZS5lbDtcclxuICAgICAgICAgICAgICAgIHNldHVwUmVuZGVyRWZmZWN0KGluc3RhbmNlLCB2bm9kZSwgXHJcbiAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgbWF5IGhhdmUgYmVlbiBtb3ZlZCBiZWZvcmUgcmVzb2x2ZS5cclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgbm90IGEgaHlkcmF0aW9uLCBpbnN0YW5jZS5zdWJUcmVlIHdpbGwgYmUgdGhlIGNvbW1lbnRcclxuICAgICAgICAgICAgICAgIC8vIHBsYWNlaG9sZGVyLlxyXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZShoeWRyYXRlZEVsIHx8IGluc3RhbmNlLnN1YlRyZWUuZWwpLCBcclxuICAgICAgICAgICAgICAgIC8vIGFuY2hvciB3aWxsIG5vdCBiZSB1c2VkIGlmIHRoaXMgaXMgaHlkcmF0aW9uLCBzbyBvbmx5IG5lZWQgdG9cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNpZGVyIHRoZSBjb21tZW50IHBsYWNlaG9sZGVyIGNhc2UuXHJcbiAgICAgICAgICAgICAgICBoeWRyYXRlZEVsID8gbnVsbCA6IG5leHQoaW5zdGFuY2Uuc3ViVHJlZSksIHN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZShwbGFjZWhvbGRlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVIT0NIb3N0RWwoaW5zdGFuY2UsIHZub2RlLmVsKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdW5tb3VudChwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgc3VzcGVuc2UuaXNVbm1vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UuYWN0aXZlQnJhbmNoKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KHN1c3BlbnNlLnBlbmRpbmdCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gc3VzcGVuc2U7XHJcbn1cclxuZnVuY3Rpb24gaHlkcmF0ZVN1c3BlbnNlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaHlkcmF0ZU5vZGUpIHtcclxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xyXG4gICAgY29uc3Qgc3VzcGVuc2UgPSAodm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBub2RlLnBhcmVudE5vZGUsIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBudWxsLCBpc1NWRywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pKTtcclxuICAgIC8vIHRoZXJlIGFyZSB0d28gcG9zc2libGUgc2NlbmFyaW9zIGZvciBzZXJ2ZXItcmVuZGVyZWQgc3VzcGVuc2U6XHJcbiAgICAvLyAtIHN1Y2Nlc3M6IHNzciBjb250ZW50IHNob3VsZCBiZSBmdWxseSByZXNvbHZlZFxyXG4gICAgLy8gLSBmYWlsdXJlOiBzc3IgY29udGVudCBzaG91bGQgYmUgdGhlIGZhbGxiYWNrIGJyYW5jaC5cclxuICAgIC8vIGhvd2V2ZXIsIG9uIHRoZSBjbGllbnQgd2UgZG9uJ3QgcmVhbGx5IGtub3cgaWYgaXQgaGFzIGZhaWxlZCBvciBub3RcclxuICAgIC8vIGF0dGVtcHQgdG8gaHlkcmF0ZSB0aGUgRE9NIGFzc3VtaW5nIGl0IGhhcyBzdWNjZWVkZWQsIGJ1dCB3ZSBzdGlsbFxyXG4gICAgLy8gbmVlZCB0byBjb25zdHJ1Y3QgYSBzdXNwZW5zZSBib3VuZGFyeSBmaXJzdFxyXG4gICAgY29uc3QgcmVzdWx0ID0gaHlkcmF0ZU5vZGUobm9kZSwgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSB2bm9kZS5zc0NvbnRlbnQpLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBvcHRpbWl6ZWQpO1xyXG4gICAgaWYgKHN1c3BlbnNlLmRlcHMgPT09IDApIHtcclxuICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVTdXNwZW5zZUNoaWxkcmVuKHZub2RlKSB7XHJcbiAgICBjb25zdCB7IHNoYXBlRmxhZywgY2hpbGRyZW4gfSA9IHZub2RlO1xyXG4gICAgbGV0IGNvbnRlbnQ7XHJcbiAgICBsZXQgZmFsbGJhY2s7XHJcbiAgICBpZiAoc2hhcGVGbGFnICYgMzIgLyogU0xPVFNfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICBjb250ZW50ID0gbm9ybWFsaXplU3VzcGVuc2VTbG90KGNoaWxkcmVuLmRlZmF1bHQpO1xyXG4gICAgICAgIGZhbGxiYWNrID0gbm9ybWFsaXplU3VzcGVuc2VTbG90KGNoaWxkcmVuLmZhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnRlbnQgPSBub3JtYWxpemVTdXNwZW5zZVNsb3QoY2hpbGRyZW4pO1xyXG4gICAgICAgIGZhbGxiYWNrID0gbm9ybWFsaXplVk5vZGUobnVsbCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgZmFsbGJhY2tcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplU3VzcGVuc2VTbG90KHMpIHtcclxuICAgIGlmIChpc0Z1bmN0aW9uKHMpKSB7XHJcbiAgICAgICAgcyA9IHMoKTtcclxuICAgIH1cclxuICAgIGlmIChpc0FycmF5KHMpKSB7XHJcbiAgICAgICAgY29uc3Qgc2luZ2xlQ2hpbGQgPSBmaWx0ZXJTaW5nbGVSb290KHMpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXNpbmdsZUNoaWxkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYDxTdXNwZW5zZT4gc2xvdHMgZXhwZWN0IGEgc2luZ2xlIHJvb3Qgbm9kZS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcyA9IHNpbmdsZUNoaWxkO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vcm1hbGl6ZVZOb2RlKHMpO1xyXG59XHJcbmZ1bmN0aW9uIHF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlKGZuLCBzdXNwZW5zZSkge1xyXG4gICAgaWYgKHN1c3BlbnNlICYmIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICBpZiAoaXNBcnJheShmbikpIHtcclxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cy5wdXNoKC4uLmZuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaChmbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcXVldWVQb3N0Rmx1c2hDYihmbik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBicmFuY2gpIHtcclxuICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCA9IGJyYW5jaDtcclxuICAgIGNvbnN0IHsgdm5vZGUsIHBhcmVudENvbXBvbmVudCB9ID0gc3VzcGVuc2U7XHJcbiAgICBjb25zdCBlbCA9ICh2bm9kZS5lbCA9IGJyYW5jaC5lbCk7XHJcbiAgICAvLyBpbiBjYXNlIHN1c3BlbnNlIGlzIHRoZSByb290IG5vZGUgb2YgYSBjb21wb25lbnQsXHJcbiAgICAvLyByZWN1cnNpdmVseSB1cGRhdGUgdGhlIEhPQyBlbFxyXG4gICAgaWYgKHBhcmVudENvbXBvbmVudCAmJiBwYXJlbnRDb21wb25lbnQuc3ViVHJlZSA9PT0gdm5vZGUpIHtcclxuICAgICAgICBwYXJlbnRDb21wb25lbnQudm5vZGUuZWwgPSBlbDtcclxuICAgICAgICB1cGRhdGVIT0NIb3N0RWwocGFyZW50Q29tcG9uZW50LCBlbCk7XHJcbiAgICB9XHJcbn1cblxubGV0IGlzUmVuZGVyaW5nQ29tcGlsZWRTbG90ID0gMDtcclxuY29uc3Qgc2V0Q29tcGlsZWRTbG90UmVuZGVyaW5nID0gKG4pID0+IChpc1JlbmRlcmluZ0NvbXBpbGVkU2xvdCArPSBuKTtcclxuLyoqXHJcbiAqIENvbXBpbGVyIHJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgYDxzbG90Lz5gXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiByZW5kZXJTbG90KHNsb3RzLCBuYW1lLCBwcm9wcyA9IHt9LCBcclxuLy8gdGhpcyBpcyBub3QgYSB1c2VyLWZhY2luZyBmdW5jdGlvbiwgc28gdGhlIGZhbGxiYWNrIGlzIGFsd2F5cyBnZW5lcmF0ZWQgYnlcclxuLy8gdGhlIGNvbXBpbGVyIGFuZCBndWFyYW50ZWVkIHRvIGJlIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGFuIGFycmF5XHJcbmZhbGxiYWNrKSB7XHJcbiAgICBsZXQgc2xvdCA9IHNsb3RzW25hbWVdO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzbG90ICYmIHNsb3QubGVuZ3RoID4gMSkge1xyXG4gICAgICAgIHdhcm4oYFNTUi1vcHRpbWl6ZWQgc2xvdCBmdW5jdGlvbiBkZXRlY3RlZCBpbiBhIG5vbi1TU1Itb3B0aW1pemVkIHJlbmRlciBgICtcclxuICAgICAgICAgICAgYGZ1bmN0aW9uLiBZb3UgbmVlZCB0byBtYXJrIHRoaXMgY29tcG9uZW50IHdpdGggJGR5bmFtaWMtc2xvdHMgaW4gdGhlIGAgK1xyXG4gICAgICAgICAgICBgcGFyZW50IHRlbXBsYXRlLmApO1xyXG4gICAgICAgIHNsb3QgPSAoKSA9PiBbXTtcclxuICAgIH1cclxuICAgIC8vIGEgY29tcGlsZWQgc2xvdCBkaXNhYmxlcyBibG9jayB0cmFja2luZyBieSBkZWZhdWx0IHRvIGF2b2lkIG1hbnVhbFxyXG4gICAgLy8gaW52b2NhdGlvbiBpbnRlcmZlcmluZyB3aXRoIHRlbXBsYXRlLWJhc2VkIGJsb2NrIHRyYWNraW5nLCBidXQgaW5cclxuICAgIC8vIGByZW5kZXJTbG90YCB3ZSBjYW4gYmUgc3VyZSB0aGF0IGl0J3MgdGVtcGxhdGUtYmFzZWQgc28gd2UgY2FuIGZvcmNlXHJcbiAgICAvLyBlbmFibGUgaXQuXHJcbiAgICBpc1JlbmRlcmluZ0NvbXBpbGVkU2xvdCsrO1xyXG4gICAgY29uc3QgcmVuZGVyZWQgPSAob3BlbkJsb2NrKCksXHJcbiAgICAgICAgY3JlYXRlQmxvY2soRnJhZ21lbnQsIHsga2V5OiBwcm9wcy5rZXkgfSwgc2xvdCA/IHNsb3QocHJvcHMpIDogZmFsbGJhY2sgPyBmYWxsYmFjaygpIDogW10sIHNsb3RzLl8gPT09IDEgLyogU1RBQkxFICovXHJcbiAgICAgICAgICAgID8gNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovXHJcbiAgICAgICAgICAgIDogLTIgLyogQkFJTCAqLykpO1xyXG4gICAgaXNSZW5kZXJpbmdDb21waWxlZFNsb3QtLTtcclxuICAgIHJldHVybiByZW5kZXJlZDtcclxufVxuXG4vKipcclxuICogV3JhcCBhIHNsb3QgZnVuY3Rpb24gdG8gbWVtb2l6ZSBjdXJyZW50IHJlbmRlcmluZyBpbnN0YW5jZVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gd2l0aEN0eChmbiwgY3R4ID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKSB7XHJcbiAgICBpZiAoIWN0eClcclxuICAgICAgICByZXR1cm4gZm47XHJcbiAgICBjb25zdCByZW5kZXJGbldpdGhDb250ZXh0ID0gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICAvLyBJZiBhIHVzZXIgY2FsbHMgYSBjb21waWxlZCBzbG90IGluc2lkZSBhIHRlbXBsYXRlIGV4cHJlc3Npb24gKCMxNzQ1KSwgaXRcclxuICAgICAgICAvLyBjYW4gbWVzcyB1cCBibG9jayB0cmFja2luZywgc28gYnkgZGVmYXVsdCB3ZSBuZWVkIHRvIHB1c2ggYSBudWxsIGJsb2NrIHRvXHJcbiAgICAgICAgLy8gYXZvaWQgdGhhdC4gVGhpcyBpc24ndCBuZWNlc3NhcnkgaWYgcmVuZGVyaW5nIGEgY29tcGlsZWQgYDxzbG90PmAuXHJcbiAgICAgICAgaWYgKCFpc1JlbmRlcmluZ0NvbXBpbGVkU2xvdCkge1xyXG4gICAgICAgICAgICBvcGVuQmxvY2sodHJ1ZSAvKiBudWxsIGJsb2NrIHRoYXQgZGlzYWJsZXMgdHJhY2tpbmcgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcclxuICAgICAgICBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoY3R4KTtcclxuICAgICAgICBjb25zdCByZXMgPSBmbiguLi5hcmdzKTtcclxuICAgICAgICBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2Uob3duZXIpO1xyXG4gICAgICAgIGlmICghaXNSZW5kZXJpbmdDb21waWxlZFNsb3QpIHtcclxuICAgICAgICAgICAgY2xvc2VCbG9jaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuICAgIHJlbmRlckZuV2l0aENvbnRleHQuX2MgPSB0cnVlO1xyXG4gICAgcmV0dXJuIHJlbmRlckZuV2l0aENvbnRleHQ7XHJcbn1cblxuLy8gU0ZDIHNjb3BlZCBzdHlsZSBJRCBtYW5hZ2VtZW50LlxyXG5sZXQgY3VycmVudFNjb3BlSWQgPSBudWxsO1xyXG5jb25zdCBzY29wZUlkU3RhY2sgPSBbXTtcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBwdXNoU2NvcGVJZChpZCkge1xyXG4gICAgc2NvcGVJZFN0YWNrLnB1c2goKGN1cnJlbnRTY29wZUlkID0gaWQpKTtcclxufVxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHBvcFNjb3BlSWQoKSB7XHJcbiAgICBzY29wZUlkU3RhY2sucG9wKCk7XHJcbiAgICBjdXJyZW50U2NvcGVJZCA9IHNjb3BlSWRTdGFja1tzY29wZUlkU3RhY2subGVuZ3RoIC0gMV0gfHwgbnVsbDtcclxufVxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHdpdGhTY29wZUlkKGlkKSB7XHJcbiAgICByZXR1cm4gKChmbikgPT4gd2l0aEN0eChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcHVzaFNjb3BlSWQoaWQpO1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgcG9wU2NvcGVJZCgpO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9KSk7XHJcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgaXNTdGF0ZWZ1bCwgLy8gcmVzdWx0IG9mIGJpdHdpc2UgZmxhZyBjb21wYXJpc29uXHJcbmlzU1NSID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IHByb3BzID0ge307XHJcbiAgICBjb25zdCBhdHRycyA9IHt9O1xyXG4gICAgZGVmKGF0dHJzLCBJbnRlcm5hbE9iamVjdEtleSwgMSk7XHJcbiAgICBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpO1xyXG4gICAgLy8gdmFsaWRhdGlvblxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHZhbGlkYXRlUHJvcHMocHJvcHMsIGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIGlmIChpc1N0YXRlZnVsKSB7XHJcbiAgICAgICAgLy8gc3RhdGVmdWxcclxuICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IGlzU1NSID8gcHJvcHMgOiBzaGFsbG93UmVhY3RpdmUocHJvcHMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZS50eXBlLnByb3BzKSB7XHJcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uYWwgdy8gb3B0aW9uYWwgcHJvcHMsIHByb3BzID09PSBhdHRyc1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IGF0dHJzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZnVuY3Rpb25hbCB3LyBkZWNsYXJlZCBwcm9wc1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IHByb3BzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGluc3RhbmNlLmF0dHJzID0gYXR0cnM7XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCByYXdQcmV2UHJvcHMsIG9wdGltaXplZCkge1xyXG4gICAgY29uc3QgeyBwcm9wcywgYXR0cnMsIHZub2RlOiB7IHBhdGNoRmxhZyB9IH0gPSBpbnN0YW5jZTtcclxuICAgIGNvbnN0IHJhd0N1cnJlbnRQcm9wcyA9IHRvUmF3KHByb3BzKTtcclxuICAgIGNvbnN0IFtvcHRpb25zXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcclxuICAgIGlmIChcclxuICAgIC8vIGFsd2F5cyBmb3JjZSBmdWxsIGRpZmYgaW4gZGV2XHJcbiAgICAvLyAtICMxOTQyIGlmIGhtciBpcyBlbmFibGVkIHdpdGggc2ZjIGNvbXBvbmVudFxyXG4gICAgLy8gLSB2aXRlIzg3MiBub24tc2ZjIGNvbXBvbmVudCB1c2VkIGJ5IHNmYyBjb21wb25lbnRcclxuICAgICEoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgKGluc3RhbmNlLnR5cGUuX19obXJJZCB8fFxyXG4gICAgICAgICAgICAoaW5zdGFuY2UucGFyZW50ICYmIGluc3RhbmNlLnBhcmVudC50eXBlLl9faG1ySWQpKSkgJiZcclxuICAgICAgICAob3B0aW1pemVkIHx8IHBhdGNoRmxhZyA+IDApICYmXHJcbiAgICAgICAgIShwYXRjaEZsYWcgJiAxNiAvKiBGVUxMX1BST1BTICovKSkge1xyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBST1BTICovKSB7XHJcbiAgICAgICAgICAgIC8vIENvbXBpbGVyLWdlbmVyYXRlZCBwcm9wcyAmIG5vIGtleXMgY2hhbmdlLCBqdXN0IHNldCB0aGUgdXBkYXRlZFxyXG4gICAgICAgICAgICAvLyB0aGUgcHJvcHMuXHJcbiAgICAgICAgICAgIGNvbnN0IHByb3BzVG9VcGRhdGUgPSBpbnN0YW5jZS52bm9kZS5keW5hbWljUHJvcHM7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHNUb1VwZGF0ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gcHJvcHNUb1VwZGF0ZVtpXTtcclxuICAgICAgICAgICAgICAgIC8vIFBST1BTIGZsYWcgZ3VhcmFudGVlcyByYXdQcm9wcyB0byBiZSBub24tbnVsbFxyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByYXdQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBhdHRyIC8gcHJvcHMgc2VwYXJhdGlvbiB3YXMgZG9uZSBvbiBpbml0IGFuZCB3aWxsIGJlIGNvbnNpc3RlbnRcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbiB0aGlzIGNvZGUgcGF0aCwgc28ganVzdCBjaGVjayBpZiBhdHRycyBoYXZlIGl0LlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd24oYXR0cnMsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNbY2FtZWxpemVkS2V5XSA9IHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcmF3Q3VycmVudFByb3BzLCBjYW1lbGl6ZWRLZXksIHZhbHVlLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gZnVsbCBwcm9wcyB1cGRhdGUuXHJcbiAgICAgICAgc2V0RnVsbFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcHJvcHMsIGF0dHJzKTtcclxuICAgICAgICAvLyBpbiBjYXNlIG9mIGR5bmFtaWMgcHJvcHMsIGNoZWNrIGlmIHdlIG5lZWQgdG8gZGVsZXRlIGtleXMgZnJvbVxyXG4gICAgICAgIC8vIHRoZSBwcm9wcyBvYmplY3RcclxuICAgICAgICBsZXQga2ViYWJLZXk7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmF3Q3VycmVudFByb3BzKSB7XHJcbiAgICAgICAgICAgIGlmICghcmF3UHJvcHMgfHxcclxuICAgICAgICAgICAgICAgIC8vIGZvciBjYW1lbENhc2VcclxuICAgICAgICAgICAgICAgICghaGFzT3duKHJhd1Byb3BzLCBrZXkpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGUgb3JpZ2luYWwgcHJvcHMgd2FzIHBhc3NlZCBpbiBhcyBrZWJhYi1jYXNlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGNvbnZlcnRlZCB0byBjYW1lbENhc2UgKCM5NTUpXHJcbiAgICAgICAgICAgICAgICAgICAgKChrZWJhYktleSA9IGh5cGhlbmF0ZShrZXkpKSA9PT0ga2V5IHx8ICFoYXNPd24ocmF3UHJvcHMsIGtlYmFiS2V5KSkpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdQcmV2UHJvcHMgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGNhbWVsQ2FzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocmF3UHJldlByb3BzW2tleV0gIT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGtlYmFiLWNhc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd1ByZXZQcm9wc1trZWJhYktleV0gIT09IHVuZGVmaW5lZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNba2V5XSA9IHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcmF3UHJvcHMgfHwgRU1QVFlfT0JKLCBrZXksIHVuZGVmaW5lZCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGluIHRoZSBjYXNlIG9mIGZ1bmN0aW9uYWwgY29tcG9uZW50IHcvbyBwcm9wcyBkZWNsYXJhdGlvbiwgcHJvcHMgYW5kXHJcbiAgICAgICAgLy8gYXR0cnMgcG9pbnQgdG8gdGhlIHNhbWUgb2JqZWN0IHNvIGl0IHNob3VsZCBhbHJlYWR5IGhhdmUgYmVlbiB1cGRhdGVkLlxyXG4gICAgICAgIGlmIChhdHRycyAhPT0gcmF3Q3VycmVudFByb3BzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJhd1Byb3BzIHx8ICFoYXNPd24ocmF3UHJvcHMsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXR0cnNba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHRyaWdnZXIgdXBkYXRlcyBmb3IgJGF0dHJzIGluIGNhc2UgaXQncyB1c2VkIGluIGNvbXBvbmVudCBzbG90c1xyXG4gICAgdHJpZ2dlcihpbnN0YW5jZSwgXCJzZXRcIiAvKiBTRVQgKi8sICckYXR0cnMnKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcmF3UHJvcHMpIHtcclxuICAgICAgICB2YWxpZGF0ZVByb3BzKHByb3BzLCBpbnN0YW5jZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gc2V0RnVsbFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcHJvcHMsIGF0dHJzKSB7XHJcbiAgICBjb25zdCBbb3B0aW9ucywgbmVlZENhc3RLZXlzXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcclxuICAgIGlmIChyYXdQcm9wcykge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJhd1Byb3BzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmF3UHJvcHNba2V5XTtcclxuICAgICAgICAgICAgLy8ga2V5LCByZWYgYXJlIHJlc2VydmVkIGFuZCBuZXZlciBwYXNzZWQgZG93blxyXG4gICAgICAgICAgICBpZiAoaXNSZXNlcnZlZFByb3Aoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcHJvcCBvcHRpb24gbmFtZXMgYXJlIGNhbWVsaXplZCBkdXJpbmcgbm9ybWFsaXphdGlvbiwgc28gdG8gc3VwcG9ydFxyXG4gICAgICAgICAgICAvLyBrZWJhYiAtPiBjYW1lbCBjb252ZXJzaW9uIGhlcmUgd2UgbmVlZCB0byBjYW1lbGl6ZSB0aGUga2V5LlxyXG4gICAgICAgICAgICBsZXQgY2FtZWxLZXk7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zICYmIGhhc093bihvcHRpb25zLCAoY2FtZWxLZXkgPSBjYW1lbGl6ZShrZXkpKSkpIHtcclxuICAgICAgICAgICAgICAgIHByb3BzW2NhbWVsS2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc0VtaXRMaXN0ZW5lcihpbnN0YW5jZS5lbWl0c09wdGlvbnMsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIEFueSBub24tZGVjbGFyZWQgKGVpdGhlciBhcyBhIHByb3Agb3IgYW4gZW1pdHRlZCBldmVudCkgcHJvcHMgYXJlIHB1dFxyXG4gICAgICAgICAgICAgICAgLy8gaW50byBhIHNlcGFyYXRlIGBhdHRyc2Agb2JqZWN0IGZvciBzcHJlYWRpbmcuIE1ha2Ugc3VyZSB0byBwcmVzZXJ2ZVxyXG4gICAgICAgICAgICAgICAgLy8gb3JpZ2luYWwga2V5IGNhc2luZ1xyXG4gICAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKG5lZWRDYXN0S2V5cykge1xyXG4gICAgICAgIGNvbnN0IHJhd0N1cnJlbnRQcm9wcyA9IHRvUmF3KHByb3BzKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5lZWRDYXN0S2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBuZWVkQ2FzdEtleXNbaV07XHJcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHJhd0N1cnJlbnRQcm9wcywga2V5LCByYXdDdXJyZW50UHJvcHNba2V5XSwgaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHByb3BzLCBrZXksIHZhbHVlLCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3Qgb3B0ID0gb3B0aW9uc1trZXldO1xyXG4gICAgaWYgKG9wdCAhPSBudWxsKSB7XHJcbiAgICAgICAgY29uc3QgaGFzRGVmYXVsdCA9IGhhc093bihvcHQsICdkZWZhdWx0Jyk7XHJcbiAgICAgICAgLy8gZGVmYXVsdCB2YWx1ZXNcclxuICAgICAgICBpZiAoaGFzRGVmYXVsdCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IG9wdC5kZWZhdWx0O1xyXG4gICAgICAgICAgICBpZiAob3B0LnR5cGUgIT09IEZ1bmN0aW9uICYmIGlzRnVuY3Rpb24oZGVmYXVsdFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlKHByb3BzKTtcclxuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGJvb2xlYW4gY2FzdGluZ1xyXG4gICAgICAgIGlmIChvcHRbMCAvKiBzaG91bGRDYXN0ICovXSkge1xyXG4gICAgICAgICAgICBpZiAoIWhhc093bihwcm9wcywga2V5KSAmJiAhaGFzRGVmYXVsdCkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChvcHRbMSAvKiBzaG91bGRDYXN0VHJ1ZSAqL10gJiZcclxuICAgICAgICAgICAgICAgICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzT3B0aW9ucyhjb21wLCBhcHBDb250ZXh0LCBhc01peGluID0gZmFsc2UpIHtcclxuICAgIGlmICghYXBwQ29udGV4dC5kZW9wdCAmJiBjb21wLl9fcHJvcHMpIHtcclxuICAgICAgICByZXR1cm4gY29tcC5fX3Byb3BzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmF3ID0gY29tcC5wcm9wcztcclxuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSB7fTtcclxuICAgIGNvbnN0IG5lZWRDYXN0S2V5cyA9IFtdO1xyXG4gICAgLy8gYXBwbHkgbWl4aW4vZXh0ZW5kcyBwcm9wc1xyXG4gICAgbGV0IGhhc0V4dGVuZHMgPSBmYWxzZTtcclxuICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fICYmICFpc0Z1bmN0aW9uKGNvbXApKSB7XHJcbiAgICAgICAgY29uc3QgZXh0ZW5kUHJvcHMgPSAocmF3KSA9PiB7XHJcbiAgICAgICAgICAgIGhhc0V4dGVuZHMgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBbcHJvcHMsIGtleXNdID0gbm9ybWFsaXplUHJvcHNPcHRpb25zKHJhdywgYXBwQ29udGV4dCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGV4dGVuZChub3JtYWxpemVkLCBwcm9wcyk7XHJcbiAgICAgICAgICAgIGlmIChrZXlzKVxyXG4gICAgICAgICAgICAgICAgbmVlZENhc3RLZXlzLnB1c2goLi4ua2V5cyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoIWFzTWl4aW4gJiYgYXBwQ29udGV4dC5taXhpbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGFwcENvbnRleHQubWl4aW5zLmZvckVhY2goZXh0ZW5kUHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29tcC5leHRlbmRzKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZFByb3BzKGNvbXAuZXh0ZW5kcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb21wLm1peGlucykge1xyXG4gICAgICAgICAgICBjb21wLm1peGlucy5mb3JFYWNoKGV4dGVuZFByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIXJhdyAmJiAhaGFzRXh0ZW5kcykge1xyXG4gICAgICAgIHJldHVybiAoY29tcC5fX3Byb3BzID0gRU1QVFlfQVJSKTtcclxuICAgIH1cclxuICAgIGlmIChpc0FycmF5KHJhdykpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhdy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1N0cmluZyhyYXdbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguYCwgcmF3W2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gY2FtZWxpemUocmF3W2ldKTtcclxuICAgICAgICAgICAgaWYgKHZhbGlkYXRlUHJvcE5hbWUobm9ybWFsaXplZEtleSkpIHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRbbm9ybWFsaXplZEtleV0gPSBFTVBUWV9PQko7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChyYXcpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc09iamVjdChyYXcpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYGludmFsaWQgcHJvcHMgb3B0aW9uc2AsIHJhdyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJhdykge1xyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcclxuICAgICAgICAgICAgaWYgKHZhbGlkYXRlUHJvcE5hbWUobm9ybWFsaXplZEtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdCA9IHJhd1trZXldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcCA9IChub3JtYWxpemVkW25vcm1hbGl6ZWRLZXldID1cclxuICAgICAgICAgICAgICAgICAgICBpc0FycmF5KG9wdCkgfHwgaXNGdW5jdGlvbihvcHQpID8geyB0eXBlOiBvcHQgfSA6IG9wdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wWzAgLyogc2hvdWxkQ2FzdCAqL10gPSBib29sZWFuSW5kZXggPiAtMTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wWzEgLyogc2hvdWxkQ2FzdFRydWUgKi9dID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwcm9wIG5lZWRzIGJvb2xlYW4gY2FzdGluZyBvciBkZWZhdWx0IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvb2xlYW5JbmRleCA+IC0xIHx8IGhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRDYXN0S2V5cy5wdXNoKG5vcm1hbGl6ZWRLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAoY29tcC5fX3Byb3BzID0gW25vcm1hbGl6ZWQsIG5lZWRDYXN0S2V5c10pO1xyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcE5hbWUoa2V5KSB7XHJcbiAgICBpZiAoa2V5WzBdICE9PSAnJCcpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHdhcm4oYEludmFsaWQgcHJvcCBuYW1lOiBcIiR7a2V5fVwiIGlzIGEgcmVzZXJ2ZWQgcHJvcGVydHkuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuLy8gdXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIHR5cGUgY29uc3RydWN0b3JzXHJcbi8vIHNvIHRoYXQgaXQgd29ya3MgYWNyb3NzIHZtcyAvIGlmcmFtZXMuXHJcbmZ1bmN0aW9uIGdldFR5cGUoY3Rvcikge1xyXG4gICAgY29uc3QgbWF0Y2ggPSBjdG9yICYmIGN0b3IudG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtcclxuICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJyc7XHJcbn1cclxuZnVuY3Rpb24gaXNTYW1lVHlwZShhLCBiKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKTtcclxufVxyXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXgodHlwZSwgZXhwZWN0ZWRUeXBlcykge1xyXG4gICAgaWYgKGlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKGV4cGVjdGVkVHlwZXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gLTE7XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BzKHByb3BzLCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgcmF3VmFsdWVzID0gdG9SYXcocHJvcHMpO1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IGluc3RhbmNlLnByb3BzT3B0aW9uc1swXTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcclxuICAgICAgICBsZXQgb3B0ID0gb3B0aW9uc1trZXldO1xyXG4gICAgICAgIGlmIChvcHQgPT0gbnVsbClcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgdmFsaWRhdGVQcm9wKGtleSwgcmF3VmFsdWVzW2tleV0sIG9wdCwgIWhhc093bihyYXdWYWx1ZXMsIGtleSkpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wKG5hbWUsIHZhbHVlLCBwcm9wLCBpc0Fic2VudCkge1xyXG4gICAgY29uc3QgeyB0eXBlLCByZXF1aXJlZCwgdmFsaWRhdG9yIH0gPSBwcm9wO1xyXG4gICAgLy8gcmVxdWlyZWQhXHJcbiAgICBpZiAocmVxdWlyZWQgJiYgaXNBYnNlbnQpIHtcclxuICAgICAgICB3YXJuKCdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBtaXNzaW5nIGJ1dCBvcHRpb25hbFxyXG4gICAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyB0eXBlIGNoZWNrXHJcbiAgICBpZiAodHlwZSAhPSBudWxsICYmIHR5cGUgIT09IHRydWUpIHtcclxuICAgICAgICBsZXQgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IHR5cGVzID0gaXNBcnJheSh0eXBlKSA/IHR5cGUgOiBbdHlwZV07XHJcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRUeXBlcyA9IFtdO1xyXG4gICAgICAgIC8vIHZhbHVlIGlzIHZhbGlkIGFzIGxvbmcgYXMgb25lIG9mIHRoZSBzcGVjaWZpZWQgdHlwZXMgbWF0Y2hcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aCAmJiAhaXNWYWxpZDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdmFsaWQsIGV4cGVjdGVkVHlwZSB9ID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZXNbaV0pO1xyXG4gICAgICAgICAgICBleHBlY3RlZFR5cGVzLnB1c2goZXhwZWN0ZWRUeXBlIHx8ICcnKTtcclxuICAgICAgICAgICAgaXNWYWxpZCA9IHZhbGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzVmFsaWQpIHtcclxuICAgICAgICAgICAgd2FybihnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGN1c3RvbSB2YWxpZGF0b3JcclxuICAgIGlmICh2YWxpZGF0b3IgJiYgIXZhbGlkYXRvcih2YWx1ZSkpIHtcclxuICAgICAgICB3YXJuKCdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyk7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgaXNTaW1wbGVUeXBlID0gLyojX19QVVJFX18qLyBtYWtlTWFwKCdTdHJpbmcsTnVtYmVyLEJvb2xlYW4sRnVuY3Rpb24sU3ltYm9sJyk7XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKi9cclxuZnVuY3Rpb24gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZSkge1xyXG4gICAgbGV0IHZhbGlkO1xyXG4gICAgY29uc3QgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcclxuICAgIGlmIChpc1NpbXBsZVR5cGUoZXhwZWN0ZWRUeXBlKSkge1xyXG4gICAgICAgIGNvbnN0IHQgPSB0eXBlb2YgdmFsdWU7XHJcbiAgICAgICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAvLyBmb3IgcHJpbWl0aXZlIHdyYXBwZXIgb2JqZWN0c1xyXG4gICAgICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xyXG4gICAgICAgIHZhbGlkID0gaXNPYmplY3QodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XHJcbiAgICAgICAgdmFsaWQgPSBpc0FycmF5KHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB2YWxpZCxcclxuICAgICAgICBleHBlY3RlZFR5cGVcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcclxuICAgIGxldCBtZXNzYWdlID0gYEludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCIke25hbWV9XCIuYCArXHJcbiAgICAgICAgYCBFeHBlY3RlZCAke2V4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oJywgJyl9YDtcclxuICAgIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XHJcbiAgICBjb25zdCByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xyXG4gICAgY29uc3QgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XHJcbiAgICBjb25zdCByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcclxuICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxyXG4gICAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXHJcbiAgICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcclxuICAgICAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xyXG4gICAgICAgIG1lc3NhZ2UgKz0gYCB3aXRoIHZhbHVlICR7ZXhwZWN0ZWRWYWx1ZX1gO1xyXG4gICAgfVxyXG4gICAgbWVzc2FnZSArPSBgLCBnb3QgJHtyZWNlaXZlZFR5cGV9IGA7XHJcbiAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgcmVjZWl2ZWQgdmFsdWVcclxuICAgIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xyXG4gICAgICAgIG1lc3NhZ2UgKz0gYHdpdGggdmFsdWUgJHtyZWNlaXZlZFZhbHVlfS5gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1lc3NhZ2U7XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiBzdHlsZVZhbHVlKHZhbHVlLCB0eXBlKSB7XHJcbiAgICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gYFwiJHt2YWx1ZX1cImA7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xyXG4gICAgICAgIHJldHVybiBgJHtOdW1iZXIodmFsdWUpfWA7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYCR7dmFsdWV9YDtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSh0eXBlKSB7XHJcbiAgICBjb25zdCBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcclxuICAgIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoZWxlbSA9PiB0eXBlLnRvTG93ZXJDYXNlKCkgPT09IGVsZW0pO1xyXG59XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKi9cclxuZnVuY3Rpb24gaXNCb29sZWFuKC4uLmFyZ3MpIHtcclxuICAgIHJldHVybiBhcmdzLnNvbWUoZWxlbSA9PiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJyk7XHJcbn1cblxuZnVuY3Rpb24gaW5qZWN0SG9vayh0eXBlLCBob29rLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UsIHByZXBlbmQgPSBmYWxzZSkge1xyXG4gICAgaWYgKHRhcmdldCkge1xyXG4gICAgICAgIGNvbnN0IGhvb2tzID0gdGFyZ2V0W3R5cGVdIHx8ICh0YXJnZXRbdHlwZV0gPSBbXSk7XHJcbiAgICAgICAgLy8gY2FjaGUgdGhlIGVycm9yIGhhbmRsaW5nIHdyYXBwZXIgZm9yIGluamVjdGVkIGhvb2tzIHNvIHRoZSBzYW1lIGhvb2tcclxuICAgICAgICAvLyBjYW4gYmUgcHJvcGVybHkgZGVkdXBlZCBieSB0aGUgc2NoZWR1bGVyLiBcIl9fd2VoXCIgc3RhbmRzIGZvciBcIndpdGggZXJyb3JcclxuICAgICAgICAvLyBoYW5kbGluZ1wiLlxyXG4gICAgICAgIGNvbnN0IHdyYXBwZWRIb29rID0gaG9vay5fX3dlaCB8fFxyXG4gICAgICAgICAgICAoaG9vay5fX3dlaCA9ICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmlzVW5tb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gZGlzYWJsZSB0cmFja2luZyBpbnNpZGUgYWxsIGxpZmVjeWNsZSBob29rc1xyXG4gICAgICAgICAgICAgICAgLy8gc2luY2UgdGhleSBjYW4gcG90ZW50aWFsbHkgYmUgY2FsbGVkIGluc2lkZSBlZmZlY3RzLlxyXG4gICAgICAgICAgICAgICAgcGF1c2VUcmFja2luZygpO1xyXG4gICAgICAgICAgICAgICAgLy8gU2V0IGN1cnJlbnRJbnN0YW5jZSBkdXJpbmcgaG9vayBpbnZvY2F0aW9uLlxyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBhc3N1bWVzIHRoZSBob29rIGRvZXMgbm90IHN5bmNocm9ub3VzbHkgdHJpZ2dlciBvdGhlciBob29rcywgd2hpY2hcclxuICAgICAgICAgICAgICAgIC8vIGNhbiBvbmx5IGJlIGZhbHNlIHdoZW4gdGhlIHVzZXIgZG9lcyBzb21ldGhpbmcgcmVhbGx5IGZ1bmt5LlxyXG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCB0YXJnZXQsIHR5cGUsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgcmVzZXRUcmFja2luZygpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHByZXBlbmQpIHtcclxuICAgICAgICAgICAgaG9va3MudW5zaGlmdCh3cmFwcGVkSG9vayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBob29rcy5wdXNoKHdyYXBwZWRIb29rKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHdyYXBwZWRIb29rO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY29uc3QgYXBpTmFtZSA9IHRvSGFuZGxlcktleShFcnJvclR5cGVTdHJpbmdzW3R5cGVdLnJlcGxhY2UoLyBob29rJC8sICcnKSk7XHJcbiAgICAgICAgd2FybihgJHthcGlOYW1lfSBpcyBjYWxsZWQgd2hlbiB0aGVyZSBpcyBubyBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlIHRvIGJlIGAgK1xyXG4gICAgICAgICAgICBgYXNzb2NpYXRlZCB3aXRoLiBgICtcclxuICAgICAgICAgICAgYExpZmVjeWNsZSBpbmplY3Rpb24gQVBJcyBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBleGVjdXRpb24gb2Ygc2V0dXAoKS5gICtcclxuICAgICAgICAgICAgKCBgIElmIHlvdSBhcmUgdXNpbmcgYXN5bmMgc2V0dXAoKSwgbWFrZSBzdXJlIHRvIHJlZ2lzdGVyIGxpZmVjeWNsZSBgICtcclxuICAgICAgICAgICAgICAgICAgICBgaG9va3MgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdCBzdGF0ZW1lbnQuYFxyXG4gICAgICAgICAgICAgICAgKSk7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgY3JlYXRlSG9vayA9IChsaWZlY3ljbGUpID0+IChob29rLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UpID0+IFxyXG4vLyBwb3N0LWNyZWF0ZSBsaWZlY3ljbGUgcmVnaXN0cmF0aW9ucyBhcmUgbm9vcHMgZHVyaW5nIFNTUlxyXG4haXNJblNTUkNvbXBvbmVudFNldHVwICYmIGluamVjdEhvb2sobGlmZWN5Y2xlLCBob29rLCB0YXJnZXQpO1xyXG5jb25zdCBvbkJlZm9yZU1vdW50ID0gY3JlYXRlSG9vayhcImJtXCIgLyogQkVGT1JFX01PVU5UICovKTtcclxuY29uc3Qgb25Nb3VudGVkID0gY3JlYXRlSG9vayhcIm1cIiAvKiBNT1VOVEVEICovKTtcclxuY29uc3Qgb25CZWZvcmVVcGRhdGUgPSBjcmVhdGVIb29rKFwiYnVcIiAvKiBCRUZPUkVfVVBEQVRFICovKTtcclxuY29uc3Qgb25VcGRhdGVkID0gY3JlYXRlSG9vayhcInVcIiAvKiBVUERBVEVEICovKTtcclxuY29uc3Qgb25CZWZvcmVVbm1vdW50ID0gY3JlYXRlSG9vayhcImJ1bVwiIC8qIEJFRk9SRV9VTk1PVU5UICovKTtcclxuY29uc3Qgb25Vbm1vdW50ZWQgPSBjcmVhdGVIb29rKFwidW1cIiAvKiBVTk1PVU5URUQgKi8pO1xyXG5jb25zdCBvblJlbmRlclRyaWdnZXJlZCA9IGNyZWF0ZUhvb2soXCJydGdcIiAvKiBSRU5ERVJfVFJJR0dFUkVEICovKTtcclxuY29uc3Qgb25SZW5kZXJUcmFja2VkID0gY3JlYXRlSG9vayhcInJ0Y1wiIC8qIFJFTkRFUl9UUkFDS0VEICovKTtcclxuY29uc3Qgb25FcnJvckNhcHR1cmVkID0gKGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkgPT4ge1xyXG4gICAgaW5qZWN0SG9vayhcImVjXCIgLyogRVJST1JfQ0FQVFVSRUQgKi8sIGhvb2ssIHRhcmdldCk7XHJcbn07XG5cbi8vIFNpbXBsZSBlZmZlY3QuXHJcbmZ1bmN0aW9uIHdhdGNoRWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGRvV2F0Y2goZWZmZWN0LCBudWxsLCBvcHRpb25zKTtcclxufVxyXG4vLyBpbml0aWFsIHZhbHVlIGZvciB3YXRjaGVycyB0byB0cmlnZ2VyIG9uIHVuZGVmaW5lZCBpbml0aWFsIHZhbHVlc1xyXG5jb25zdCBJTklUSUFMX1dBVENIRVJfVkFMVUUgPSB7fTtcclxuLy8gaW1wbGVtZW50YXRpb25cclxuZnVuY3Rpb24gd2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucykge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNGdW5jdGlvbihjYikpIHtcclxuICAgICAgICB3YXJuKGBcXGB3YXRjaChmbiwgb3B0aW9ucz8pXFxgIHNpZ25hdHVyZSBoYXMgYmVlbiBtb3ZlZCB0byBhIHNlcGFyYXRlIEFQSS4gYCArXHJcbiAgICAgICAgICAgIGBVc2UgXFxgd2F0Y2hFZmZlY3QoZm4sIG9wdGlvbnM/KVxcYCBpbnN0ZWFkLiBcXGB3YXRjaFxcYCBub3cgb25seSBgICtcclxuICAgICAgICAgICAgYHN1cHBvcnRzIFxcYHdhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnM/KSBzaWduYXR1cmUuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZG9XYXRjaChzb3VyY2UsIGNiLCBvcHRpb25zKTtcclxufVxyXG5mdW5jdGlvbiBkb1dhdGNoKHNvdXJjZSwgY2IsIHsgaW1tZWRpYXRlLCBkZWVwLCBmbHVzaCwgb25UcmFjaywgb25UcmlnZ2VyIH0gPSBFTVBUWV9PQkosIGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFjYikge1xyXG4gICAgICAgIGlmIChpbW1lZGlhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB3YXJuKGB3YXRjaCgpIFwiaW1tZWRpYXRlXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIGAgK1xyXG4gICAgICAgICAgICAgICAgYHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkZWVwICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgd2Fybihgd2F0Y2goKSBcImRlZXBcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgYCArXHJcbiAgICAgICAgICAgICAgICBgd2F0Y2goc291cmNlLCBjYWxsYmFjaywgb3B0aW9ucz8pIHNpZ25hdHVyZS5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCB3YXJuSW52YWxpZFNvdXJjZSA9IChzKSA9PiB7XHJcbiAgICAgICAgd2FybihgSW52YWxpZCB3YXRjaCBzb3VyY2U6IGAsIHMsIGBBIHdhdGNoIHNvdXJjZSBjYW4gb25seSBiZSBhIGdldHRlci9lZmZlY3QgZnVuY3Rpb24sIGEgcmVmLCBgICtcclxuICAgICAgICAgICAgYGEgcmVhY3RpdmUgb2JqZWN0LCBvciBhbiBhcnJheSBvZiB0aGVzZSB0eXBlcy5gKTtcclxuICAgIH07XHJcbiAgICBsZXQgZ2V0dGVyO1xyXG4gICAgbGV0IGZvcmNlVHJpZ2dlciA9IGZhbHNlO1xyXG4gICAgaWYgKGlzUmVmKHNvdXJjZSkpIHtcclxuICAgICAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2UudmFsdWU7XHJcbiAgICAgICAgZm9yY2VUcmlnZ2VyID0gISFzb3VyY2UuX3NoYWxsb3c7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1JlYWN0aXZlKHNvdXJjZSkpIHtcclxuICAgICAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2U7XHJcbiAgICAgICAgZGVlcCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcclxuICAgICAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2UubWFwKHMgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXNSZWYocykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVhY3RpdmUocykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmF2ZXJzZShzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHMpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbFdpdGhFcnJvckhhbmRsaW5nKHMsIGluc3RhbmNlLCAyIC8qIFdBVENIX0dFVFRFUiAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybkludmFsaWRTb3VyY2Uocyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oc291cmNlKSkge1xyXG4gICAgICAgIGlmIChjYikge1xyXG4gICAgICAgICAgICAvLyBnZXR0ZXIgd2l0aCBjYlxyXG4gICAgICAgICAgICBnZXR0ZXIgPSAoKSA9PiBjYWxsV2l0aEVycm9ySGFuZGxpbmcoc291cmNlLCBpbnN0YW5jZSwgMiAvKiBXQVRDSF9HRVRURVIgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gbm8gY2IgLT4gc2ltcGxlIGVmZmVjdFxyXG4gICAgICAgICAgICBnZXR0ZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuaXNVbm1vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xlYW51cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsV2l0aEVycm9ySGFuZGxpbmcoc291cmNlLCBpbnN0YW5jZSwgMyAvKiBXQVRDSF9DQUxMQkFDSyAqLywgW29uSW52YWxpZGF0ZV0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGdldHRlciA9IE5PT1A7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm5JbnZhbGlkU291cmNlKHNvdXJjZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoY2IgJiYgZGVlcCkge1xyXG4gICAgICAgIGNvbnN0IGJhc2VHZXR0ZXIgPSBnZXR0ZXI7XHJcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gdHJhdmVyc2UoYmFzZUdldHRlcigpKTtcclxuICAgIH1cclxuICAgIGxldCBjbGVhbnVwO1xyXG4gICAgY29uc3Qgb25JbnZhbGlkYXRlID0gKGZuKSA9PiB7XHJcbiAgICAgICAgY2xlYW51cCA9IHJ1bm5lci5vcHRpb25zLm9uU3RvcCA9ICgpID0+IHtcclxuICAgICAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgNCAvKiBXQVRDSF9DTEVBTlVQICovKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIGxldCBvbGRWYWx1ZSA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDogSU5JVElBTF9XQVRDSEVSX1ZBTFVFO1xyXG4gICAgY29uc3Qgam9iID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICghcnVubmVyLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjYikge1xyXG4gICAgICAgICAgICAvLyB3YXRjaChzb3VyY2UsIGNiKVxyXG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHJ1bm5lcigpO1xyXG4gICAgICAgICAgICBpZiAoZGVlcCB8fCBmb3JjZVRyaWdnZXIgfHwgaGFzQ2hhbmdlZChuZXdWYWx1ZSwgb2xkVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjbGVhbnVwIGJlZm9yZSBydW5uaW5nIGNiIGFnYWluXHJcbiAgICAgICAgICAgICAgICBpZiAoY2xlYW51cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGNiLCBpbnN0YW5jZSwgMyAvKiBXQVRDSF9DQUxMQkFDSyAqLywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHBhc3MgdW5kZWZpbmVkIGFzIHRoZSBvbGQgdmFsdWUgd2hlbiBpdCdzIGNoYW5nZWQgZm9yIHRoZSBmaXJzdCB0aW1lXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPT09IElOSVRJQUxfV0FUQ0hFUl9WQUxVRSA/IHVuZGVmaW5lZCA6IG9sZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uSW52YWxpZGF0ZVxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB3YXRjaEVmZmVjdFxyXG4gICAgICAgICAgICBydW5uZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gaW1wb3J0YW50OiBtYXJrIHRoZSBqb2IgYXMgYSB3YXRjaGVyIGNhbGxiYWNrIHNvIHRoYXQgc2NoZWR1bGVyIGtub3dzXHJcbiAgICAvLyBpdCBpcyBhbGxvd2VkIHRvIHNlbGYtdHJpZ2dlciAoIzE3MjcpXHJcbiAgICBqb2IuYWxsb3dSZWN1cnNlID0gISFjYjtcclxuICAgIGxldCBzY2hlZHVsZXI7XHJcbiAgICBpZiAoZmx1c2ggPT09ICdzeW5jJykge1xyXG4gICAgICAgIHNjaGVkdWxlciA9IGpvYjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGZsdXNoID09PSAncG9zdCcpIHtcclxuICAgICAgICBzY2hlZHVsZXIgPSAoKSA9PiBxdWV1ZVBvc3RSZW5kZXJFZmZlY3Qoam9iLCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBkZWZhdWx0OiAncHJlJ1xyXG4gICAgICAgIHNjaGVkdWxlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSB8fCBpbnN0YW5jZS5pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgIHF1ZXVlUHJlRmx1c2hDYihqb2IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gd2l0aCAncHJlJyBvcHRpb24sIHRoZSBmaXJzdCBjYWxsIG11c3QgaGFwcGVuIGJlZm9yZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkIHNvIGl0IGlzIGNhbGxlZCBzeW5jaHJvbm91c2x5LlxyXG4gICAgICAgICAgICAgICAgam9iKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgcnVubmVyID0gZWZmZWN0KGdldHRlciwge1xyXG4gICAgICAgIGxhenk6IHRydWUsXHJcbiAgICAgICAgb25UcmFjayxcclxuICAgICAgICBvblRyaWdnZXIsXHJcbiAgICAgICAgc2NoZWR1bGVyXHJcbiAgICB9KTtcclxuICAgIHJlY29yZEluc3RhbmNlQm91bmRFZmZlY3QocnVubmVyKTtcclxuICAgIC8vIGluaXRpYWwgcnVuXHJcbiAgICBpZiAoY2IpIHtcclxuICAgICAgICBpZiAoaW1tZWRpYXRlKSB7XHJcbiAgICAgICAgICAgIGpvYigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb2xkVmFsdWUgPSBydW5uZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChmbHVzaCA9PT0gJ3Bvc3QnKSB7XHJcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KHJ1bm5lciwgaW5zdGFuY2UgJiYgaW5zdGFuY2Uuc3VzcGVuc2UpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcnVubmVyKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIHN0b3AocnVubmVyKTtcclxuICAgICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgcmVtb3ZlKGluc3RhbmNlLmVmZmVjdHMsIHJ1bm5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyB0aGlzLiR3YXRjaFxyXG5mdW5jdGlvbiBpbnN0YW5jZVdhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IHB1YmxpY1RoaXMgPSB0aGlzLnByb3h5O1xyXG4gICAgY29uc3QgZ2V0dGVyID0gaXNTdHJpbmcoc291cmNlKVxyXG4gICAgICAgID8gKCkgPT4gcHVibGljVGhpc1tzb3VyY2VdXHJcbiAgICAgICAgOiBzb3VyY2UuYmluZChwdWJsaWNUaGlzKTtcclxuICAgIHJldHVybiBkb1dhdGNoKGdldHRlciwgY2IuYmluZChwdWJsaWNUaGlzKSwgb3B0aW9ucywgdGhpcyk7XHJcbn1cclxuZnVuY3Rpb24gdHJhdmVyc2UodmFsdWUsIHNlZW4gPSBuZXcgU2V0KCkpIHtcclxuICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHNlZW4uaGFzKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIHNlZW4uYWRkKHZhbHVlKTtcclxuICAgIGlmIChpc1JlZih2YWx1ZSkpIHtcclxuICAgICAgICB0cmF2ZXJzZSh2YWx1ZS52YWx1ZSwgc2Vlbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWVbaV0sIHNlZW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbHVlKSB8fCBpc01hcCh2YWx1ZSkpIHtcclxuICAgICAgICB2YWx1ZS5mb3JFYWNoKCh2KSA9PiB7XHJcbiAgICAgICAgICAgIHRyYXZlcnNlKHYsIHNlZW4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWVba2V5XSwgc2Vlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XG5cbmZ1bmN0aW9uIHVzZVRyYW5zaXRpb25TdGF0ZSgpIHtcclxuICAgIGNvbnN0IHN0YXRlID0ge1xyXG4gICAgICAgIGlzTW91bnRlZDogZmFsc2UsXHJcbiAgICAgICAgaXNMZWF2aW5nOiBmYWxzZSxcclxuICAgICAgICBpc1VubW91bnRpbmc6IGZhbHNlLFxyXG4gICAgICAgIGxlYXZpbmdWTm9kZXM6IG5ldyBNYXAoKVxyXG4gICAgfTtcclxuICAgIG9uTW91bnRlZCgoKSA9PiB7XHJcbiAgICAgICAgc3RhdGUuaXNNb3VudGVkID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcclxuICAgICAgICBzdGF0ZS5pc1VubW91bnRpbmcgPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gc3RhdGU7XHJcbn1cclxuY29uc3QgVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IgPSBbRnVuY3Rpb24sIEFycmF5XTtcclxuY29uc3QgQmFzZVRyYW5zaXRpb25JbXBsID0ge1xyXG4gICAgbmFtZTogYEJhc2VUcmFuc2l0aW9uYCxcclxuICAgIHByb3BzOiB7XHJcbiAgICAgICAgbW9kZTogU3RyaW5nLFxyXG4gICAgICAgIGFwcGVhcjogQm9vbGVhbixcclxuICAgICAgICBwZXJzaXN0ZWQ6IEJvb2xlYW4sXHJcbiAgICAgICAgLy8gZW50ZXJcclxuICAgICAgICBvbkJlZm9yZUVudGVyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkVudGVyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkFmdGVyRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uRW50ZXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIC8vIGxlYXZlXHJcbiAgICAgICAgb25CZWZvcmVMZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25MZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25BZnRlckxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkxlYXZlQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICAvLyBhcHBlYXJcclxuICAgICAgICBvbkJlZm9yZUFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25BcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uQWZ0ZXJBcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uQXBwZWFyQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvclxyXG4gICAgfSxcclxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdXNlVHJhbnNpdGlvblN0YXRlKCk7XHJcbiAgICAgICAgbGV0IHByZXZUcmFuc2l0aW9uS2V5O1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCAmJiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oc2xvdHMuZGVmYXVsdCgpLCB0cnVlKTtcclxuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQgb3IgY29tcG9uZW50LiBVc2UgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdGhlcmUncyBubyBuZWVkIHRvIHRyYWNrIHJlYWN0aXZpdHkgZm9yIHRoZXNlIHByb3BzIHNvIHVzZSB0aGUgcmF3XHJcbiAgICAgICAgICAgIC8vIHByb3BzIGZvciBhIGJpdCBiZXR0ZXIgcGVyZlxyXG4gICAgICAgICAgICBjb25zdCByYXdQcm9wcyA9IHRvUmF3KHByb3BzKTtcclxuICAgICAgICAgICAgY29uc3QgeyBtb2RlIH0gPSByYXdQcm9wcztcclxuICAgICAgICAgICAgLy8gY2hlY2sgbW9kZVxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG1vZGUgJiYgIVsnaW4tb3V0JywgJ291dC1pbicsICdkZWZhdWx0J10uaW5jbHVkZXMobW9kZSkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYGludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICR7bW9kZX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhdCB0aGlzIHBvaW50IGNoaWxkcmVuIGhhcyBhIGd1YXJhbnRlZWQgbGVuZ3RoIG9mIDEuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS5pc0xlYXZpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eVBsYWNlaG9sZGVyKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpbiB0aGUgY2FzZSBvZiA8dHJhbnNpdGlvbj48a2VlcC1hbGl2ZS8+PC90cmFuc2l0aW9uPiwgd2UgbmVlZCB0b1xyXG4gICAgICAgICAgICAvLyBjb21wYXJlIHRoZSB0eXBlIG9mIHRoZSBrZXB0LWFsaXZlIGNoaWxkcmVuLlxyXG4gICAgICAgICAgICBjb25zdCBpbm5lckNoaWxkID0gZ2V0S2VlcEFsaXZlQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgICAgICBpZiAoIWlubmVyQ2hpbGQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eVBsYWNlaG9sZGVyKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBlbnRlckhvb2tzID0gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhpbm5lckNoaWxkLCByYXdQcm9wcywgc3RhdGUsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKGlubmVyQ2hpbGQsIGVudGVySG9va3MpO1xyXG4gICAgICAgICAgICBjb25zdCBvbGRDaGlsZCA9IGluc3RhbmNlLnN1YlRyZWU7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZElubmVyQ2hpbGQgPSBvbGRDaGlsZCAmJiBnZXRLZWVwQWxpdmVDaGlsZChvbGRDaGlsZCk7XHJcbiAgICAgICAgICAgIGxldCB0cmFuc2l0aW9uS2V5Q2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCB7IGdldFRyYW5zaXRpb25LZXkgfSA9IGlubmVyQ2hpbGQudHlwZTtcclxuICAgICAgICAgICAgaWYgKGdldFRyYW5zaXRpb25LZXkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGdldFRyYW5zaXRpb25LZXkoKTtcclxuICAgICAgICAgICAgICAgIGlmIChwcmV2VHJhbnNpdGlvbktleSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldlRyYW5zaXRpb25LZXkgPSBrZXk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09IHByZXZUcmFuc2l0aW9uS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldlRyYW5zaXRpb25LZXkgPSBrZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbktleUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGhhbmRsZSBtb2RlXHJcbiAgICAgICAgICAgIGlmIChvbGRJbm5lckNoaWxkICYmXHJcbiAgICAgICAgICAgICAgICBvbGRJbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQgJiZcclxuICAgICAgICAgICAgICAgICghaXNTYW1lVk5vZGVUeXBlKGlubmVyQ2hpbGQsIG9sZElubmVyQ2hpbGQpIHx8IHRyYW5zaXRpb25LZXlDaGFuZ2VkKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGVhdmluZ0hvb2tzID0gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCByYXdQcm9wcywgc3RhdGUsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBvbGQgdHJlZSdzIGhvb2tzIGluIGNhc2Ugb2YgZHluYW1pYyB0cmFuc2l0aW9uXHJcbiAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Mob2xkSW5uZXJDaGlsZCwgbGVhdmluZ0hvb2tzKTtcclxuICAgICAgICAgICAgICAgIC8vIHN3aXRjaGluZyBiZXR3ZWVuIGRpZmZlcmVudCB2aWV3c1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuaXNMZWF2aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcclxuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nSG9va3MuYWZ0ZXJMZWF2ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaXNMZWF2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nSG9va3MuZGVsYXlMZWF2ZSA9IChlbCwgZWFybHlSZW1vdmUsIGRlbGF5ZWRMZWF2ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCBvbGRJbm5lckNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2Rlc0NhY2hlW1N0cmluZyhvbGRJbm5lckNoaWxkLmtleSldID0gb2xkSW5uZXJDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWFybHkgcmVtb3ZhbCBjYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYiA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhcmx5UmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlbnRlckhvb2tzLmRlbGF5ZWRMZWF2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXJIb29rcy5kZWxheWVkTGVhdmUgPSBkZWxheWVkTGVhdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY2hpbGQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufTtcclxuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXHJcbi8vIGFsc28gdG8gYXZvaWQgaW5saW5lIGltcG9ydCgpIGluIGdlbmVyYXRlZCBkLnRzIGZpbGVzXHJcbmNvbnN0IEJhc2VUcmFuc2l0aW9uID0gQmFzZVRyYW5zaXRpb25JbXBsO1xyXG5mdW5jdGlvbiBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSkge1xyXG4gICAgY29uc3QgeyBsZWF2aW5nVk5vZGVzIH0gPSBzdGF0ZTtcclxuICAgIGxldCBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBsZWF2aW5nVk5vZGVzLmdldCh2bm9kZS50eXBlKTtcclxuICAgIGlmICghbGVhdmluZ1ZOb2Rlc0NhY2hlKSB7XHJcbiAgICAgICAgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICBsZWF2aW5nVk5vZGVzLnNldCh2bm9kZS50eXBlLCBsZWF2aW5nVk5vZGVzQ2FjaGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxlYXZpbmdWTm9kZXNDYWNoZTtcclxufVxyXG4vLyBUaGUgdHJhbnNpdGlvbiBob29rcyBhcmUgYXR0YWNoZWQgdG8gdGhlIHZub2RlIGFzIHZub2RlLnRyYW5zaXRpb25cclxuLy8gYW5kIHdpbGwgYmUgY2FsbGVkIGF0IGFwcHJvcHJpYXRlIHRpbWluZyBpbiB0aGUgcmVuZGVyZXIuXHJcbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uSG9va3Modm5vZGUsIHByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IHsgYXBwZWFyLCBtb2RlLCBwZXJzaXN0ZWQgPSBmYWxzZSwgb25CZWZvcmVFbnRlciwgb25FbnRlciwgb25BZnRlckVudGVyLCBvbkVudGVyQ2FuY2VsbGVkLCBvbkJlZm9yZUxlYXZlLCBvbkxlYXZlLCBvbkFmdGVyTGVhdmUsIG9uTGVhdmVDYW5jZWxsZWQsIG9uQmVmb3JlQXBwZWFyLCBvbkFwcGVhciwgb25BZnRlckFwcGVhciwgb25BcHBlYXJDYW5jZWxsZWQgfSA9IHByb3BzO1xyXG4gICAgY29uc3Qga2V5ID0gU3RyaW5nKHZub2RlLmtleSk7XHJcbiAgICBjb25zdCBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSk7XHJcbiAgICBjb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzKSA9PiB7XHJcbiAgICAgICAgaG9vayAmJlxyXG4gICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgOSAvKiBUUkFOU0lUSU9OX0hPT0sgKi8sIGFyZ3MpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGhvb2tzID0ge1xyXG4gICAgICAgIG1vZGUsXHJcbiAgICAgICAgcGVyc2lzdGVkLFxyXG4gICAgICAgIGJlZm9yZUVudGVyKGVsKSB7XHJcbiAgICAgICAgICAgIGxldCBob29rID0gb25CZWZvcmVFbnRlcjtcclxuICAgICAgICAgICAgaWYgKCFzdGF0ZS5pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcHBlYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBob29rID0gb25CZWZvcmVBcHBlYXIgfHwgb25CZWZvcmVFbnRlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBmb3Igc2FtZSBlbGVtZW50ICh2LXNob3cpXHJcbiAgICAgICAgICAgIGlmIChlbC5fbGVhdmVDYikge1xyXG4gICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IodHJ1ZSAvKiBjYW5jZWxsZWQgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGZvciB0b2dnbGVkIGVsZW1lbnQgd2l0aCBzYW1lIGtleSAodi1pZilcclxuICAgICAgICAgICAgY29uc3QgbGVhdmluZ1ZOb2RlID0gbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV07XHJcbiAgICAgICAgICAgIGlmIChsZWF2aW5nVk5vZGUgJiZcclxuICAgICAgICAgICAgICAgIGlzU2FtZVZOb2RlVHlwZSh2bm9kZSwgbGVhdmluZ1ZOb2RlKSAmJlxyXG4gICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2RlLmVsLl9sZWF2ZUNiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBmb3JjZSBlYXJseSByZW1vdmFsIChub3QgY2FuY2VsbGVkKVxyXG4gICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2RlLmVsLl9sZWF2ZUNiKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FsbEhvb2soaG9vaywgW2VsXSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnRlcihlbCkge1xyXG4gICAgICAgICAgICBsZXQgaG9vayA9IG9uRW50ZXI7XHJcbiAgICAgICAgICAgIGxldCBhZnRlckhvb2sgPSBvbkFmdGVyRW50ZXI7XHJcbiAgICAgICAgICAgIGxldCBjYW5jZWxIb29rID0gb25FbnRlckNhbmNlbGxlZDtcclxuICAgICAgICAgICAgaWYgKCFzdGF0ZS5pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcHBlYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBob29rID0gb25BcHBlYXIgfHwgb25FbnRlcjtcclxuICAgICAgICAgICAgICAgICAgICBhZnRlckhvb2sgPSBvbkFmdGVyQXBwZWFyIHx8IG9uQWZ0ZXJFbnRlcjtcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxIb29rID0gb25BcHBlYXJDYW5jZWxsZWQgfHwgb25FbnRlckNhbmNlbGxlZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvbmUgPSAoZWwuX2VudGVyQ2IgPSAoY2FuY2VsbGVkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbEhvb2soY2FuY2VsSG9vaywgW2VsXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhhZnRlckhvb2ssIFtlbF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGhvb2tzLmRlbGF5ZWRMZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvb2tzLmRlbGF5ZWRMZWF2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWwuX2VudGVyQ2IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoaG9vaykge1xyXG4gICAgICAgICAgICAgICAgaG9vayhlbCwgZG9uZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaG9vay5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGVhdmUoZWwsIHJlbW92ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBTdHJpbmcodm5vZGUua2V5KTtcclxuICAgICAgICAgICAgaWYgKGVsLl9lbnRlckNiKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5fZW50ZXJDYih0cnVlIC8qIGNhbmNlbGxlZCAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0YXRlLmlzVW5tb3VudGluZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhbGxIb29rKG9uQmVmb3JlTGVhdmUsIFtlbF0pO1xyXG4gICAgICAgICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvbmUgPSAoZWwuX2xlYXZlQ2IgPSAoY2FuY2VsbGVkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhvbkxlYXZlQ2FuY2VsbGVkLCBbZWxdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKG9uQWZ0ZXJMZWF2ZSwgW2VsXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGlmIChsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XSA9PT0gdm5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XSA9IHZub2RlO1xyXG4gICAgICAgICAgICBpZiAob25MZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgb25MZWF2ZShlbCwgZG9uZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAob25MZWF2ZS5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xvbmUodm5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVUcmFuc2l0aW9uSG9va3Modm5vZGUsIHByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gaG9va3M7XHJcbn1cclxuLy8gdGhlIHBsYWNlaG9sZGVyIHJlYWxseSBvbmx5IGhhbmRsZXMgb25lIHNwZWNpYWwgY2FzZTogS2VlcEFsaXZlXHJcbi8vIGluIHRoZSBjYXNlIG9mIGEgS2VlcEFsaXZlIGluIGEgbGVhdmUgcGhhc2Ugd2UgbmVlZCB0byByZXR1cm4gYSBLZWVwQWxpdmVcclxuLy8gcGxhY2Vob2xkZXIgd2l0aCBlbXB0eSBjb250ZW50IHRvIGF2b2lkIHRoZSBLZWVwQWxpdmUgaW5zdGFuY2UgZnJvbSBiZWluZ1xyXG4vLyB1bm1vdW50ZWQuXHJcbmZ1bmN0aW9uIGVtcHR5UGxhY2Vob2xkZXIodm5vZGUpIHtcclxuICAgIGlmIChpc0tlZXBBbGl2ZSh2bm9kZSkpIHtcclxuICAgICAgICB2bm9kZSA9IGNsb25lVk5vZGUodm5vZGUpO1xyXG4gICAgICAgIHZub2RlLmNoaWxkcmVuID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gdm5vZGU7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0S2VlcEFsaXZlQ2hpbGQodm5vZGUpIHtcclxuICAgIHJldHVybiBpc0tlZXBBbGl2ZSh2bm9kZSlcclxuICAgICAgICA/IHZub2RlLmNoaWxkcmVuXHJcbiAgICAgICAgICAgID8gdm5vZGUuY2hpbGRyZW5bMF1cclxuICAgICAgICAgICAgOiB1bmRlZmluZWRcclxuICAgICAgICA6IHZub2RlO1xyXG59XHJcbmZ1bmN0aW9uIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZSwgaG9va3MpIHtcclxuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLyAmJiB2bm9kZS5jb21wb25lbnQpIHtcclxuICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGhvb2tzKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCB2bm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICB2bm9kZS5zc0NvbnRlbnQudHJhbnNpdGlvbiA9IGhvb2tzLmNsb25lKHZub2RlLnNzQ29udGVudCk7XHJcbiAgICAgICAgdm5vZGUuc3NGYWxsYmFjay50cmFuc2l0aW9uID0gaG9va3MuY2xvbmUodm5vZGUuc3NGYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2bm9kZS50cmFuc2l0aW9uID0gaG9va3M7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuKGNoaWxkcmVuLCBrZWVwQ29tbWVudCA9IGZhbHNlKSB7XHJcbiAgICBsZXQgcmV0ID0gW107XHJcbiAgICBsZXQga2V5ZWRGcmFnbWVudENvdW50ID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgIC8vIGhhbmRsZSBmcmFnbWVudCBjaGlsZHJlbiBjYXNlLCBlLmcuIHYtZm9yXHJcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IEZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXRjaEZsYWcgJiAxMjggLyogS0VZRURfRlJBR01FTlQgKi8pXHJcbiAgICAgICAgICAgICAgICBrZXllZEZyYWdtZW50Q291bnQrKztcclxuICAgICAgICAgICAgcmV0ID0gcmV0LmNvbmNhdChnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGQuY2hpbGRyZW4sIGtlZXBDb21tZW50KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbW1lbnQgcGxhY2Vob2xkZXJzIHNob3VsZCBiZSBza2lwcGVkLCBlLmcuIHYtaWZcclxuICAgICAgICBlbHNlIGlmIChrZWVwQ29tbWVudCB8fCBjaGlsZC50eXBlICE9PSBDb21tZW50KSB7XHJcbiAgICAgICAgICAgIHJldC5wdXNoKGNoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyAjMTEyNiBpZiBhIHRyYW5zaXRpb24gY2hpbGRyZW4gbGlzdCBjb250YWlucyBtdWx0aXBsZSBzdWIgZnJhZ21lbnRzLCB0aGVzZVxyXG4gICAgLy8gZnJhZ21lbnRzIHdpbGwgYmUgbWVyZ2VkIGludG8gYSBmbGF0IGNoaWxkcmVuIGFycmF5LiBTaW5jZSBlYWNoIHYtZm9yXHJcbiAgICAvLyBmcmFnbWVudCBtYXkgY29udGFpbiBkaWZmZXJlbnQgc3RhdGljIGJpbmRpbmdzIGluc2lkZSwgd2UgbmVlZCB0byBkZS10b3BcclxuICAgIC8vIHRoZXNlIGNoaWxkcmVuIHRvIGZvcmNlIGZ1bGwgZGlmZnMgdG8gZW5zdXJlIGNvcnJlY3QgYmVoYXZpb3IuXHJcbiAgICBpZiAoa2V5ZWRGcmFnbWVudENvdW50ID4gMSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJldFtpXS5wYXRjaEZsYWcgPSAtMiAvKiBCQUlMICovO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cblxuY29uc3QgaXNLZWVwQWxpdmUgPSAodm5vZGUpID0+IHZub2RlLnR5cGUuX19pc0tlZXBBbGl2ZTtcclxuY29uc3QgS2VlcEFsaXZlSW1wbCA9IHtcclxuICAgIG5hbWU6IGBLZWVwQWxpdmVgLFxyXG4gICAgLy8gTWFya2VyIGZvciBzcGVjaWFsIGhhbmRsaW5nIGluc2lkZSB0aGUgcmVuZGVyZXIuIFdlIGFyZSBub3QgdXNpbmcgYSA9PT1cclxuICAgIC8vIGNoZWNrIGRpcmVjdGx5IG9uIEtlZXBBbGl2ZSBpbiB0aGUgcmVuZGVyZXIsIGJlY2F1c2UgaW1wb3J0aW5nIGl0IGRpcmVjdGx5XHJcbiAgICAvLyB3b3VsZCBwcmV2ZW50IGl0IGZyb20gYmVpbmcgdHJlZS1zaGFrZW4uXHJcbiAgICBfX2lzS2VlcEFsaXZlOiB0cnVlLFxyXG4gICAgaW5oZXJpdFJlZjogdHJ1ZSxcclxuICAgIHByb3BzOiB7XHJcbiAgICAgICAgaW5jbHVkZTogW1N0cmluZywgUmVnRXhwLCBBcnJheV0sXHJcbiAgICAgICAgZXhjbHVkZTogW1N0cmluZywgUmVnRXhwLCBBcnJheV0sXHJcbiAgICAgICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXHJcbiAgICB9LFxyXG4gICAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xyXG4gICAgICAgIGNvbnN0IGNhY2hlID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgbGV0IGN1cnJlbnQgPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICAgICAgY29uc3QgcGFyZW50U3VzcGVuc2UgPSBpbnN0YW5jZS5zdXNwZW5zZTtcclxuICAgICAgICAvLyBLZWVwQWxpdmUgY29tbXVuaWNhdGVzIHdpdGggdGhlIGluc3RhbnRpYXRlZCByZW5kZXJlciB2aWEgdGhlXHJcbiAgICAgICAgLy8gY3R4IHdoZXJlIHRoZSByZW5kZXJlciBwYXNzZXMgaW4gaXRzIGludGVybmFscyxcclxuICAgICAgICAvLyBhbmQgdGhlIEtlZXBBbGl2ZSBpbnN0YW5jZSBleHBvc2VzIGFjdGl2YXRlL2RlYWN0aXZhdGUgaW1wbGVtZW50YXRpb25zLlxyXG4gICAgICAgIC8vIFRoZSB3aG9sZSBwb2ludCBvZiB0aGlzIGlzIHRvIGF2b2lkIGltcG9ydGluZyBLZWVwQWxpdmUgZGlyZWN0bHkgaW4gdGhlXHJcbiAgICAgICAgLy8gcmVuZGVyZXIgdG8gZmFjaWxpdGF0ZSB0cmVlLXNoYWtpbmcuXHJcbiAgICAgICAgY29uc3Qgc2hhcmVkQ29udGV4dCA9IGluc3RhbmNlLmN0eDtcclxuICAgICAgICBjb25zdCB7IHJlbmRlcmVyOiB7IHA6IHBhdGNoLCBtOiBtb3ZlLCB1bTogX3VubW91bnQsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0gfSA9IHNoYXJlZENvbnRleHQ7XHJcbiAgICAgICAgY29uc3Qgc3RvcmFnZUNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHNoYXJlZENvbnRleHQuYWN0aXZhdGUgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50O1xyXG4gICAgICAgICAgICBtb3ZlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgMCAvKiBFTlRFUiAqLywgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAvLyBpbiBjYXNlIHByb3BzIGhhdmUgY2hhbmdlZFxyXG4gICAgICAgICAgICBwYXRjaChpbnN0YW5jZS52bm9kZSwgdm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuaXNEZWFjdGl2YXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5hKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHZub2RlSG9vayA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uVm5vZGVNb3VudGVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZub2RlSG9vaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIGluc3RhbmNlLnBhcmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzaGFyZWRDb250ZXh0LmRlYWN0aXZhdGUgPSAodm5vZGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnQ7XHJcbiAgICAgICAgICAgIG1vdmUodm5vZGUsIHN0b3JhZ2VDb250YWluZXIsIG51bGwsIDEgLyogTEVBVkUgKi8sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5kYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGluc3RhbmNlLmRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHZub2RlSG9vayA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uVm5vZGVVbm1vdW50ZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodm5vZGVIb29rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgaW5zdGFuY2UucGFyZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc0RlYWN0aXZhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZnVuY3Rpb24gdW5tb3VudCh2bm9kZSkge1xyXG4gICAgICAgICAgICAvLyByZXNldCB0aGUgc2hhcGVGbGFnIHNvIGl0IGNhbiBiZSBwcm9wZXJseSB1bm1vdW50ZWRcclxuICAgICAgICAgICAgcmVzZXRTaGFwZUZsYWcodm5vZGUpO1xyXG4gICAgICAgICAgICBfdW5tb3VudCh2bm9kZSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gcHJ1bmVDYWNoZShmaWx0ZXIpIHtcclxuICAgICAgICAgICAgY2FjaGUuZm9yRWFjaCgodm5vZGUsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGdldE5hbWUodm5vZGUudHlwZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmFtZSAmJiAoIWZpbHRlciB8fCAhZmlsdGVyKG5hbWUpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5KGtleSkge1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoa2V5KTtcclxuICAgICAgICAgICAgaWYgKCFjdXJyZW50IHx8IGNhY2hlZC50eXBlICE9PSBjdXJyZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQoY2FjaGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGFjdGl2ZSBpbnN0YW5jZSBzaG91bGQgbm8gbG9uZ2VyIGJlIGtlcHQtYWxpdmUuXHJcbiAgICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCB1bm1vdW50IGl0IG5vdyBidXQgaXQgbWlnaHQgYmUgbGF0ZXIsIHNvIHJlc2V0IGl0cyBmbGFnIG5vdy5cclxuICAgICAgICAgICAgICAgIHJlc2V0U2hhcGVGbGFnKGN1cnJlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhY2hlLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICBrZXlzLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBwcnVuZSBjYWNoZSBvbiBpbmNsdWRlL2V4Y2x1ZGUgcHJvcCBjaGFuZ2VcclxuICAgICAgICB3YXRjaCgoKSA9PiBbcHJvcHMuaW5jbHVkZSwgcHJvcHMuZXhjbHVkZV0sIChbaW5jbHVkZSwgZXhjbHVkZV0pID0+IHtcclxuICAgICAgICAgICAgaW5jbHVkZSAmJiBwcnVuZUNhY2hlKG5hbWUgPT4gbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSk7XHJcbiAgICAgICAgICAgIGV4Y2x1ZGUgJiYgcHJ1bmVDYWNoZShuYW1lID0+ICFtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKTtcclxuICAgICAgICB9LCBcclxuICAgICAgICAvLyBwcnVuZSBwb3N0LXJlbmRlciBhZnRlciBgY3VycmVudGAgaGFzIGJlZW4gdXBkYXRlZFxyXG4gICAgICAgIHsgZmx1c2g6ICdwb3N0JyB9KTtcclxuICAgICAgICAvLyBjYWNoZSBzdWIgdHJlZSBhZnRlciByZW5kZXJcclxuICAgICAgICBsZXQgcGVuZGluZ0NhY2hlS2V5ID0gbnVsbDtcclxuICAgICAgICBjb25zdCBjYWNoZVN1YnRyZWUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGZpeCAjMTYyMSwgdGhlIHBlbmRpbmdDYWNoZUtleSBjb3VsZCBiZSAwXHJcbiAgICAgICAgICAgIGlmIChwZW5kaW5nQ2FjaGVLZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY2FjaGUuc2V0KHBlbmRpbmdDYWNoZUtleSwgZ2V0SW5uZXJDaGlsZChpbnN0YW5jZS5zdWJUcmVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIG9uTW91bnRlZChjYWNoZVN1YnRyZWUpO1xyXG4gICAgICAgIG9uVXBkYXRlZChjYWNoZVN1YnRyZWUpO1xyXG4gICAgICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNhY2hlLmZvckVhY2goY2FjaGVkID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgc3ViVHJlZSwgc3VzcGVuc2UgfSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGUgPSBnZXRJbm5lckNoaWxkKHN1YlRyZWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZC50eXBlID09PSB2bm9kZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY3VycmVudCBpbnN0YW5jZSB3aWxsIGJlIHVubW91bnRlZCBhcyBwYXJ0IG9mIGtlZXAtYWxpdmUncyB1bm1vdW50XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRTaGFwZUZsYWcodm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBpbnZva2UgaXRzIGRlYWN0aXZhdGVkIGhvb2sgaGVyZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhID0gdm5vZGUuY29tcG9uZW50LmRhO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkYSwgc3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVubW91bnQoY2FjaGVkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgcGVuZGluZ0NhY2hlS2V5ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKCFzbG90cy5kZWZhdWx0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQoKTtcclxuICAgICAgICAgICAgY29uc3QgcmF3Vk5vZGUgPSBjaGlsZHJlblswXTtcclxuICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBLZWVwQWxpdmUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgY29tcG9uZW50IGNoaWxkLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIWlzVk5vZGUocmF3Vk5vZGUpIHx8XHJcbiAgICAgICAgICAgICAgICAoIShyYXdWTm9kZS5zaGFwZUZsYWcgJiA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqLykgJiZcclxuICAgICAgICAgICAgICAgICAgICAhKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykpKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiByYXdWTm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgdm5vZGUgPSBnZXRJbm5lckNoaWxkKHJhd1ZOb2RlKTtcclxuICAgICAgICAgICAgY29uc3QgY29tcCA9IHZub2RlLnR5cGU7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBnZXROYW1lKGNvbXApO1xyXG4gICAgICAgICAgICBjb25zdCB7IGluY2x1ZGUsIGV4Y2x1ZGUsIG1heCB9ID0gcHJvcHM7XHJcbiAgICAgICAgICAgIGlmICgoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fFxyXG4gICAgICAgICAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHZub2RlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhd1ZOb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHZub2RlLmtleSA9PSBudWxsID8gY29tcCA6IHZub2RlLmtleTtcclxuICAgICAgICAgICAgY29uc3QgY2FjaGVkVk5vZGUgPSBjYWNoZS5nZXQoa2V5KTtcclxuICAgICAgICAgICAgLy8gY2xvbmUgdm5vZGUgaWYgaXQncyByZXVzZWQgYmVjYXVzZSB3ZSBhcmUgZ29pbmcgdG8gbXV0YXRlIGl0XHJcbiAgICAgICAgICAgIGlmICh2bm9kZS5lbCkge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUgPSBjbG9uZVZOb2RlKHZub2RlKTtcclxuICAgICAgICAgICAgICAgIGlmIChyYXdWTm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICByYXdWTm9kZS5zc0NvbnRlbnQgPSB2bm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAjMTUxMyBpdCdzIHBvc3NpYmxlIGZvciB0aGUgcmV0dXJuZWQgdm5vZGUgdG8gYmUgY2xvbmVkIGR1ZSB0byBhdHRyXHJcbiAgICAgICAgICAgIC8vIGZhbGx0aHJvdWdoIG9yIHNjb3BlSWQsIHNvIHRoZSB2bm9kZSBoZXJlIG1heSBub3QgYmUgdGhlIGZpbmFsIHZub2RlXHJcbiAgICAgICAgICAgIC8vIHRoYXQgaXMgbW91bnRlZC4gSW5zdGVhZCBvZiBjYWNoaW5nIGl0IGRpcmVjdGx5LCB3ZSBzdG9yZSB0aGUgcGVuZGluZ1xyXG4gICAgICAgICAgICAvLyBrZXkgYW5kIGNhY2hlIGBpbnN0YW5jZS5zdWJUcmVlYCAodGhlIG5vcm1hbGl6ZWQgdm5vZGUpIGluXHJcbiAgICAgICAgICAgIC8vIGJlZm9yZU1vdW50L2JlZm9yZVVwZGF0ZSBob29rcy5cclxuICAgICAgICAgICAgcGVuZGluZ0NhY2hlS2V5ID0ga2V5O1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVkVk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvcHkgb3ZlciBtb3VudGVkIHN0YXRlXHJcbiAgICAgICAgICAgICAgICB2bm9kZS5lbCA9IGNhY2hlZFZOb2RlLmVsO1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuY29tcG9uZW50ID0gY2FjaGVkVk5vZGUuY29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKHZub2RlLnRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZWN1cnNpdmVseSB1cGRhdGUgdHJhbnNpdGlvbiBob29rcyBvbiBzdWJUcmVlXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCB2bm9kZS50cmFuc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGF2b2lkIHZub2RlIGJlaW5nIG1vdW50ZWQgYXMgZnJlc2hcclxuICAgICAgICAgICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSA1MTIgLyogQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi87XHJcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHRoaXMga2V5IHRoZSBmcmVzaGVzdFxyXG4gICAgICAgICAgICAgICAga2V5cy5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAgICAgIGtleXMuYWRkKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBrZXlzLmFkZChrZXkpO1xyXG4gICAgICAgICAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XHJcbiAgICAgICAgICAgICAgICBpZiAobWF4ICYmIGtleXMuc2l6ZSA+IHBhcnNlSW50KG1heCwgMTApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGtleXMudmFsdWVzKCkubmV4dCgpLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhdm9pZCB2bm9kZSBiZWluZyB1bm1vdW50ZWRcclxuICAgICAgICAgICAgdm5vZGUuc2hhcGVGbGFnIHw9IDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi87XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSB2bm9kZTtcclxuICAgICAgICAgICAgcmV0dXJuIHJhd1ZOb2RlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn07XHJcbi8vIGV4cG9ydCB0aGUgcHVibGljIHR5cGUgZm9yIGgvdHN4IGluZmVyZW5jZVxyXG4vLyBhbHNvIHRvIGF2b2lkIGlubGluZSBpbXBvcnQoKSBpbiBnZW5lcmF0ZWQgZC50cyBmaWxlc1xyXG5jb25zdCBLZWVwQWxpdmUgPSBLZWVwQWxpdmVJbXBsO1xyXG5mdW5jdGlvbiBnZXROYW1lKGNvbXApIHtcclxuICAgIHJldHVybiBjb21wLmRpc3BsYXlOYW1lIHx8IGNvbXAubmFtZTtcclxufVxyXG5mdW5jdGlvbiBtYXRjaGVzKHBhdHRlcm4sIG5hbWUpIHtcclxuICAgIGlmIChpc0FycmF5KHBhdHRlcm4pKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4uc29tZSgocCkgPT4gbWF0Y2hlcyhwLCBuYW1lKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1N0cmluZyhwYXR0ZXJuKSkge1xyXG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocGF0dGVybi50ZXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKTtcclxuICAgIH1cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gb25BY3RpdmF0ZWQoaG9vaywgdGFyZ2V0KSB7XHJcbiAgICByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgXCJhXCIgLyogQUNUSVZBVEVEICovLCB0YXJnZXQpO1xyXG59XHJcbmZ1bmN0aW9uIG9uRGVhY3RpdmF0ZWQoaG9vaywgdGFyZ2V0KSB7XHJcbiAgICByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgXCJkYVwiIC8qIERFQUNUSVZBVEVEICovLCB0YXJnZXQpO1xyXG59XHJcbmZ1bmN0aW9uIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCB0eXBlLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgIC8vIGNhY2hlIHRoZSBkZWFjdGl2YXRlIGJyYW5jaCBjaGVjayB3cmFwcGVyIGZvciBpbmplY3RlZCBob29rcyBzbyB0aGUgc2FtZVxyXG4gICAgLy8gaG9vayBjYW4gYmUgcHJvcGVybHkgZGVkdXBlZCBieSB0aGUgc2NoZWR1bGVyLiBcIl9fd2RjXCIgc3RhbmRzIGZvciBcIndpdGhcclxuICAgIC8vIGRlYWN0aXZhdGlvbiBjaGVja1wiLlxyXG4gICAgY29uc3Qgd3JhcHBlZEhvb2sgPSBob29rLl9fd2RjIHx8XHJcbiAgICAgICAgKGhvb2suX193ZGMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgZmlyZSB0aGUgaG9vayBpZiB0aGUgdGFyZ2V0IGluc3RhbmNlIGlzIE5PVCBpbiBhIGRlYWN0aXZhdGVkIGJyYW5jaC5cclxuICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSB0YXJnZXQ7XHJcbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5pc0RlYWN0aXZhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGhvb2soKTtcclxuICAgICAgICB9KTtcclxuICAgIGluamVjdEhvb2sodHlwZSwgd3JhcHBlZEhvb2ssIHRhcmdldCk7XHJcbiAgICAvLyBJbiBhZGRpdGlvbiB0byByZWdpc3RlcmluZyBpdCBvbiB0aGUgdGFyZ2V0IGluc3RhbmNlLCB3ZSB3YWxrIHVwIHRoZSBwYXJlbnRcclxuICAgIC8vIGNoYWluIGFuZCByZWdpc3RlciBpdCBvbiBhbGwgYW5jZXN0b3IgaW5zdGFuY2VzIHRoYXQgYXJlIGtlZXAtYWxpdmUgcm9vdHMuXHJcbiAgICAvLyBUaGlzIGF2b2lkcyB0aGUgbmVlZCB0byB3YWxrIHRoZSBlbnRpcmUgY29tcG9uZW50IHRyZWUgd2hlbiBpbnZva2luZyB0aGVzZVxyXG4gICAgLy8gaG9va3MsIGFuZCBtb3JlIGltcG9ydGFudGx5LCBhdm9pZHMgdGhlIG5lZWQgdG8gdHJhY2sgY2hpbGQgY29tcG9uZW50cyBpblxyXG4gICAgLy8gYXJyYXlzLlxyXG4gICAgaWYgKHRhcmdldCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50ID0gdGFyZ2V0LnBhcmVudDtcclxuICAgICAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50LnBhcmVudCkge1xyXG4gICAgICAgICAgICBpZiAoaXNLZWVwQWxpdmUoY3VycmVudC5wYXJlbnQudm5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmplY3RUb0tlZXBBbGl2ZVJvb3Qod3JhcHBlZEhvb2ssIHR5cGUsIHRhcmdldCwgY3VycmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpbmplY3RUb0tlZXBBbGl2ZVJvb3QoaG9vaywgdHlwZSwgdGFyZ2V0LCBrZWVwQWxpdmVSb290KSB7XHJcbiAgICAvLyBpbmplY3RIb29rIHdyYXBzIHRoZSBvcmlnaW5hbCBmb3IgZXJyb3IgaGFuZGxpbmcsIHNvIG1ha2Ugc3VyZSB0byByZW1vdmVcclxuICAgIC8vIHRoZSB3cmFwcGVkIHZlcnNpb24uXHJcbiAgICBjb25zdCBpbmplY3RlZCA9IGluamVjdEhvb2sodHlwZSwgaG9vaywga2VlcEFsaXZlUm9vdCwgdHJ1ZSAvKiBwcmVwZW5kICovKTtcclxuICAgIG9uVW5tb3VudGVkKCgpID0+IHtcclxuICAgICAgICByZW1vdmUoa2VlcEFsaXZlUm9vdFt0eXBlXSwgaW5qZWN0ZWQpO1xyXG4gICAgfSwgdGFyZ2V0KTtcclxufVxyXG5mdW5jdGlvbiByZXNldFNoYXBlRmxhZyh2bm9kZSkge1xyXG4gICAgbGV0IHNoYXBlRmxhZyA9IHZub2RlLnNoYXBlRmxhZztcclxuICAgIGlmIChzaGFwZUZsYWcgJiAyNTYgLyogQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovKSB7XHJcbiAgICAgICAgc2hhcGVGbGFnIC09IDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi87XHJcbiAgICB9XHJcbiAgICBpZiAoc2hhcGVGbGFnICYgNTEyIC8qIENPTVBPTkVOVF9LRVBUX0FMSVZFICovKSB7XHJcbiAgICAgICAgc2hhcGVGbGFnIC09IDUxMiAvKiBDT01QT05FTlRfS0VQVF9BTElWRSAqLztcclxuICAgIH1cclxuICAgIHZub2RlLnNoYXBlRmxhZyA9IHNoYXBlRmxhZztcclxufVxyXG5mdW5jdGlvbiBnZXRJbm5lckNoaWxkKHZub2RlKSB7XHJcbiAgICByZXR1cm4gdm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovID8gdm5vZGUuc3NDb250ZW50IDogdm5vZGU7XHJcbn1cblxuY29uc3QgaXNJbnRlcm5hbEtleSA9IChrZXkpID0+IGtleVswXSA9PT0gJ18nIHx8IGtleSA9PT0gJyRzdGFibGUnO1xyXG5jb25zdCBub3JtYWxpemVTbG90VmFsdWUgPSAodmFsdWUpID0+IGlzQXJyYXkodmFsdWUpXHJcbiAgICA/IHZhbHVlLm1hcChub3JtYWxpemVWTm9kZSlcclxuICAgIDogW25vcm1hbGl6ZVZOb2RlKHZhbHVlKV07XHJcbmNvbnN0IG5vcm1hbGl6ZVNsb3QgPSAoa2V5LCByYXdTbG90LCBjdHgpID0+IHdpdGhDdHgoKHByb3BzKSA9PiB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGN1cnJlbnRJbnN0YW5jZSkge1xyXG4gICAgICAgIHdhcm4oYFNsb3QgXCIke2tleX1cIiBpbnZva2VkIG91dHNpZGUgb2YgdGhlIHJlbmRlciBmdW5jdGlvbjogYCArXHJcbiAgICAgICAgICAgIGB0aGlzIHdpbGwgbm90IHRyYWNrIGRlcGVuZGVuY2llcyB1c2VkIGluIHRoZSBzbG90LiBgICtcclxuICAgICAgICAgICAgYEludm9rZSB0aGUgc2xvdCBmdW5jdGlvbiBpbnNpZGUgdGhlIHJlbmRlciBmdW5jdGlvbiBpbnN0ZWFkLmApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vcm1hbGl6ZVNsb3RWYWx1ZShyYXdTbG90KHByb3BzKSk7XHJcbn0sIGN0eCk7XHJcbmNvbnN0IG5vcm1hbGl6ZU9iamVjdFNsb3RzID0gKHJhd1Nsb3RzLCBzbG90cykgPT4ge1xyXG4gICAgY29uc3QgY3R4ID0gcmF3U2xvdHMuX2N0eDtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHJhd1Nsb3RzKSB7XHJcbiAgICAgICAgaWYgKGlzSW50ZXJuYWxLZXkoa2V5KSlcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSByYXdTbG90c1trZXldO1xyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBzbG90c1trZXldID0gbm9ybWFsaXplU2xvdChrZXksIHZhbHVlLCBjdHgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYE5vbi1mdW5jdGlvbiB2YWx1ZSBlbmNvdW50ZXJlZCBmb3Igc2xvdCBcIiR7a2V5fVwiLiBgICtcclxuICAgICAgICAgICAgICAgICAgICBgUHJlZmVyIGZ1bmN0aW9uIHNsb3RzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVNsb3RWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIHNsb3RzW2tleV0gPSAoKSA9PiBub3JtYWxpemVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuY29uc3Qgbm9ybWFsaXplVk5vZGVTbG90cyA9IChpbnN0YW5jZSwgY2hpbGRyZW4pID0+IHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzS2VlcEFsaXZlKGluc3RhbmNlLnZub2RlKSkge1xyXG4gICAgICAgIHdhcm4oYE5vbi1mdW5jdGlvbiB2YWx1ZSBlbmNvdW50ZXJlZCBmb3IgZGVmYXVsdCBzbG90LiBgICtcclxuICAgICAgICAgICAgYFByZWZlciBmdW5jdGlvbiBzbG90cyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLmApO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVNsb3RWYWx1ZShjaGlsZHJlbik7XHJcbiAgICBpbnN0YW5jZS5zbG90cy5kZWZhdWx0ID0gKCkgPT4gbm9ybWFsaXplZDtcclxufTtcclxuY29uc3QgaW5pdFNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbikgPT4ge1xyXG4gICAgaWYgKGluc3RhbmNlLnZub2RlLnNoYXBlRmxhZyAmIDMyIC8qIFNMT1RTX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9IGNoaWxkcmVuLl87XHJcbiAgICAgICAgaWYgKHR5cGUpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2Uuc2xvdHMgPSBjaGlsZHJlbjtcclxuICAgICAgICAgICAgLy8gbWFrZSBjb21waWxlciBtYXJrZXIgbm9uLWVudW1lcmFibGVcclxuICAgICAgICAgICAgZGVmKGNoaWxkcmVuLCAnXycsIHR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbm9ybWFsaXplT2JqZWN0U2xvdHMoY2hpbGRyZW4sIChpbnN0YW5jZS5zbG90cyA9IHt9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaW5zdGFuY2Uuc2xvdHMgPSB7fTtcclxuICAgICAgICBpZiAoY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgbm9ybWFsaXplVk5vZGVTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRlZihpbnN0YW5jZS5zbG90cywgSW50ZXJuYWxPYmplY3RLZXksIDEpO1xyXG59O1xyXG5jb25zdCB1cGRhdGVTbG90cyA9IChpbnN0YW5jZSwgY2hpbGRyZW4pID0+IHtcclxuICAgIGNvbnN0IHsgdm5vZGUsIHNsb3RzIH0gPSBpbnN0YW5jZTtcclxuICAgIGxldCBuZWVkRGVsZXRpb25DaGVjayA9IHRydWU7XHJcbiAgICBsZXQgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0gRU1QVFlfT0JKO1xyXG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDMyIC8qIFNMT1RTX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9IGNoaWxkcmVuLl87XHJcbiAgICAgICAgaWYgKHR5cGUpIHtcclxuICAgICAgICAgICAgLy8gY29tcGlsZWQgc2xvdHMuXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNIbXJVcGRhdGluZykge1xyXG4gICAgICAgICAgICAgICAgLy8gUGFyZW50IHdhcyBITVIgdXBkYXRlZCBzbyBzbG90IGNvbnRlbnQgbWF5IGhhdmUgY2hhbmdlZC5cclxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIHVwZGF0ZSBzbG90cyBhbmQgbWFyayBpbnN0YW5jZSBmb3IgaG1yIGFzIHdlbGxcclxuICAgICAgICAgICAgICAgIGV4dGVuZChzbG90cywgY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IDEgLyogU1RBQkxFICovKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb21waWxlZCBBTkQgc3RhYmxlLlxyXG4gICAgICAgICAgICAgICAgLy8gbm8gbmVlZCB0byB1cGRhdGUsIGFuZCBza2lwIHN0YWxlIHNsb3RzIHJlbW92YWwuXHJcbiAgICAgICAgICAgICAgICBuZWVkRGVsZXRpb25DaGVjayA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZWQgYnV0IGR5bmFtaWMgKHYtaWYvdi1mb3Igb24gc2xvdHMpIC0gdXBkYXRlIHNsb3RzLCBidXQgc2tpcFxyXG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsaXphdGlvbi5cclxuICAgICAgICAgICAgICAgIGV4dGVuZChzbG90cywgY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuZWVkRGVsZXRpb25DaGVjayA9ICFjaGlsZHJlbi4kc3RhYmxlO1xyXG4gICAgICAgICAgICBub3JtYWxpemVPYmplY3RTbG90cyhjaGlsZHJlbiwgc2xvdHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQgPSBjaGlsZHJlbjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGNoaWxkcmVuKSB7XHJcbiAgICAgICAgLy8gbm9uIHNsb3Qgb2JqZWN0IGNoaWxkcmVuIChkaXJlY3QgdmFsdWUpIHBhc3NlZCB0byBhIGNvbXBvbmVudFxyXG4gICAgICAgIG5vcm1hbGl6ZVZOb2RlU2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcclxuICAgICAgICBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQgPSB7IGRlZmF1bHQ6IDEgfTtcclxuICAgIH1cclxuICAgIC8vIGRlbGV0ZSBzdGFsZSBzbG90c1xyXG4gICAgaWYgKG5lZWREZWxldGlvbkNoZWNrKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2xvdHMpIHtcclxuICAgICAgICAgICAgaWYgKCFpc0ludGVybmFsS2V5KGtleSkgJiYgIShrZXkgaW4gZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHNsb3RzW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XG5cbi8qKlxyXG5SdW50aW1lIGhlbHBlciBmb3IgYXBwbHlpbmcgZGlyZWN0aXZlcyB0byBhIHZub2RlLiBFeGFtcGxlIHVzYWdlOlxyXG5cbmNvbnN0IGNvbXAgPSByZXNvbHZlQ29tcG9uZW50KCdjb21wJylcclxuY29uc3QgZm9vID0gcmVzb2x2ZURpcmVjdGl2ZSgnZm9vJylcclxuY29uc3QgYmFyID0gcmVzb2x2ZURpcmVjdGl2ZSgnYmFyJylcclxuXG5yZXR1cm4gd2l0aERpcmVjdGl2ZXMoaChjb21wKSwgW1xyXG4gIFtmb28sIHRoaXMueF0sXHJcbiAgW2JhciwgdGhpcy55XVxyXG5dKVxyXG4qL1xyXG5jb25zdCBpc0J1aWx0SW5EaXJlY3RpdmUgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ2JpbmQsY2xvYWssZWxzZS1pZixlbHNlLGZvcixodG1sLGlmLG1vZGVsLG9uLG9uY2UscHJlLHNob3csc2xvdCx0ZXh0Jyk7XHJcbmZ1bmN0aW9uIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lKSB7XHJcbiAgICBpZiAoaXNCdWlsdEluRGlyZWN0aXZlKG5hbWUpKSB7XHJcbiAgICAgICAgd2FybignRG8gbm90IHVzZSBidWlsdC1pbiBkaXJlY3RpdmUgaWRzIGFzIGN1c3RvbSBkaXJlY3RpdmUgaWQ6ICcgKyBuYW1lKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQWRkcyBkaXJlY3RpdmVzIHRvIGEgVk5vZGUuXHJcbiAqL1xyXG5mdW5jdGlvbiB3aXRoRGlyZWN0aXZlcyh2bm9kZSwgZGlyZWN0aXZlcykge1xyXG4gICAgY29uc3QgaW50ZXJuYWxJbnN0YW5jZSA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcclxuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlID09PSBudWxsKSB7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHdpdGhEaXJlY3RpdmVzIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHJlbmRlciBmdW5jdGlvbnMuYCk7XHJcbiAgICAgICAgcmV0dXJuIHZub2RlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBpbnRlcm5hbEluc3RhbmNlLnByb3h5O1xyXG4gICAgY29uc3QgYmluZGluZ3MgPSB2bm9kZS5kaXJzIHx8ICh2bm9kZS5kaXJzID0gW10pO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3RpdmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IFtkaXIsIHZhbHVlLCBhcmcsIG1vZGlmaWVycyA9IEVNUFRZX09CSl0gPSBkaXJlY3RpdmVzW2ldO1xyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGRpcikpIHtcclxuICAgICAgICAgICAgZGlyID0ge1xyXG4gICAgICAgICAgICAgICAgbW91bnRlZDogZGlyLFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlZDogZGlyXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJpbmRpbmdzLnB1c2goe1xyXG4gICAgICAgICAgICBkaXIsXHJcbiAgICAgICAgICAgIGluc3RhbmNlLFxyXG4gICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgb2xkVmFsdWU6IHZvaWQgMCxcclxuICAgICAgICAgICAgYXJnLFxyXG4gICAgICAgICAgICBtb2RpZmllcnNcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB2bm9kZTtcclxufVxyXG5mdW5jdGlvbiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBwcmV2Vk5vZGUsIGluc3RhbmNlLCBuYW1lKSB7XHJcbiAgICBjb25zdCBiaW5kaW5ncyA9IHZub2RlLmRpcnM7XHJcbiAgICBjb25zdCBvbGRCaW5kaW5ncyA9IHByZXZWTm9kZSAmJiBwcmV2Vk5vZGUuZGlycztcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluZGluZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbaV07XHJcbiAgICAgICAgaWYgKG9sZEJpbmRpbmdzKSB7XHJcbiAgICAgICAgICAgIGJpbmRpbmcub2xkVmFsdWUgPSBvbGRCaW5kaW5nc1tpXS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaG9vayA9IGJpbmRpbmcuZGlyW25hbWVdO1xyXG4gICAgICAgIGlmIChob29rKSB7XHJcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA4IC8qIERJUkVDVElWRV9IT09LICovLCBbXHJcbiAgICAgICAgICAgICAgICB2bm9kZS5lbCxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmcsXHJcbiAgICAgICAgICAgICAgICB2bm9kZSxcclxuICAgICAgICAgICAgICAgIHByZXZWTm9kZVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXBwQ29udGV4dCgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYXBwOiBudWxsLFxyXG4gICAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgICAgICBpc05hdGl2ZVRhZzogTk8sXHJcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlOiBmYWxzZSxcclxuICAgICAgICAgICAgZ2xvYmFsUHJvcGVydGllczoge30sXHJcbiAgICAgICAgICAgIG9wdGlvbk1lcmdlU3RyYXRlZ2llczoge30sXHJcbiAgICAgICAgICAgIGlzQ3VzdG9tRWxlbWVudDogTk8sXHJcbiAgICAgICAgICAgIGVycm9ySGFuZGxlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB3YXJuSGFuZGxlcjogdW5kZWZpbmVkXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtaXhpbnM6IFtdLFxyXG4gICAgICAgIGNvbXBvbmVudHM6IHt9LFxyXG4gICAgICAgIGRpcmVjdGl2ZXM6IHt9LFxyXG4gICAgICAgIHByb3ZpZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpXHJcbiAgICB9O1xyXG59XHJcbmxldCB1aWQgPSAwO1xyXG5mdW5jdGlvbiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQXBwKHJvb3RDb21wb25lbnQsIHJvb3RQcm9wcyA9IG51bGwpIHtcclxuICAgICAgICBpZiAocm9vdFByb3BzICE9IG51bGwgJiYgIWlzT2JqZWN0KHJvb3RQcm9wcykpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHJvb3QgcHJvcHMgcGFzc2VkIHRvIGFwcC5tb3VudCgpIG11c3QgYmUgYW4gb2JqZWN0LmApO1xyXG4gICAgICAgICAgICByb290UHJvcHMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xyXG4gICAgICAgIGNvbnN0IGluc3RhbGxlZFBsdWdpbnMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgbGV0IGlzTW91bnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IGFwcCA9IChjb250ZXh0LmFwcCA9IHtcclxuICAgICAgICAgICAgX3VpZDogdWlkKyssXHJcbiAgICAgICAgICAgIF9jb21wb25lbnQ6IHJvb3RDb21wb25lbnQsXHJcbiAgICAgICAgICAgIF9wcm9wczogcm9vdFByb3BzLFxyXG4gICAgICAgICAgICBfY29udGFpbmVyOiBudWxsLFxyXG4gICAgICAgICAgICBfY29udGV4dDogY29udGV4dCxcclxuICAgICAgICAgICAgdmVyc2lvbixcclxuICAgICAgICAgICAgZ2V0IGNvbmZpZygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNvbmZpZztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0IGNvbmZpZyh2KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgYXBwLmNvbmZpZyBjYW5ub3QgYmUgcmVwbGFjZWQuIE1vZGlmeSBpbmRpdmlkdWFsIG9wdGlvbnMgaW5zdGVhZC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdXNlKHBsdWdpbiwgLi4ub3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaGFzKHBsdWdpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybihgUGx1Z2luIGhhcyBhbHJlYWR5IGJlZW4gYXBwbGllZCB0byB0YXJnZXQgYXBwLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGx1Z2luICYmIGlzRnVuY3Rpb24ocGx1Z2luLmluc3RhbGwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVkUGx1Z2lucy5hZGQocGx1Z2luKTtcclxuICAgICAgICAgICAgICAgICAgICBwbHVnaW4uaW5zdGFsbChhcHAsIC4uLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNGdW5jdGlvbihwbHVnaW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVkUGx1Z2lucy5hZGQocGx1Z2luKTtcclxuICAgICAgICAgICAgICAgICAgICBwbHVnaW4oYXBwLCAuLi5vcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEEgcGx1Z2luIG11c3QgZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0IHdpdGggYW4gXCJpbnN0YWxsXCIgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBmdW5jdGlvbi5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1peGluKG1peGluKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX19WVUVfT1BUSU9OU19BUElfXykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29udGV4dC5taXhpbnMuaW5jbHVkZXMobWl4aW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubWl4aW5zLnB1c2gobWl4aW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBnbG9iYWwgbWl4aW4gd2l0aCBwcm9wcy9lbWl0cyBkZS1vcHRpbWl6ZXMgcHJvcHMvZW1pdHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9ybWFsaXphdGlvbiBjYWNoaW5nLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWl4aW4ucHJvcHMgfHwgbWl4aW4uZW1pdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZGVvcHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKCdNaXhpbiBoYXMgYWxyZWFkeSBiZWVuIGFwcGxpZWQgdG8gdGFyZ2V0IGFwcCcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1peGluLm5hbWUgPyBgOiAke21peGluLm5hbWV9YCA6ICcnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybignTWl4aW5zIGFyZSBvbmx5IGF2YWlsYWJsZSBpbiBidWlsZHMgc3VwcG9ydGluZyBPcHRpb25zIEFQSScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29tcG9uZW50KG5hbWUsIGNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lLCBjb250ZXh0LmNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXSA9IGNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRpcmVjdGl2ZShuYW1lLCBkaXJlY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRpcmVjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmRpcmVjdGl2ZXNbbmFtZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYERpcmVjdGl2ZSBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSA9IGRpcmVjdGl2ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdW50KHJvb3RDb250YWluZXIsIGlzSHlkcmF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKHJvb3RDb21wb25lbnQsIHJvb3RQcm9wcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmUgYXBwIGNvbnRleHQgb24gdGhlIHJvb3QgVk5vZGUuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIGJlIHNldCBvbiB0aGUgcm9vdCBpbnN0YW5jZSBvbiBpbml0aWFsIG1vdW50LlxyXG4gICAgICAgICAgICAgICAgICAgIHZub2RlLmFwcENvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEhNUiByb290IHJlbG9hZFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5yZWxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIoY2xvbmVWTm9kZSh2bm9kZSksIHJvb3RDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNIeWRyYXRlICYmIGh5ZHJhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHlkcmF0ZSh2bm9kZSwgcm9vdENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIodm5vZGUsIHJvb3RDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5fY29udGFpbmVyID0gcm9vdENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICByb290Q29udGFpbmVyLl9fdnVlX2FwcF9fID0gYXBwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldnRvb2xzSW5pdEFwcChhcHAsIHZlcnNpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm5vZGUuY29tcG9uZW50LnByb3h5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQXBwIGhhcyBhbHJlYWR5IGJlZW4gbW91bnRlZC5cXG5gICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYElmIHlvdSB3YW50IHRvIHJlbW91bnQgdGhlIHNhbWUgYXBwLCBtb3ZlIHlvdXIgYXBwIGNyZWF0aW9uIGxvZ2ljIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgaW50byBhIGZhY3RvcnkgZnVuY3Rpb24gYW5kIGNyZWF0ZSBmcmVzaCBhcHAgaW5zdGFuY2VzIGZvciBlYWNoIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgbW91bnQgLSBlLmcuIFxcYGNvbnN0IGNyZWF0ZU15QXBwID0gKCkgPT4gY3JlYXRlQXBwKEFwcClcXGBgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5tb3VudCgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW5kZXIobnVsbCwgYXBwLl9jb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldnRvb2xzVW5tb3VudEFwcChhcHApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENhbm5vdCB1bm1vdW50IGFuIGFwcCB0aGF0IGlzIG5vdCBtb3VudGVkLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcm92aWRlKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYga2V5IGluIGNvbnRleHQucHJvdmlkZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBBcHAgYWxyZWFkeSBwcm92aWRlcyBwcm9wZXJ0eSB3aXRoIGtleSBcIiR7U3RyaW5nKGtleSl9XCIuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgSXQgd2lsbCBiZSBvdmVyd3JpdHRlbiB3aXRoIHRoZSBuZXcgdmFsdWUuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBUeXBlU2NyaXB0IGRvZXNuJ3QgYWxsb3cgc3ltYm9scyBhcyBpbmRleCB0eXBlXHJcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzI0NTg3XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnByb3ZpZGVzW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgfTtcclxufVxuXG5sZXQgaGFzTWlzbWF0Y2ggPSBmYWxzZTtcclxuY29uc3QgaXNTVkdDb250YWluZXIgPSAoY29udGFpbmVyKSA9PiAvc3ZnLy50ZXN0KGNvbnRhaW5lci5uYW1lc3BhY2VVUkkpICYmIGNvbnRhaW5lci50YWdOYW1lICE9PSAnZm9yZWlnbk9iamVjdCc7XHJcbmNvbnN0IGlzQ29tbWVudCA9IChub2RlKSA9PiBub2RlLm5vZGVUeXBlID09PSA4IC8qIENPTU1FTlQgKi87XHJcbi8vIE5vdGU6IGh5ZHJhdGlvbiBpcyBET00tc3BlY2lmaWNcclxuLy8gQnV0IHdlIGhhdmUgdG8gcGxhY2UgaXQgaW4gY29yZSBkdWUgdG8gdGlnaHQgY291cGxpbmcgd2l0aCBjb3JlIC0gc3BsaXR0aW5nXHJcbi8vIGl0IG91dCBjcmVhdGVzIGEgdG9uIG9mIHVubmVjZXNzYXJ5IGNvbXBsZXhpdHkuXHJcbi8vIEh5ZHJhdGlvbiBhbHNvIGRlcGVuZHMgb24gc29tZSByZW5kZXJlciBpbnRlcm5hbCBsb2dpYyB3aGljaCBuZWVkcyB0byBiZVxyXG4vLyBwYXNzZWQgaW4gdmlhIGFyZ3VtZW50cy5cclxuZnVuY3Rpb24gY3JlYXRlSHlkcmF0aW9uRnVuY3Rpb25zKHJlbmRlcmVySW50ZXJuYWxzKSB7XHJcbiAgICBjb25zdCB7IG10OiBtb3VudENvbXBvbmVudCwgcDogcGF0Y2gsIG86IHsgcGF0Y2hQcm9wLCBuZXh0U2libGluZywgcGFyZW50Tm9kZSwgcmVtb3ZlLCBpbnNlcnQsIGNyZWF0ZUNvbW1lbnQgfSB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XHJcbiAgICBjb25zdCBoeWRyYXRlID0gKHZub2RlLCBjb250YWluZXIpID0+IHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFjb250YWluZXIuaGFzQ2hpbGROb2RlcygpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEF0dGVtcHRpbmcgdG8gaHlkcmF0ZSBleGlzdGluZyBtYXJrdXAgYnV0IGNvbnRhaW5lciBpcyBlbXB0eS4gYCArXHJcbiAgICAgICAgICAgICAgICBgUGVyZm9ybWluZyBmdWxsIG1vdW50IGluc3RlYWQuYCk7XHJcbiAgICAgICAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhhc01pc21hdGNoID0gZmFsc2U7XHJcbiAgICAgICAgaHlkcmF0ZU5vZGUoY29udGFpbmVyLmZpcnN0Q2hpbGQsIHZub2RlLCBudWxsLCBudWxsKTtcclxuICAgICAgICBmbHVzaFBvc3RGbHVzaENicygpO1xyXG4gICAgICAgIGlmIChoYXNNaXNtYXRjaCAmJiAhZmFsc2UpIHtcclxuICAgICAgICAgICAgLy8gdGhpcyBlcnJvciBzaG91bGQgc2hvdyB1cCBpbiBwcm9kdWN0aW9uXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEh5ZHJhdGlvbiBjb21wbGV0ZWQgYnV0IGNvbnRhaW5zIG1pc21hdGNoZXMuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IGh5ZHJhdGVOb2RlID0gKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlzRnJhZ21lbnRTdGFydCA9IGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09ICdbJztcclxuICAgICAgICBjb25zdCBvbk1pc21hdGNoID0gKCkgPT4gaGFuZGxlTWlzbWF0Y2gobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzRnJhZ21lbnRTdGFydCk7XHJcbiAgICAgICAgY29uc3QgeyB0eXBlLCByZWYsIHNoYXBlRmxhZyB9ID0gdm5vZGU7XHJcbiAgICAgICAgY29uc3QgZG9tVHlwZSA9IG5vZGUubm9kZVR5cGU7XHJcbiAgICAgICAgdm5vZGUuZWwgPSBub2RlO1xyXG4gICAgICAgIGxldCBuZXh0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVGV4dDpcclxuICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSAzIC8qIFRFWFQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgIT09IHZub2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gdGV4dCBtaXNtYXRjaDpgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXFxuLSBDbGllbnQ6ICR7SlNPTi5zdHJpbmdpZnkobm9kZS5kYXRhKX1gICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXFxuLSBTZXJ2ZXI6ICR7SlNPTi5zdHJpbmdpZnkodm5vZGUuY2hpbGRyZW4pfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmRhdGEgPSB2bm9kZS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1lbnQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gOCAvKiBDT01NRU5UICovIHx8IGlzRnJhZ21lbnRTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFN0YXRpYzpcclxuICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSAxIC8qIEVMRU1FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBhbmNob3IsIGFkb3B0IGNvbnRlbnRcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHN0YXRpYyB2bm9kZSBoYXMgaXRzIGNvbnRlbnQgc3RyaXBwZWQgZHVyaW5nIGJ1aWxkLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkb3B0IGl0IGZyb20gdGhlIHNlcnZlci1yZW5kZXJlZCBIVE1MLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5lZWRUb0Fkb3B0Q29udGVudCA9ICF2bm9kZS5jaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2bm9kZS5zdGF0aWNDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWVkVG9BZG9wdENvbnRlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS5jaGlsZHJlbiArPSBuZXh0Tm9kZS5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSB2bm9kZS5zdGF0aWNDb3VudCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmFuY2hvciA9IG5leHROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobmV4dE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGcmFnbWVudDpcclxuICAgICAgICAgICAgICAgIGlmICghaXNGcmFnbWVudFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGh5ZHJhdGVGcmFnbWVudChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSAxIC8qIEVMRU1FTlQgKi8gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUudHlwZSAhPT0gbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGh5ZHJhdGVFbGVtZW50KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiBzZXR0aW5nIHVwIHRoZSByZW5kZXIgZWZmZWN0LCBpZiB0aGUgaW5pdGlhbCB2bm9kZSBhbHJlYWR5XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFzIC5lbCBzZXQsIHRoZSBjb21wb25lbnQgd2lsbCBwZXJmb3JtIGh5ZHJhdGlvbiBpbnN0ZWFkIG9mIG1vdW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb24gaXRzIHN1Yi10cmVlLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHlkcmF0ZUNvbXBvbmVudCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW91bnRDb21wb25lbnQodm5vZGUsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIoY29udGFpbmVyKSwgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzeW5jIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvYWRBc3luYyA9IHZub2RlLnR5cGUuX19hc3luY0xvYWRlcjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobG9hZEFzeW5jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRBc3luYygpLnRoZW4oaHlkcmF0ZUNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoeWRyYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgYmUgYXN5bmMsIHNvIGluIHRoZSBjYXNlIG9mIGZyYWdtZW50cyB3ZSBjYW5ub3QgcmVseVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIGNvbXBvbmVudCdzIHJlbmRlcmVkIG91dHB1dCB0byBkZXRlcm1pbmUgdGhlIGVuZCBvZiB0aGUgZnJhZ21lbnRcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbnN0ZWFkLCB3ZSBkbyBhIGxvb2thaGVhZCB0byBmaW5kIHRoZSBlbmQgYW5jaG9yIG5vZGUuXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBpc0ZyYWdtZW50U3RhcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBsb2NhdGVDbG9zaW5nQXN5bmNBbmNob3Iobm9kZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXh0U2libGluZyhub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDY0IC8qIFRFTEVQT1JUICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDggLyogQ09NTUVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gdm5vZGUudHlwZS5oeWRyYXRlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBoeWRyYXRlQ2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBzaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IHZub2RlLnR5cGUuaHlkcmF0ZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIocGFyZW50Tm9kZShub2RlKSksIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVOb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgSG9zdFZOb2RlIHR5cGU6JywgdHlwZSwgYCgke3R5cGVvZiB0eXBlfSlgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlZiAhPSBudWxsICYmIHBhcmVudENvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB2bm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXh0Tm9kZTtcclxuICAgIH07XHJcbiAgICBjb25zdCBoeWRyYXRlRWxlbWVudCA9IChlbCwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXZub2RlLmR5bmFtaWNDaGlsZHJlbjtcclxuICAgICAgICBjb25zdCB7IHByb3BzLCBwYXRjaEZsYWcsIHNoYXBlRmxhZywgZGlycyB9ID0gdm5vZGU7XHJcbiAgICAgICAgLy8gc2tpcCBwcm9wcyAmIGNoaWxkcmVuIGlmIHRoaXMgaXMgaG9pc3RlZCBzdGF0aWMgbm9kZXNcclxuICAgICAgICBpZiAocGF0Y2hGbGFnICE9PSAtMSAvKiBIT0lTVEVEICovKSB7XHJcbiAgICAgICAgICAgIGlmIChkaXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdjcmVhdGVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcHJvcHNcclxuICAgICAgICAgICAgaWYgKHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGltaXplZCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChwYXRjaEZsYWcgJiAxNiAvKiBGVUxMX1BST1BTICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoRmxhZyAmIDMyIC8qIEhZRFJBVEVfRVZFTlRTICovKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNSZXNlcnZlZFByb3Aoa2V5KSAmJiBpc09uKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoUHJvcChlbCwga2V5LCBudWxsLCBwcm9wc1trZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3BzLm9uQ2xpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBGYXN0IHBhdGggZm9yIGNsaWNrIGxpc3RlbmVycyAod2hpY2ggaXMgbW9zdCBvZnRlbikgdG8gYXZvaWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBpdGVyYXRpbmcgdGhyb3VnaCBwcm9wcy5cclxuICAgICAgICAgICAgICAgICAgICBwYXRjaFByb3AoZWwsICdvbkNsaWNrJywgbnVsbCwgcHJvcHMub25DbGljayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdm5vZGUgLyBkaXJlY3RpdmUgaG9va3NcclxuICAgICAgICAgICAgbGV0IHZub2RlSG9va3M7XHJcbiAgICAgICAgICAgIGlmICgodm5vZGVIb29rcyA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcclxuICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2tzLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGlycykge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlTW91bnQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHZub2RlSG9va3MgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkgfHwgZGlycykge1xyXG4gICAgICAgICAgICAgICAgcXVldWVFZmZlY3RXaXRoU3VzcGVuc2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZub2RlSG9va3MgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnbW91bnRlZCcpO1xyXG4gICAgICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuXHJcbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLyAmJlxyXG4gICAgICAgICAgICAgICAgLy8gc2tpcCBpZiBlbGVtZW50IGhhcyBpbm5lckhUTUwgLyB0ZXh0Q29udGVudFxyXG4gICAgICAgICAgICAgICAgIShwcm9wcyAmJiAocHJvcHMuaW5uZXJIVE1MIHx8IHByb3BzLnRleHRDb250ZW50KSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gaHlkcmF0ZUNoaWxkcmVuKGVsLmZpcnN0Q2hpbGQsIHZub2RlLCBlbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIGxldCBoYXNXYXJuZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWhhc1dhcm5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gY2hpbGRyZW4gbWlzbWF0Y2ggaW4gPCR7dm5vZGUudHlwZX0+OiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBzZXJ2ZXIgcmVuZGVyZWQgZWxlbWVudCBjb250YWlucyBtb3JlIGNoaWxkIG5vZGVzIHRoYW4gY2xpZW50IHZkb20uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBTU1JlZCBET00gY29udGFpbnMgbW9yZSBub2RlcyB0aGFuIGl0IHNob3VsZC4gUmVtb3ZlIHRoZW0uXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VyID0gbmV4dDtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmUoY3VyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA4IC8qIFRFWFRfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbC50ZXh0Q29udGVudCAhPT0gdm5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiB0ZXh0IGNvbnRlbnQgbWlzbWF0Y2ggaW4gPCR7dm5vZGUudHlwZX0+OlxcbmAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYC0gQ2xpZW50OiAke2VsLnRleHRDb250ZW50fVxcbmAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYC0gU2VydmVyOiAke3Zub2RlLmNoaWxkcmVufWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnRleHRDb250ZW50ID0gdm5vZGUuY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVsLm5leHRTaWJsaW5nO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGh5ZHJhdGVDaGlsZHJlbiA9IChub2RlLCBwYXJlbnRWTm9kZSwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBvcHRpbWl6ZWQgPSBvcHRpbWl6ZWQgfHwgISFwYXJlbnRWTm9kZS5keW5hbWljQ2hpbGRyZW47XHJcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBwYXJlbnRWTm9kZS5jaGlsZHJlbjtcclxuICAgICAgICBjb25zdCBsID0gY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgIGxldCBoYXNXYXJuZWQgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB2bm9kZSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgPyBjaGlsZHJlbltpXVxyXG4gICAgICAgICAgICAgICAgOiAoY2hpbGRyZW5baV0gPSBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpXSkpO1xyXG4gICAgICAgICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IGh5ZHJhdGVOb2RlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGFzV2FybmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIGNoaWxkcmVuIG1pc21hdGNoIGluIDwke2NvbnRhaW5lci50YWdOYW1lLnRvTG93ZXJDYXNlKCl9PjogYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBzZXJ2ZXIgcmVuZGVyZWQgZWxlbWVudCBjb250YWlucyBmZXdlciBjaGlsZCBub2RlcyB0aGFuIGNsaWVudCB2ZG9tLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgU1NSZWQgRE9NIGRpZG4ndCBjb250YWluIGVub3VnaCBub2Rlcy4gTW91bnQgdGhlIG1pc3Npbmcgb25lcy5cclxuICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lcikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGh5ZHJhdGVGcmFnbWVudCA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcclxuICAgICAgICBjb25zdCBuZXh0ID0gaHlkcmF0ZUNoaWxkcmVuKG5leHRTaWJsaW5nKG5vZGUpLCB2bm9kZSwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIGlmIChuZXh0ICYmIGlzQ29tbWVudChuZXh0KSAmJiBuZXh0LmRhdGEgPT09ICddJykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV4dFNpYmxpbmcoKHZub2RlLmFuY2hvciA9IG5leHQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGZyYWdtZW50IGRpZG4ndCBoeWRyYXRlIHN1Y2Nlc3NmdWxseSwgc2luY2Ugd2UgZGlkbid0IGdldCBhIGVuZCBhbmNob3JcclxuICAgICAgICAgICAgLy8gYmFjay4gVGhpcyBzaG91bGQgaGF2ZSBsZWQgdG8gbm9kZS9jaGlsZHJlbiBtaXNtYXRjaCB3YXJuaW5ncy5cclxuICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGUgYW5jaG9yIGlzIG1pc3NpbmcsIHdlIG5lZWQgdG8gY3JlYXRlIG9uZSBhbmQgaW5zZXJ0IGl0XHJcbiAgICAgICAgICAgIGluc2VydCgodm5vZGUuYW5jaG9yID0gY3JlYXRlQ29tbWVudChgXWApKSwgY29udGFpbmVyLCBuZXh0KTtcclxuICAgICAgICAgICAgcmV0dXJuIG5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IGhhbmRsZU1pc21hdGNoID0gKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc0ZyYWdtZW50KSA9PiB7XHJcbiAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gbm9kZSBtaXNtYXRjaDpcXG4tIENsaWVudCB2bm9kZTpgLCB2bm9kZS50eXBlLCBgXFxuLSBTZXJ2ZXIgcmVuZGVyZWQgRE9NOmAsIG5vZGUsIG5vZGUubm9kZVR5cGUgPT09IDMgLyogVEVYVCAqL1xyXG4gICAgICAgICAgICAgICAgPyBgKHRleHQpYFxyXG4gICAgICAgICAgICAgICAgOiBpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSAnWydcclxuICAgICAgICAgICAgICAgICAgICA/IGAoc3RhcnQgb2YgZnJhZ21lbnQpYFxyXG4gICAgICAgICAgICAgICAgICAgIDogYGApO1xyXG4gICAgICAgIHZub2RlLmVsID0gbnVsbDtcclxuICAgICAgICBpZiAoaXNGcmFnbWVudCkge1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgZXhjZXNzaXZlIGZyYWdtZW50IG5vZGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IGxvY2F0ZUNsb3NpbmdBc3luY0FuY2hvcihub2RlKTtcclxuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBuZXh0U2libGluZyhub2RlKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09IGVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZShuZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5leHQgPSBuZXh0U2libGluZyhub2RlKTtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBwYXJlbnROb2RlKG5vZGUpO1xyXG4gICAgICAgIHJlbW92ZShub2RlKTtcclxuICAgICAgICBwYXRjaChudWxsLCB2bm9kZSwgY29udGFpbmVyLCBuZXh0LCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihjb250YWluZXIpKTtcclxuICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgIH07XHJcbiAgICBjb25zdCBsb2NhdGVDbG9zaW5nQXN5bmNBbmNob3IgPSAobm9kZSkgPT4ge1xyXG4gICAgICAgIGxldCBtYXRjaCA9IDA7XHJcbiAgICAgICAgd2hpbGUgKG5vZGUpIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICBpZiAobm9kZSAmJiBpc0NvbW1lbnQobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgPT09ICdbJylcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaCsrO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSA9PT0gJ10nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0U2libGluZyhub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBbaHlkcmF0ZSwgaHlkcmF0ZU5vZGVdO1xyXG59XG5cbmxldCBzdXBwb3J0ZWQ7XHJcbmxldCBwZXJmO1xyXG5mdW5jdGlvbiBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIHR5cGUpIHtcclxuICAgIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5wZXJmb3JtYW5jZSAmJiBpc1N1cHBvcnRlZCgpKSB7XHJcbiAgICAgICAgcGVyZi5tYXJrKGB2dWUtJHt0eXBlfS0ke2luc3RhbmNlLnVpZH1gKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBlbmRNZWFzdXJlKGluc3RhbmNlLCB0eXBlKSB7XHJcbiAgICBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcucGVyZm9ybWFuY2UgJiYgaXNTdXBwb3J0ZWQoKSkge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0VGFnID0gYHZ1ZS0ke3R5cGV9LSR7aW5zdGFuY2UudWlkfWA7XHJcbiAgICAgICAgY29uc3QgZW5kVGFnID0gc3RhcnRUYWcgKyBgOmVuZGA7XHJcbiAgICAgICAgcGVyZi5tYXJrKGVuZFRhZyk7XHJcbiAgICAgICAgcGVyZi5tZWFzdXJlKGA8JHtmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBpbnN0YW5jZS50eXBlKX0+ICR7dHlwZX1gLCBzdGFydFRhZywgZW5kVGFnKTtcclxuICAgICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xyXG4gICAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xyXG4gICAgaWYgKHN1cHBvcnRlZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHN1cHBvcnRlZDtcclxuICAgIH1cclxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wZXJmb3JtYW5jZSkge1xyXG4gICAgICAgIHN1cHBvcnRlZCA9IHRydWU7XHJcbiAgICAgICAgcGVyZiA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHN1cHBvcnRlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cclxuICAgIHJldHVybiBzdXBwb3J0ZWQ7XHJcbn1cblxuLyoqXHJcbiAqIFRoaXMgaXMgb25seSBjYWxsZWQgaW4gZXNtLWJ1bmRsZXIgYnVpbGRzLlxyXG4gKiBJdCBpcyBjYWxsZWQgd2hlbiBhIHJlbmRlcmVyIGlzIGNyZWF0ZWQsIGluIGBiYXNlQ3JlYXRlUmVuZGVyZXJgIHNvIHRoYXRcclxuICogaW1wb3J0aW5nIHJ1bnRpbWUtY29yZSBpcyBzaWRlLWVmZmVjdHMgZnJlZS5cclxuICpcclxuICogaXN0YW5idWwtaWdub3JlLW5leHRcclxuICovXHJcbmZ1bmN0aW9uIGluaXRGZWF0dXJlRmxhZ3MoKSB7XHJcbiAgICBsZXQgbmVlZFdhcm4gPSBmYWxzZTtcclxuICAgIGlmICh0eXBlb2YgX19WVUVfT1BUSU9OU19BUElfXyAhPT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgbmVlZFdhcm4gPSB0cnVlO1xyXG4gICAgICAgIGdldEdsb2JhbFRoaXMoKS5fX1ZVRV9PUFRJT05TX0FQSV9fID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgX19WVUVfUFJPRF9ERVZUT09MU19fICE9PSAnYm9vbGVhbicpIHtcclxuICAgICAgICBuZWVkV2FybiA9IHRydWU7XHJcbiAgICAgICAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX1BST0RfREVWVE9PTFNfXyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBuZWVkV2Fybikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgWW91IGFyZSBydW5uaW5nIHRoZSBlc20tYnVuZGxlciBidWlsZCBvZiBWdWUuIEl0IGlzIHJlY29tbWVuZGVkIHRvIGAgK1xyXG4gICAgICAgICAgICBgY29uZmlndXJlIHlvdXIgYnVuZGxlciB0byBleHBsaWNpdGx5IHJlcGxhY2UgZmVhdHVyZSBmbGFnIGdsb2JhbHMgYCArXHJcbiAgICAgICAgICAgIGB3aXRoIGJvb2xlYW4gbGl0ZXJhbHMgdG8gZ2V0IHByb3BlciB0cmVlLXNoYWtpbmcgaW4gdGhlIGZpbmFsIGJ1bmRsZS4gYCArXHJcbiAgICAgICAgICAgIGBTZWUgaHR0cDovL2xpbmsudnVlanMub3JnL2ZlYXR1cmUtZmxhZ3MgZm9yIG1vcmUgZGV0YWlscy5gKTtcclxuICAgIH1cclxufVxuXG5jb25zdCBwcm9kRWZmZWN0T3B0aW9ucyA9IHtcclxuICAgIHNjaGVkdWxlcjogcXVldWVKb2IsXHJcbiAgICAvLyAjMTgwMSwgIzIwNDMgY29tcG9uZW50IHJlbmRlciBlZmZlY3RzIHNob3VsZCBhbGxvdyByZWN1cnNpdmUgdXBkYXRlc1xyXG4gICAgYWxsb3dSZWN1cnNlOiB0cnVlXHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZURldkVmZmVjdE9wdGlvbnMoaW5zdGFuY2UpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc2NoZWR1bGVyOiBxdWV1ZUpvYixcclxuICAgICAgICBhbGxvd1JlY3Vyc2U6IHRydWUsXHJcbiAgICAgICAgb25UcmFjazogaW5zdGFuY2UucnRjID8gZSA9PiBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5ydGMsIGUpIDogdm9pZCAwLFxyXG4gICAgICAgIG9uVHJpZ2dlcjogaW5zdGFuY2UucnRnID8gZSA9PiBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5ydGcsIGUpIDogdm9pZCAwXHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IHF1ZXVlUG9zdFJlbmRlckVmZmVjdCA9ICBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZVxyXG4gICAgO1xyXG5jb25zdCBzZXRSZWYgPSAocmF3UmVmLCBvbGRSYXdSZWYsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHZub2RlKSA9PiB7XHJcbiAgICBpZiAoaXNBcnJheShyYXdSZWYpKSB7XHJcbiAgICAgICAgcmF3UmVmLmZvckVhY2goKHIsIGkpID0+IHNldFJlZihyLCBvbGRSYXdSZWYgJiYgKGlzQXJyYXkob2xkUmF3UmVmKSA/IG9sZFJhd1JlZltpXSA6IG9sZFJhd1JlZiksIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHZub2RlKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IHZhbHVlO1xyXG4gICAgaWYgKCF2bm9kZSkge1xyXG4gICAgICAgIHZhbHVlID0gbnVsbDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZub2RlLmNvbXBvbmVudC5wcm94eTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdm5vZGUuZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgeyBpOiBvd25lciwgcjogcmVmIH0gPSByYXdSZWY7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFvd25lcikge1xyXG4gICAgICAgIHdhcm4oYE1pc3NpbmcgcmVmIG93bmVyIGNvbnRleHQuIHJlZiBjYW5ub3QgYmUgdXNlZCBvbiBob2lzdGVkIHZub2Rlcy4gYCArXHJcbiAgICAgICAgICAgIGBBIHZub2RlIHdpdGggcmVmIG11c3QgYmUgY3JlYXRlZCBpbnNpZGUgdGhlIHJlbmRlciBmdW5jdGlvbi5gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBvbGRSZWYgPSBvbGRSYXdSZWYgJiYgb2xkUmF3UmVmLnI7XHJcbiAgICBjb25zdCByZWZzID0gb3duZXIucmVmcyA9PT0gRU1QVFlfT0JKID8gKG93bmVyLnJlZnMgPSB7fSkgOiBvd25lci5yZWZzO1xyXG4gICAgY29uc3Qgc2V0dXBTdGF0ZSA9IG93bmVyLnNldHVwU3RhdGU7XHJcbiAgICAvLyB1bnNldCBvbGQgcmVmXHJcbiAgICBpZiAob2xkUmVmICE9IG51bGwgJiYgb2xkUmVmICE9PSByZWYpIHtcclxuICAgICAgICBpZiAoaXNTdHJpbmcob2xkUmVmKSkge1xyXG4gICAgICAgICAgICByZWZzW29sZFJlZl0gPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoaGFzT3duKHNldHVwU3RhdGUsIG9sZFJlZikpIHtcclxuICAgICAgICAgICAgICAgIHNldHVwU3RhdGVbb2xkUmVmXSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNSZWYob2xkUmVmKSkge1xyXG4gICAgICAgICAgICBvbGRSZWYudmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChpc1N0cmluZyhyZWYpKSB7XHJcbiAgICAgICAgY29uc3QgZG9TZXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlZnNbcmVmXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoaGFzT3duKHNldHVwU3RhdGUsIHJlZikpIHtcclxuICAgICAgICAgICAgICAgIHNldHVwU3RhdGVbcmVmXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyAjMTc4OTogZm9yIG5vbi1udWxsIHZhbHVlcywgc2V0IHRoZW0gYWZ0ZXIgcmVuZGVyXHJcbiAgICAgICAgLy8gbnVsbCB2YWx1ZXMgbWVhbnMgdGhpcyBpcyB1bm1vdW50IGFuZCBpdCBzaG91bGQgbm90IG92ZXJ3cml0ZSBhbm90aGVyXHJcbiAgICAgICAgLy8gcmVmIHdpdGggdGhlIHNhbWUga2V5XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGRvU2V0LmlkID0gLTE7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkb1NldCwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZG9TZXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1JlZihyZWYpKSB7XHJcbiAgICAgICAgY29uc3QgZG9TZXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlZi52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGRvU2V0LmlkID0gLTE7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkb1NldCwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZG9TZXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHJlZikpIHtcclxuICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcocmVmLCBwYXJlbnRDb21wb25lbnQsIDEyIC8qIEZVTkNUSU9OX1JFRiAqLywgW1xyXG4gICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgcmVmc1xyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybignSW52YWxpZCB0ZW1wbGF0ZSByZWYgdHlwZTonLCB2YWx1ZSwgYCgke3R5cGVvZiB2YWx1ZX0pYCk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBUaGUgY3JlYXRlUmVuZGVyZXIgZnVuY3Rpb24gYWNjZXB0cyB0d28gZ2VuZXJpYyBhcmd1bWVudHM6XHJcbiAqIEhvc3ROb2RlIGFuZCBIb3N0RWxlbWVudCwgY29ycmVzcG9uZGluZyB0byBOb2RlIGFuZCBFbGVtZW50IHR5cGVzIGluIHRoZVxyXG4gKiBob3N0IGVudmlyb25tZW50LiBGb3IgZXhhbXBsZSwgZm9yIHJ1bnRpbWUtZG9tLCBIb3N0Tm9kZSB3b3VsZCBiZSB0aGUgRE9NXHJcbiAqIGBOb2RlYCBpbnRlcmZhY2UgYW5kIEhvc3RFbGVtZW50IHdvdWxkIGJlIHRoZSBET00gYEVsZW1lbnRgIGludGVyZmFjZS5cclxuICpcclxuICogQ3VzdG9tIHJlbmRlcmVycyBjYW4gcGFzcyBpbiB0aGUgcGxhdGZvcm0gc3BlY2lmaWMgdHlwZXMgbGlrZSB0aGlzOlxyXG4gKlxyXG4gKiBgYGAganNcclxuICogY29uc3QgeyByZW5kZXIsIGNyZWF0ZUFwcCB9ID0gY3JlYXRlUmVuZGVyZXI8Tm9kZSwgRWxlbWVudD4oe1xyXG4gKiAgIHBhdGNoUHJvcCxcclxuICogICAuLi5ub2RlT3BzXHJcbiAqIH0pXHJcbiAqIGBgYFxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUmVuZGVyZXIob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zKTtcclxufVxyXG4vLyBTZXBhcmF0ZSBBUEkgZm9yIGNyZWF0aW5nIGh5ZHJhdGlvbi1lbmFibGVkIHJlbmRlcmVyLlxyXG4vLyBIeWRyYXRpb24gbG9naWMgaXMgb25seSB1c2VkIHdoZW4gY2FsbGluZyB0aGlzIGZ1bmN0aW9uLCBtYWtpbmcgaXRcclxuLy8gdHJlZS1zaGFrYWJsZS5cclxuZnVuY3Rpb24gY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zLCBjcmVhdGVIeWRyYXRpb25GdW5jdGlvbnMpO1xyXG59XHJcbi8vIGltcGxlbWVudGF0aW9uXHJcbmZ1bmN0aW9uIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zLCBjcmVhdGVIeWRyYXRpb25GbnMpIHtcclxuICAgIC8vIGNvbXBpbGUtdGltZSBmZWF0dXJlIGZsYWdzIGNoZWNrXHJcbiAgICB7XHJcbiAgICAgICAgaW5pdEZlYXR1cmVGbGFncygpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBpbnNlcnQ6IGhvc3RJbnNlcnQsIHJlbW92ZTogaG9zdFJlbW92ZSwgcGF0Y2hQcm9wOiBob3N0UGF0Y2hQcm9wLCBmb3JjZVBhdGNoUHJvcDogaG9zdEZvcmNlUGF0Y2hQcm9wLCBjcmVhdGVFbGVtZW50OiBob3N0Q3JlYXRlRWxlbWVudCwgY3JlYXRlVGV4dDogaG9zdENyZWF0ZVRleHQsIGNyZWF0ZUNvbW1lbnQ6IGhvc3RDcmVhdGVDb21tZW50LCBzZXRUZXh0OiBob3N0U2V0VGV4dCwgc2V0RWxlbWVudFRleHQ6IGhvc3RTZXRFbGVtZW50VGV4dCwgcGFyZW50Tm9kZTogaG9zdFBhcmVudE5vZGUsIG5leHRTaWJsaW5nOiBob3N0TmV4dFNpYmxpbmcsIHNldFNjb3BlSWQ6IGhvc3RTZXRTY29wZUlkID0gTk9PUCwgY2xvbmVOb2RlOiBob3N0Q2xvbmVOb2RlLCBpbnNlcnRTdGF0aWNDb250ZW50OiBob3N0SW5zZXJ0U3RhdGljQ29udGVudCB9ID0gb3B0aW9ucztcclxuICAgIC8vIE5vdGU6IGZ1bmN0aW9ucyBpbnNpZGUgdGhpcyBjbG9zdXJlIHNob3VsZCB1c2UgYGNvbnN0IHh4eCA9ICgpID0+IHt9YFxyXG4gICAgLy8gc3R5bGUgaW4gb3JkZXIgdG8gcHJldmVudCBiZWluZyBpbmxpbmVkIGJ5IG1pbmlmaWVycy5cclxuICAgIGNvbnN0IHBhdGNoID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IgPSBudWxsLCBwYXJlbnRDb21wb25lbnQgPSBudWxsLCBwYXJlbnRTdXNwZW5zZSA9IG51bGwsIGlzU1ZHID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgLy8gcGF0Y2hpbmcgJiBub3Qgc2FtZSB0eXBlLCB1bm1vdW50IG9sZCB0cmVlXHJcbiAgICAgICAgaWYgKG4xICYmICFpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xyXG4gICAgICAgICAgICBhbmNob3IgPSBnZXROZXh0SG9zdE5vZGUobjEpO1xyXG4gICAgICAgICAgICB1bm1vdW50KG4xLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcclxuICAgICAgICAgICAgbjEgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobjIucGF0Y2hGbGFnID09PSAtMiAvKiBCQUlMICovKSB7XHJcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBuMi5keW5hbWljQ2hpbGRyZW4gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnIH0gPSBuMjtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBUZXh0OlxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1RleHQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tZW50OlxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU3RhdGljOlxyXG4gICAgICAgICAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VudFN0YXRpY05vZGUobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaFN0YXRpY05vZGUobjEsIG4yLCBjb250YWluZXIsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZyYWdtZW50OlxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0ZyYWdtZW50KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0VsZW1lbnQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NDb21wb25lbnQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUucHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkLCBpbnRlcm5hbHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIHNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUucHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkLCBpbnRlcm5hbHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBWTm9kZSB0eXBlOicsIHR5cGUsIGAoJHt0eXBlb2YgdHlwZX0pYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldCByZWZcclxuICAgICAgICBpZiAocmVmICE9IG51bGwgJiYgcGFyZW50Q29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHNldFJlZihyZWYsIG4xICYmIG4xLnJlZiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbjIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9jZXNzVGV4dCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydCgobjIuZWwgPSBob3N0Q3JlYXRlVGV4dChuMi5jaGlsZHJlbikpLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBlbCA9IChuMi5lbCA9IG4xLmVsKTtcclxuICAgICAgICAgICAgaWYgKG4yLmNoaWxkcmVuICE9PSBuMS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgaG9zdFNldFRleHQoZWwsIG4yLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9jZXNzQ29tbWVudE5vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcikgPT4ge1xyXG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoKG4yLmVsID0gaG9zdENyZWF0ZUNvbW1lbnQobjIuY2hpbGRyZW4gfHwgJycpKSwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdGhlcmUncyBubyBzdXBwb3J0IGZvciBkeW5hbWljIGNvbW1lbnRzXHJcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdW50U3RhdGljTm9kZSA9IChuMiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKSA9PiB7XHJcbiAgICAgICAgW24yLmVsLCBuMi5hbmNob3JdID0gaG9zdEluc2VydFN0YXRpY0NvbnRlbnQobjIuY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXYgLyBITVIgb25seVxyXG4gICAgICovXHJcbiAgICBjb25zdCBwYXRjaFN0YXRpY05vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIGlzU1ZHKSA9PiB7XHJcbiAgICAgICAgLy8gc3RhdGljIG5vZGVzIGFyZSBvbmx5IHBhdGNoZWQgZHVyaW5nIGRldiBmb3IgSE1SXHJcbiAgICAgICAgaWYgKG4yLmNoaWxkcmVuICE9PSBuMS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBob3N0TmV4dFNpYmxpbmcobjEuYW5jaG9yKTtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIGV4aXN0aW5nXHJcbiAgICAgICAgICAgIHJlbW92ZVN0YXRpY05vZGUobjEpO1xyXG4gICAgICAgICAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChuMi5jaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XHJcbiAgICAgICAgICAgIG4yLmFuY2hvciA9IG4xLmFuY2hvcjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXYgLyBITVIgb25seVxyXG4gICAgICovXHJcbiAgICBjb25zdCBtb3ZlU3RhdGljTm9kZSA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IpID0+IHtcclxuICAgICAgICBsZXQgY3VyID0gdm5vZGUuZWw7XHJcbiAgICAgICAgY29uc3QgZW5kID0gdm5vZGUuYW5jaG9yO1xyXG4gICAgICAgIHdoaWxlIChjdXIgJiYgY3VyICE9PSBlbmQpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dCA9IGhvc3ROZXh0U2libGluZyhjdXIpO1xyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KGN1ciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICBjdXIgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBob3N0SW5zZXJ0KGVuZCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRGV2IC8gSE1SIG9ubHlcclxuICAgICAqL1xyXG4gICAgY29uc3QgcmVtb3ZlU3RhdGljTm9kZSA9ICh2bm9kZSkgPT4ge1xyXG4gICAgICAgIGxldCBjdXIgPSB2bm9kZS5lbDtcclxuICAgICAgICB3aGlsZSAoY3VyICYmIGN1ciAhPT0gdm5vZGUuYW5jaG9yKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBob3N0TmV4dFNpYmxpbmcoY3VyKTtcclxuICAgICAgICAgICAgaG9zdFJlbW92ZShjdXIpO1xyXG4gICAgICAgICAgICBjdXIgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBob3N0UmVtb3ZlKHZub2RlLmFuY2hvcik7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvY2Vzc0VsZW1lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGlzU1ZHID0gaXNTVkcgfHwgbjIudHlwZSA9PT0gJ3N2Zyc7XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgbW91bnRFbGVtZW50KG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwYXRjaEVsZW1lbnQobjEsIG4yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbW91bnRFbGVtZW50ID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGxldCBlbDtcclxuICAgICAgICBsZXQgdm5vZGVIb29rO1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHNoYXBlRmxhZywgdHJhbnNpdGlvbiwgc2NvcGVJZCwgcGF0Y2hGbGFnLCBkaXJzIH0gPSB2bm9kZTtcclxuICAgICAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICB2bm9kZS5lbCAmJlxyXG4gICAgICAgICAgICBob3N0Q2xvbmVOb2RlICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgcGF0Y2hGbGFnID09PSAtMSAvKiBIT0lTVEVEICovKSB7XHJcbiAgICAgICAgICAgIC8vIElmIGEgdm5vZGUgaGFzIG5vbi1udWxsIGVsLCBpdCBtZWFucyBpdCdzIGJlaW5nIHJldXNlZC5cclxuICAgICAgICAgICAgLy8gT25seSBzdGF0aWMgdm5vZGVzIGNhbiBiZSByZXVzZWQsIHNvIGl0cyBtb3VudGVkIERPTSBub2RlcyBzaG91bGQgYmVcclxuICAgICAgICAgICAgLy8gZXhhY3RseSB0aGUgc2FtZSwgYW5kIHdlIGNhbiBzaW1wbHkgZG8gYSBjbG9uZSBoZXJlLlxyXG4gICAgICAgICAgICAvLyBvbmx5IGRvIHRoaXMgaW4gcHJvZHVjdGlvbiBzaW5jZSBjbG9uZWQgdHJlZXMgY2Fubm90IGJlIEhNUiB1cGRhdGVkLlxyXG4gICAgICAgICAgICBlbCA9IHZub2RlLmVsID0gaG9zdENsb25lTm9kZSh2bm9kZS5lbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbCA9IHZub2RlLmVsID0gaG9zdENyZWF0ZUVsZW1lbnQodm5vZGUudHlwZSwgaXNTVkcsIHByb3BzICYmIHByb3BzLmlzKTtcclxuICAgICAgICAgICAgLy8gbW91bnQgY2hpbGRyZW4gZmlyc3QsIHNpbmNlIHNvbWUgcHJvcHMgbWF5IHJlbHkgb24gY2hpbGQgY29udGVudFxyXG4gICAgICAgICAgICAvLyBiZWluZyBhbHJlYWR5IHJlbmRlcmVkLCBlLmcuIGA8c2VsZWN0IHZhbHVlPmBcclxuICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDggLyogVEVYVF9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCB2bm9kZS5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4odm5vZGUuY2hpbGRyZW4sIGVsLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyAmJiB0eXBlICE9PSAnZm9yZWlnbk9iamVjdCcsIG9wdGltaXplZCB8fCAhIXZub2RlLmR5bmFtaWNDaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRpcnMpIHtcclxuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2NyZWF0ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcm9wc1xyXG4gICAgICAgICAgICBpZiAocHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Jlc2VydmVkUHJvcChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgbnVsbCwgcHJvcHNba2V5XSwgaXNTVkcsIHZub2RlLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMub25Wbm9kZUJlZm9yZU1vdW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNjb3BlSWRcclxuICAgICAgICAgICAgc2V0U2NvcGVJZChlbCwgc2NvcGVJZCwgdm5vZGUsIHBhcmVudENvbXBvbmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ19fdm5vZGUnLCB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogdm5vZGUsXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCAnX192dWVQYXJlbnRDb21wb25lbnQnLCB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogcGFyZW50Q29tcG9uZW50LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaXJzKSB7XHJcbiAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZU1vdW50Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vICMxNTgzIEZvciBpbnNpZGUgc3VzcGVuc2UgKyBzdXNwZW5zZSBub3QgcmVzb2x2ZWQgY2FzZSwgZW50ZXIgaG9vayBzaG91bGQgY2FsbCB3aGVuIHN1c3BlbnNlIHJlc29sdmVkXHJcbiAgICAgICAgLy8gIzE2ODkgRm9yIGluc2lkZSBzdXNwZW5zZSArIHN1c3BlbnNlIHJlc29sdmVkIGNhc2UsIGp1c3QgY2FsbCBpdFxyXG4gICAgICAgIGNvbnN0IG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzID0gKCFwYXJlbnRTdXNwZW5zZSB8fCAocGFyZW50U3VzcGVuc2UgJiYgIXBhcmVudFN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpKSAmJlxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uICYmXHJcbiAgICAgICAgICAgICF0cmFuc2l0aW9uLnBlcnNpc3RlZDtcclxuICAgICAgICBpZiAobmVlZENhbGxUcmFuc2l0aW9uSG9va3MpIHtcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSB8fFxyXG4gICAgICAgICAgICBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyB8fFxyXG4gICAgICAgICAgICBkaXJzKSB7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZUhvb2sgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyAmJiB0cmFuc2l0aW9uLmVudGVyKGVsKTtcclxuICAgICAgICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnbW91bnRlZCcpO1xyXG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHNldFNjb3BlSWQgPSAoZWwsIHNjb3BlSWQsIHZub2RlLCBwYXJlbnRDb21wb25lbnQpID0+IHtcclxuICAgICAgICBpZiAoc2NvcGVJZCkge1xyXG4gICAgICAgICAgICBob3N0U2V0U2NvcGVJZChlbCwgc2NvcGVJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXJlbnRDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgdHJlZU93bmVySWQgPSBwYXJlbnRDb21wb25lbnQudHlwZS5fX3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIC8vIHZub2RlJ3Mgb3duIHNjb3BlSWQgYW5kIHRoZSBjdXJyZW50IHBhdGNoZWQgY29tcG9uZW50J3Mgc2NvcGVJZCBpc1xyXG4gICAgICAgICAgICAvLyBkaWZmZXJlbnQgLSB0aGlzIGlzIGEgc2xvdCBjb250ZW50IG5vZGUuXHJcbiAgICAgICAgICAgIGlmICh0cmVlT3duZXJJZCAmJiB0cmVlT3duZXJJZCAhPT0gc2NvcGVJZCkge1xyXG4gICAgICAgICAgICAgICAgaG9zdFNldFNjb3BlSWQoZWwsIHRyZWVPd25lcklkICsgJy1zJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHN1YlRyZWUgPSBwYXJlbnRDb21wb25lbnQuc3ViVHJlZTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzdWJUcmVlLnR5cGUgPT09IEZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBzdWJUcmVlID1cclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJTaW5nbGVSb290KHN1YlRyZWUuY2hpbGRyZW4pIHx8IHN1YlRyZWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZub2RlID09PSBzdWJUcmVlKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRTY29wZUlkKGVsLCBwYXJlbnRDb21wb25lbnQudm5vZGUuc2NvcGVJZCwgcGFyZW50Q29tcG9uZW50LnZub2RlLCBwYXJlbnRDb21wb25lbnQucGFyZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBtb3VudENoaWxkcmVuID0gKGNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCwgc3RhcnQgPSAwKSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSAoY2hpbGRyZW5baV0gPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoY2hpbGRyZW5baV0pXHJcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGNoaWxkcmVuW2ldKSk7XHJcbiAgICAgICAgICAgIHBhdGNoKG51bGwsIGNoaWxkLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHBhdGNoRWxlbWVudCA9IChuMSwgbjIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCBlbCA9IChuMi5lbCA9IG4xLmVsKTtcclxuICAgICAgICBsZXQgeyBwYXRjaEZsYWcsIGR5bmFtaWNDaGlsZHJlbiwgZGlycyB9ID0gbjI7XHJcbiAgICAgICAgLy8gIzE0MjYgdGFrZSB0aGUgb2xkIHZub2RlJ3MgcGF0Y2ggZmxhZyBpbnRvIGFjY291bnQgc2luY2UgdXNlciBtYXkgY2xvbmUgYVxyXG4gICAgICAgIC8vIGNvbXBpbGVyLWdlbmVyYXRlZCB2bm9kZSwgd2hpY2ggZGUtb3B0cyB0byBGVUxMX1BST1BTXHJcbiAgICAgICAgcGF0Y2hGbGFnIHw9IG4xLnBhdGNoRmxhZyAmIDE2IC8qIEZVTExfUFJPUFMgKi87XHJcbiAgICAgICAgY29uc3Qgb2xkUHJvcHMgPSBuMS5wcm9wcyB8fCBFTVBUWV9PQko7XHJcbiAgICAgICAgY29uc3QgbmV3UHJvcHMgPSBuMi5wcm9wcyB8fCBFTVBUWV9PQko7XHJcbiAgICAgICAgbGV0IHZub2RlSG9vaztcclxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5ld1Byb3BzLm9uVm5vZGVCZWZvcmVVcGRhdGUpKSB7XHJcbiAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgbjIsIG4xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpcnMpIHtcclxuICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayhuMiwgbjEsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZVVwZGF0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICh0cnVlICkgJiYgaXNIbXJVcGRhdGluZykge1xyXG4gICAgICAgICAgICAvLyBITVIgdXBkYXRlZCwgZm9yY2UgZnVsbCBkaWZmXHJcbiAgICAgICAgICAgIHBhdGNoRmxhZyA9IDA7XHJcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xyXG4gICAgICAgICAgICAvLyB0aGUgcHJlc2VuY2Ugb2YgYSBwYXRjaEZsYWcgbWVhbnMgdGhpcyBlbGVtZW50J3MgcmVuZGVyIGNvZGUgd2FzXHJcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlZCBieSB0aGUgY29tcGlsZXIgYW5kIGNhbiB0YWtlIHRoZSBmYXN0IHBhdGguXHJcbiAgICAgICAgICAgIC8vIGluIHRoaXMgcGF0aCBvbGQgbm9kZSBhbmQgbmV3IG5vZGUgYXJlIGd1YXJhbnRlZWQgdG8gaGF2ZSB0aGUgc2FtZSBzaGFwZVxyXG4gICAgICAgICAgICAvLyAoaS5lLiBhdCB0aGUgZXhhY3Qgc2FtZSBwb3NpdGlvbiBpbiB0aGUgc291cmNlIHRlbXBsYXRlKVxyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTYgLyogRlVMTF9QUk9QUyAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudCBwcm9wcyBjb250YWluIGR5bmFtaWMga2V5cywgZnVsbCBkaWZmIG5lZWRlZFxyXG4gICAgICAgICAgICAgICAgcGF0Y2hQcm9wcyhlbCwgbjIsIG9sZFByb3BzLCBuZXdQcm9wcywgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gY2xhc3NcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGR5bmFtaWMgY2xhc3MgYmluZGluZ3MuXHJcbiAgICAgICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMiAvKiBDTEFTUyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRQcm9wcy5jbGFzcyAhPT0gbmV3UHJvcHMuY2xhc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgJ2NsYXNzJywgbnVsbCwgbmV3UHJvcHMuY2xhc3MsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBzdHlsZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgZHluYW1pYyBzdHlsZSBiaW5kaW5nc1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDQgLyogU1RZTEUgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCAnc3R5bGUnLCBvbGRQcm9wcy5zdHlsZSwgbmV3UHJvcHMuc3R5bGUsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHByb3BzXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZsYWcgaXMgbWF0Y2hlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBkeW5hbWljIHByb3AvYXR0ciBiaW5kaW5nc1xyXG4gICAgICAgICAgICAgICAgLy8gb3RoZXIgdGhhbiBjbGFzcyBhbmQgc3R5bGUuIFRoZSBrZXlzIG9mIGR5bmFtaWMgcHJvcC9hdHRycyBhcmUgc2F2ZWQgZm9yXHJcbiAgICAgICAgICAgICAgICAvLyBmYXN0ZXIgaXRlcmF0aW9uLlxyXG4gICAgICAgICAgICAgICAgLy8gTm90ZSBkeW5hbWljIGtleXMgbGlrZSA6W2Zvb109XCJiYXJcIiB3aWxsIGNhdXNlIHRoaXMgb3B0aW1pemF0aW9uIHRvXHJcbiAgICAgICAgICAgICAgICAvLyBiYWlsIG91dCBhbmQgZ28gdGhyb3VnaCBhIGZ1bGwgZGlmZiBiZWNhdXNlIHdlIG5lZWQgdG8gdW5zZXQgdGhlIG9sZCBrZXlcclxuICAgICAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBST1BTICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGZsYWcgaXMgcHJlc2VudCB0aGVuIGR5bmFtaWNQcm9wcyBtdXN0IGJlIG5vbi1udWxsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcHNUb1VwZGF0ZSA9IG4yLmR5bmFtaWNQcm9wcztcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzVG9VcGRhdGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gcHJvcHNUb1VwZGF0ZVtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IG9sZFByb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBuZXdQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCAhPT0gcHJldiB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhvc3RGb3JjZVBhdGNoUHJvcCAmJiBob3N0Rm9yY2VQYXRjaFByb3AoZWwsIGtleSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIHByZXYsIG5leHQsIGlzU1ZHLCBuMS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB0ZXh0XHJcbiAgICAgICAgICAgIC8vIFRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIG9ubHkgZHluYW1pYyB0ZXh0IGNoaWxkcmVuLlxyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMSAvKiBURVhUICovKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobjEuY2hpbGRyZW4gIT09IG4yLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCBuMi5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIW9wdGltaXplZCAmJiBkeW5hbWljQ2hpbGRyZW4gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyB1bm9wdGltaXplZCwgZnVsbCBkaWZmXHJcbiAgICAgICAgICAgIHBhdGNoUHJvcHMoZWwsIG4yLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYXJlQ2hpbGRyZW5TVkcgPSBpc1NWRyAmJiBuMi50eXBlICE9PSAnZm9yZWlnbk9iamVjdCc7XHJcbiAgICAgICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4objEuZHluYW1pY0NoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIGVsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBhcmVDaGlsZHJlblNWRyk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICh0cnVlICkgJiZcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCAmJlxyXG4gICAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LnR5cGUuX19obXJJZCkge1xyXG4gICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFvcHRpbWl6ZWQpIHtcclxuICAgICAgICAgICAgLy8gZnVsbCBkaWZmXHJcbiAgICAgICAgICAgIHBhdGNoQ2hpbGRyZW4objEsIG4yLCBlbCwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgYXJlQ2hpbGRyZW5TVkcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5ld1Byb3BzLm9uVm5vZGVVcGRhdGVkKSB8fCBkaXJzKSB7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZUhvb2sgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCBuMiwgbjEpO1xyXG4gICAgICAgICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCAndXBkYXRlZCcpO1xyXG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIFRoZSBmYXN0IHBhdGggZm9yIGJsb2Nrcy5cclxuICAgIGNvbnN0IHBhdGNoQmxvY2tDaGlsZHJlbiA9IChvbGRDaGlsZHJlbiwgbmV3Q2hpbGRyZW4sIGZhbGxiYWNrQ29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRykgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgb2xkVk5vZGUgPSBvbGRDaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgY29uc3QgbmV3Vk5vZGUgPSBuZXdDaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBjb250YWluZXIgKHBhcmVudCBlbGVtZW50KSBmb3IgdGhlIHBhdGNoLlxyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBcclxuICAgICAgICAgICAgLy8gLSBJbiB0aGUgY2FzZSBvZiBhIEZyYWdtZW50LCB3ZSBuZWVkIHRvIHByb3ZpZGUgdGhlIGFjdHVhbCBwYXJlbnRcclxuICAgICAgICAgICAgLy8gb2YgdGhlIEZyYWdtZW50IGl0c2VsZiBzbyBpdCBjYW4gbW92ZSBpdHMgY2hpbGRyZW4uXHJcbiAgICAgICAgICAgIG9sZFZOb2RlLnR5cGUgPT09IEZyYWdtZW50IHx8XHJcbiAgICAgICAgICAgICAgICAvLyAtIEluIHRoZSBjYXNlIG9mIGRpZmZlcmVudCBub2RlcywgdGhlcmUgaXMgZ29pbmcgdG8gYmUgYSByZXBsYWNlbWVudFxyXG4gICAgICAgICAgICAgICAgLy8gd2hpY2ggYWxzbyByZXF1aXJlcyB0aGUgY29ycmVjdCBwYXJlbnQgY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAhaXNTYW1lVk5vZGVUeXBlKG9sZFZOb2RlLCBuZXdWTm9kZSkgfHxcclxuICAgICAgICAgICAgICAgIC8vIC0gSW4gdGhlIGNhc2Ugb2YgYSBjb21wb25lbnQsIGl0IGNvdWxkIGNvbnRhaW4gYW55dGhpbmcuXHJcbiAgICAgICAgICAgICAgICBvbGRWTm9kZS5zaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLyB8fFxyXG4gICAgICAgICAgICAgICAgb2xkVk5vZGUuc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi9cclxuICAgICAgICAgICAgICAgID8gaG9zdFBhcmVudE5vZGUob2xkVk5vZGUuZWwpXHJcbiAgICAgICAgICAgICAgICA6IC8vIEluIG90aGVyIGNhc2VzLCB0aGUgcGFyZW50IGNvbnRhaW5lciBpcyBub3QgYWN0dWFsbHkgdXNlZCBzbyB3ZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGp1c3QgcGFzcyB0aGUgYmxvY2sgZWxlbWVudCBoZXJlIHRvIGF2b2lkIGEgRE9NIHBhcmVudE5vZGUgY2FsbC5cclxuICAgICAgICAgICAgICAgICAgICBmYWxsYmFja0NvbnRhaW5lcjtcclxuICAgICAgICAgICAgcGF0Y2gob2xkVk5vZGUsIG5ld1ZOb2RlLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcGF0Y2hQcm9wcyA9IChlbCwgdm5vZGUsIG9sZFByb3BzLCBuZXdQcm9wcywgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpID0+IHtcclxuICAgICAgICBpZiAob2xkUHJvcHMgIT09IG5ld1Byb3BzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld1Byb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlbXB0eSBzdHJpbmcgaXMgbm90IHZhbGlkIHByb3BcclxuICAgICAgICAgICAgICAgIGlmIChpc1Jlc2VydmVkUHJvcChrZXkpKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5ld1Byb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gb2xkUHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0ICE9PSBwcmV2IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKGhvc3RGb3JjZVBhdGNoUHJvcCAmJiBob3N0Rm9yY2VQYXRjaFByb3AoZWwsIGtleSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBwcmV2LCBuZXh0LCBpc1NWRywgdm5vZGUuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9sZFByb3BzICE9PSBFTVBUWV9PQkopIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9sZFByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Jlc2VydmVkUHJvcChrZXkpICYmICEoa2V5IGluIG5ld1Byb3BzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIG9sZFByb3BzW2tleV0sIG51bGwsIGlzU1ZHLCB2bm9kZS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvY2Vzc0ZyYWdtZW50ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCBmcmFnbWVudFN0YXJ0QW5jaG9yID0gKG4yLmVsID0gbjEgPyBuMS5lbCA6IGhvc3RDcmVhdGVUZXh0KCcnKSk7XHJcbiAgICAgICAgY29uc3QgZnJhZ21lbnRFbmRBbmNob3IgPSAobjIuYW5jaG9yID0gbjEgPyBuMS5hbmNob3IgOiBob3N0Q3JlYXRlVGV4dCgnJykpO1xyXG4gICAgICAgIGxldCB7IHBhdGNoRmxhZywgZHluYW1pY0NoaWxkcmVuIH0gPSBuMjtcclxuICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xyXG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzSG1yVXBkYXRpbmcpIHtcclxuICAgICAgICAgICAgLy8gSE1SIHVwZGF0ZWQsIGZvcmNlIGZ1bGwgZGlmZlxyXG4gICAgICAgICAgICBwYXRjaEZsYWcgPSAwO1xyXG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydChmcmFnbWVudFN0YXJ0QW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZnJhZ21lbnRFbmRBbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgLy8gYSBmcmFnbWVudCBjYW4gb25seSBoYXZlIGFycmF5IGNoaWxkcmVuXHJcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZXkgYXJlIGVpdGhlciBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyLCBvciBpbXBsaWNpdGx5IGNyZWF0ZWRcclxuICAgICAgICAgICAgLy8gZnJvbSBhcnJheXMuXHJcbiAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4objIuY2hpbGRyZW4sIGNvbnRhaW5lciwgZnJhZ21lbnRFbmRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyA+IDAgJiZcclxuICAgICAgICAgICAgICAgIHBhdGNoRmxhZyAmIDY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqLyAmJlxyXG4gICAgICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhIHN0YWJsZSBmcmFnbWVudCAodGVtcGxhdGUgcm9vdCBvciA8dGVtcGxhdGUgdi1mb3I+KSBkb2Vzbid0IG5lZWQgdG9cclxuICAgICAgICAgICAgICAgIC8vIHBhdGNoIGNoaWxkcmVuIG9yZGVyLCBidXQgaXQgbWF5IGNvbnRhaW4gZHluYW1pY0NoaWxkcmVuLlxyXG4gICAgICAgICAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKG4xLmR5bmFtaWNDaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuLCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC50eXBlLl9faG1ySWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChcclxuICAgICAgICAgICAgICAgIC8vICMyMDgwIGlmIHRoZSBzdGFibGUgZnJhZ21lbnQgaGFzIGEga2V5LCBpdCdzIGEgPHRlbXBsYXRlIHYtZm9yPiB0aGF0IG1heVxyXG4gICAgICAgICAgICAgICAgLy8gIGdldCBtb3ZlZCBhcm91bmQuIE1ha2Ugc3VyZSBhbGwgcm9vdCBsZXZlbCB2bm9kZXMgaW5oZXJpdCBlbC5cclxuICAgICAgICAgICAgICAgIC8vICMyMTM0IG9yIGlmIGl0J3MgYSBjb21wb25lbnQgcm9vdCwgaXQgbWF5IGFsc28gZ2V0IG1vdmVkIGFyb3VuZFxyXG4gICAgICAgICAgICAgICAgLy8gYXMgdGhlIGNvbXBvbmVudCBpcyBiZWluZyBtb3ZlZC5cclxuICAgICAgICAgICAgICAgIG4yLmtleSAhPSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHBhcmVudENvbXBvbmVudCAmJiBuMiA9PT0gcGFyZW50Q29tcG9uZW50LnN1YlRyZWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHRydWUgLyogc2hhbGxvdyAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBrZXllZCAvIHVua2V5ZWQsIG9yIG1hbnVhbCBmcmFnbWVudHMuXHJcbiAgICAgICAgICAgICAgICAvLyBmb3Iga2V5ZWQgJiB1bmtleWVkLCBzaW5jZSB0aGV5IGFyZSBjb21waWxlciBnZW5lcmF0ZWQgZnJvbSB2LWZvcixcclxuICAgICAgICAgICAgICAgIC8vIGVhY2ggY2hpbGQgaXMgZ3VhcmFudGVlZCB0byBiZSBhIGJsb2NrIHNvIHRoZSBmcmFnbWVudCB3aWxsIG5ldmVyXHJcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGR5bmFtaWNDaGlsZHJlbi5cclxuICAgICAgICAgICAgICAgIHBhdGNoQ2hpbGRyZW4objEsIG4yLCBjb250YWluZXIsIGZyYWdtZW50RW5kQW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9jZXNzQ29tcG9uZW50ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAobjIuc2hhcGVGbGFnICYgNTEyIC8qIENPTVBPTkVOVF9LRVBUX0FMSVZFICovKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnRDb21wb25lbnQuY3R4LmFjdGl2YXRlKG4yLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtb3VudENvbXBvbmVudChuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB1cGRhdGVDb21wb25lbnQobjEsIG4yLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBtb3VudENvbXBvbmVudCA9IChpbml0aWFsVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSAoaW5pdGlhbFZOb2RlLmNvbXBvbmVudCA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlKGluaXRpYWxWTm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSkpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgKHRydWUgKSAmJiBpbnN0YW5jZS50eXBlLl9faG1ySWQpIHtcclxuICAgICAgICAgICAgcmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChpbml0aWFsVk5vZGUpO1xyXG4gICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBtb3VudGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbmplY3QgcmVuZGVyZXIgaW50ZXJuYWxzIGZvciBrZWVwQWxpdmVcclxuICAgICAgICBpZiAoaXNLZWVwQWxpdmUoaW5pdGlhbFZOb2RlKSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5jdHgucmVuZGVyZXIgPSBpbnRlcm5hbHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJlc29sdmUgcHJvcHMgYW5kIHNsb3RzIGZvciBzZXR1cCBjb250ZXh0XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBpbml0YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldHVwQ29tcG9uZW50KGluc3RhbmNlKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBpbml0YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldHVwKCkgaXMgYXN5bmMuIFRoaXMgY29tcG9uZW50IHJlbGllcyBvbiBhc3luYyBsb2dpYyB0byBiZSByZXNvbHZlZFxyXG4gICAgICAgIC8vIGJlZm9yZSBwcm9jZWVkaW5nXHJcbiAgICAgICAgaWYgKCBpbnN0YW5jZS5hc3luY0RlcCkge1xyXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSAmJiBwYXJlbnRTdXNwZW5zZS5yZWdpc3RlckRlcChpbnN0YW5jZSwgc2V0dXBSZW5kZXJFZmZlY3QpO1xyXG4gICAgICAgICAgICAvLyBHaXZlIGl0IGEgcGxhY2Vob2xkZXIgaWYgdGhpcyBpcyBub3QgaHlkcmF0aW9uXHJcbiAgICAgICAgICAgIC8vIFRPRE8gaGFuZGxlIHNlbGYtZGVmaW5lZCBmYWxsYmFja1xyXG4gICAgICAgICAgICBpZiAoIWluaXRpYWxWTm9kZS5lbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSAoaW5zdGFuY2Uuc3ViVHJlZSA9IGNyZWF0ZVZOb2RlKENvbW1lbnQpKTtcclxuICAgICAgICAgICAgICAgIHByb2Nlc3NDb21tZW50Tm9kZShudWxsLCBwbGFjZWhvbGRlciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0dXBSZW5kZXJFZmZlY3QoaW5zdGFuY2UsIGluaXRpYWxWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XHJcbiAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBtb3VudGApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCB1cGRhdGVDb21wb25lbnQgPSAobjEsIG4yLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IChuMi5jb21wb25lbnQgPSBuMS5jb21wb25lbnQpO1xyXG4gICAgICAgIGlmIChzaG91bGRVcGRhdGVDb21wb25lbnQobjEsIG4yLCBvcHRpbWl6ZWQpKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmFzeW5jRGVwICYmXHJcbiAgICAgICAgICAgICAgICAhaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gYXN5bmMgJiBzdGlsbCBwZW5kaW5nIC0ganVzdCB1cGRhdGUgcHJvcHMgYW5kIHNsb3RzXHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgY29tcG9uZW50J3MgcmVhY3RpdmUgZWZmZWN0IGZvciByZW5kZXIgaXNuJ3Qgc2V0LXVwIHlldFxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChuMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIoaW5zdGFuY2UsIG4yLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBub3JtYWwgdXBkYXRlXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5uZXh0ID0gbjI7XHJcbiAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBjaGlsZCBjb21wb25lbnQgaXMgYWxzbyBxdWV1ZWQsIHJlbW92ZSBpdCB0byBhdm9pZFxyXG4gICAgICAgICAgICAgICAgLy8gZG91YmxlIHVwZGF0aW5nIHRoZSBzYW1lIGNoaWxkIGNvbXBvbmVudCBpbiB0aGUgc2FtZSBmbHVzaC5cclxuICAgICAgICAgICAgICAgIGludmFsaWRhdGVKb2IoaW5zdGFuY2UudXBkYXRlKTtcclxuICAgICAgICAgICAgICAgIC8vIGluc3RhbmNlLnVwZGF0ZSBpcyB0aGUgcmVhY3RpdmUgZWZmZWN0IHJ1bm5lci5cclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBubyB1cGRhdGUgbmVlZGVkLiBqdXN0IGNvcHkgb3ZlciBwcm9wZXJ0aWVzXHJcbiAgICAgICAgICAgIG4yLmNvbXBvbmVudCA9IG4xLmNvbXBvbmVudDtcclxuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcclxuICAgICAgICAgICAgaW5zdGFuY2Uudm5vZGUgPSBuMjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3Qgc2V0dXBSZW5kZXJFZmZlY3QgPSAoaW5zdGFuY2UsIGluaXRpYWxWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgLy8gY3JlYXRlIHJlYWN0aXZlIGVmZmVjdCBmb3IgcmVuZGVyaW5nXHJcbiAgICAgICAgaW5zdGFuY2UudXBkYXRlID0gZWZmZWN0KGZ1bmN0aW9uIGNvbXBvbmVudEVmZmVjdCgpIHtcclxuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZS5pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVsLCBwcm9wcyB9ID0gaW5pdGlhbFZOb2RlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBibSwgbSwgcGFyZW50IH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIC8vIGJlZm9yZU1vdW50IGhvb2tcclxuICAgICAgICAgICAgICAgIGlmIChibSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVCZWZvcmVNb3VudFxyXG4gICAgICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBpbml0aWFsVk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyXHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJUcmVlID0gKGluc3RhbmNlLnN1YlRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGVsICYmIGh5ZHJhdGVOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBoeWRyYXRlYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZub2RlIGhhcyBhZG9wdGVkIGhvc3Qgbm9kZSAtIHBlcmZvcm0gaHlkcmF0aW9uIGluc3RlYWQgb2YgbW91bnQuXHJcbiAgICAgICAgICAgICAgICAgICAgaHlkcmF0ZU5vZGUoaW5pdGlhbFZOb2RlLmVsLCBzdWJUcmVlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGh5ZHJhdGVgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIHN1YlRyZWUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVk5vZGUuZWwgPSBzdWJUcmVlLmVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gbW91bnRlZCBob29rXHJcbiAgICAgICAgICAgICAgICBpZiAobSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChtLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBvblZub2RlTW91bnRlZFxyXG4gICAgICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIGluaXRpYWxWTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gYWN0aXZhdGVkIGhvb2sgZm9yIGtlZXAtYWxpdmUgcm9vdHMuXHJcbiAgICAgICAgICAgICAgICAvLyAjMTc0MiBhY3RpdmF0ZWQgaG9vayBtdXN0IGJlIGFjY2Vzc2VkIGFmdGVyIGZpcnN0IHJlbmRlclxyXG4gICAgICAgICAgICAgICAgLy8gc2luY2UgdGhlIGhvb2sgbWF5IGJlIGluamVjdGVkIGJ5IGEgY2hpbGQga2VlcC1hbGl2ZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBhIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGlmIChhICYmXHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZOb2RlLnNoYXBlRmxhZyAmIDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoYSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuaXNNb3VudGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZUNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0cmlnZ2VyZWQgYnkgbXV0YXRpb24gb2YgY29tcG9uZW50J3Mgb3duIHN0YXRlIChuZXh0OiBudWxsKVxyXG4gICAgICAgICAgICAgICAgLy8gT1IgcGFyZW50IGNhbGxpbmcgcHJvY2Vzc0NvbXBvbmVudCAobmV4dDogVk5vZGUpXHJcbiAgICAgICAgICAgICAgICBsZXQgeyBuZXh0LCBidSwgdSwgcGFyZW50LCB2bm9kZSB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICBsZXQgb3JpZ2luTmV4dCA9IG5leHQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgdm5vZGVIb29rO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChuZXh0IHx8IGluc3RhbmNlLnZub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5lbCA9IHZub2RlLmVsO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbmV4dCwgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSB2bm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGJlZm9yZVVwZGF0ZSBob29rXHJcbiAgICAgICAgICAgICAgICBpZiAoYnUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VBcnJheUZucyhidSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBvblZub2RlQmVmb3JlVXBkYXRlXHJcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5leHQucHJvcHMgJiYgbmV4dC5wcm9wcy5vblZub2RlQmVmb3JlVXBkYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgbmV4dCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyXHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0VHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZUcmVlID0gaW5zdGFuY2Uuc3ViVHJlZTtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnN1YlRyZWUgPSBuZXh0VHJlZTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGF0Y2gocHJldlRyZWUsIG5leHRUcmVlLCBcclxuICAgICAgICAgICAgICAgIC8vIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGlmIGl0J3MgaW4gYSB0ZWxlcG9ydFxyXG4gICAgICAgICAgICAgICAgaG9zdFBhcmVudE5vZGUocHJldlRyZWUuZWwpLCBcclxuICAgICAgICAgICAgICAgIC8vIGFuY2hvciBtYXkgaGF2ZSBjaGFuZ2VkIGlmIGl0J3MgaW4gYSBmcmFnbWVudFxyXG4gICAgICAgICAgICAgICAgZ2V0TmV4dEhvc3ROb2RlKHByZXZUcmVlKSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXh0LmVsID0gbmV4dFRyZWUuZWw7XHJcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luTmV4dCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbGYtdHJpZ2dlcmVkIHVwZGF0ZS4gSW4gY2FzZSBvZiBIT0MsIHVwZGF0ZSBwYXJlbnQgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgZWwuIEhPQyBpcyBpbmRpY2F0ZWQgYnkgcGFyZW50IGluc3RhbmNlJ3Mgc3ViVHJlZSBwb2ludGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIGNoaWxkIGNvbXBvbmVudCdzIHZub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCBuZXh0VHJlZS5lbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGVkIGhvb2tcclxuICAgICAgICAgICAgICAgIGlmICh1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KHUsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVVcGRhdGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5leHQucHJvcHMgJiYgbmV4dC5wcm9wcy5vblZub2RlVXBkYXRlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIG5leHQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGNyZWF0ZURldkVmZmVjdE9wdGlvbnMoaW5zdGFuY2UpIDogcHJvZEVmZmVjdE9wdGlvbnMpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlciA9IChpbnN0YW5jZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBuZXh0Vk5vZGUuY29tcG9uZW50ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgY29uc3QgcHJldlByb3BzID0gaW5zdGFuY2Uudm5vZGUucHJvcHM7XHJcbiAgICAgICAgaW5zdGFuY2Uudm5vZGUgPSBuZXh0Vk5vZGU7XHJcbiAgICAgICAgaW5zdGFuY2UubmV4dCA9IG51bGw7XHJcbiAgICAgICAgdXBkYXRlUHJvcHMoaW5zdGFuY2UsIG5leHRWTm9kZS5wcm9wcywgcHJldlByb3BzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIHVwZGF0ZVNsb3RzKGluc3RhbmNlLCBuZXh0Vk5vZGUuY2hpbGRyZW4pO1xyXG4gICAgICAgIC8vIHByb3BzIHVwZGF0ZSBtYXkgaGF2ZSB0cmlnZ2VyZWQgcHJlLWZsdXNoIHdhdGNoZXJzLlxyXG4gICAgICAgIC8vIGZsdXNoIHRoZW0gYmVmb3JlIHRoZSByZW5kZXIgdXBkYXRlLlxyXG4gICAgICAgIGZsdXNoUHJlRmx1c2hDYnModW5kZWZpbmVkLCBpbnN0YW5jZS51cGRhdGUpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHBhdGNoQ2hpbGRyZW4gPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYzEgPSBuMSAmJiBuMS5jaGlsZHJlbjtcclxuICAgICAgICBjb25zdCBwcmV2U2hhcGVGbGFnID0gbjEgPyBuMS5zaGFwZUZsYWcgOiAwO1xyXG4gICAgICAgIGNvbnN0IGMyID0gbjIuY2hpbGRyZW47XHJcbiAgICAgICAgY29uc3QgeyBwYXRjaEZsYWcsIHNoYXBlRmxhZyB9ID0gbjI7XHJcbiAgICAgICAgLy8gZmFzdCBwYXRoXHJcbiAgICAgICAgaWYgKHBhdGNoRmxhZyA+IDApIHtcclxuICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBjb3VsZCBiZSBlaXRoZXIgZnVsbHkta2V5ZWQgb3IgbWl4ZWQgKHNvbWUga2V5ZWQgc29tZSBub3QpXHJcbiAgICAgICAgICAgICAgICAvLyBwcmVzZW5jZSBvZiBwYXRjaEZsYWcgbWVhbnMgY2hpbGRyZW4gYXJlIGd1YXJhbnRlZWQgdG8gYmUgYXJyYXlzXHJcbiAgICAgICAgICAgICAgICBwYXRjaEtleWVkQ2hpbGRyZW4oYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAocGF0Y2hGbGFnICYgMjU2IC8qIFVOS0VZRURfRlJBR01FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIHVua2V5ZWRcclxuICAgICAgICAgICAgICAgIHBhdGNoVW5rZXllZENoaWxkcmVuKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNoaWxkcmVuIGhhcyAzIHBvc3NpYmlsaXRpZXM6IHRleHQsIGFycmF5IG9yIG5vIGNoaWxkcmVuLlxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA4IC8qIFRFWFRfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgLy8gdGV4dCBjaGlsZHJlbiBmYXN0IHBhdGhcclxuICAgICAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYzIgIT09IGMxKSB7XHJcbiAgICAgICAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoY29udGFpbmVyLCBjMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIHByZXYgY2hpbGRyZW4gd2FzIGFycmF5XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0d28gYXJyYXlzLCBjYW5ub3QgYXNzdW1lIGFueXRoaW5nLCBkbyBmdWxsIGRpZmZcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaEtleWVkQ2hpbGRyZW4oYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBubyBuZXcgY2hpbGRyZW4sIGp1c3QgdW5tb3VudCBvbGRcclxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gcHJldiBjaGlsZHJlbiB3YXMgdGV4dCBPUiBudWxsXHJcbiAgICAgICAgICAgICAgICAvLyBuZXcgY2hpbGRyZW4gaXMgYXJyYXkgT1IgbnVsbFxyXG4gICAgICAgICAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiA4IC8qIFRFWFRfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoY29udGFpbmVyLCAnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBtb3VudCBuZXcgaWYgYXJyYXlcclxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4oYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwYXRjaFVua2V5ZWRDaGlsZHJlbiA9IChjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgYzEgPSBjMSB8fCBFTVBUWV9BUlI7XHJcbiAgICAgICAgYzIgPSBjMiB8fCBFTVBUWV9BUlI7XHJcbiAgICAgICAgY29uc3Qgb2xkTGVuZ3RoID0gYzEubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IG5ld0xlbmd0aCA9IGMyLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBjb21tb25MZW5ndGggPSBNYXRoLm1pbihvbGRMZW5ndGgsIG5ld0xlbmd0aCk7XHJcbiAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbW1vbkxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IChjMltpXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltpXSlcclxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKTtcclxuICAgICAgICAgICAgcGF0Y2goYzFbaV0sIG5leHRDaGlsZCwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9sZExlbmd0aCA+IG5ld0xlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgb2xkXHJcbiAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihjMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSwgZmFsc2UsIGNvbW1vbkxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBtb3VudCBuZXdcclxuICAgICAgICAgICAgbW91bnRDaGlsZHJlbihjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQsIGNvbW1vbkxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIGNhbiBiZSBhbGwta2V5ZWQgb3IgbWl4ZWRcclxuICAgIGNvbnN0IHBhdGNoS2V5ZWRDaGlsZHJlbiA9IChjMSwgYzIsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIGNvbnN0IGwyID0gYzIubGVuZ3RoO1xyXG4gICAgICAgIGxldCBlMSA9IGMxLmxlbmd0aCAtIDE7IC8vIHByZXYgZW5kaW5nIGluZGV4XHJcbiAgICAgICAgbGV0IGUyID0gbDIgLSAxOyAvLyBuZXh0IGVuZGluZyBpbmRleFxyXG4gICAgICAgIC8vIDEuIHN5bmMgZnJvbSBzdGFydFxyXG4gICAgICAgIC8vIChhIGIpIGNcclxuICAgICAgICAvLyAoYSBiKSBkIGVcclxuICAgICAgICB3aGlsZSAoaSA8PSBlMSAmJiBpIDw9IGUyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4xID0gYzFbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IG4yID0gKGMyW2ldID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxyXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xyXG4gICAgICAgICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoKG4xLCBuMiwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gMi4gc3luYyBmcm9tIGVuZFxyXG4gICAgICAgIC8vIGEgKGIgYylcclxuICAgICAgICAvLyBkIGUgKGIgYylcclxuICAgICAgICB3aGlsZSAoaSA8PSBlMSAmJiBpIDw9IGUyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4xID0gYzFbZTFdO1xyXG4gICAgICAgICAgICBjb25zdCBuMiA9IChjMltlMl0gPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbZTJdKVxyXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltlMl0pKTtcclxuICAgICAgICAgICAgaWYgKGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRjaChuMSwgbjIsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlMS0tO1xyXG4gICAgICAgICAgICBlMi0tO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAzLiBjb21tb24gc2VxdWVuY2UgKyBtb3VudFxyXG4gICAgICAgIC8vIChhIGIpXHJcbiAgICAgICAgLy8gKGEgYikgY1xyXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDEsIGUyID0gMlxyXG4gICAgICAgIC8vIChhIGIpXHJcbiAgICAgICAgLy8gYyAoYSBiKVxyXG4gICAgICAgIC8vIGkgPSAwLCBlMSA9IC0xLCBlMiA9IDBcclxuICAgICAgICBpZiAoaSA+IGUxKSB7XHJcbiAgICAgICAgICAgIGlmIChpIDw9IGUyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0UG9zID0gZTIgKyAxO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dFBvcyA8IGwyID8gYzJbbmV4dFBvc10uZWwgOiBwYXJlbnRBbmNob3I7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA8PSBlMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIChjMltpXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSksIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDQuIGNvbW1vbiBzZXF1ZW5jZSArIHVubW91bnRcclxuICAgICAgICAvLyAoYSBiKSBjXHJcbiAgICAgICAgLy8gKGEgYilcclxuICAgICAgICAvLyBpID0gMiwgZTEgPSAyLCBlMiA9IDFcclxuICAgICAgICAvLyBhIChiIGMpXHJcbiAgICAgICAgLy8gKGIgYylcclxuICAgICAgICAvLyBpID0gMCwgZTEgPSAwLCBlMiA9IC0xXHJcbiAgICAgICAgZWxzZSBpZiAoaSA+IGUyKSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChpIDw9IGUxKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KGMxW2ldLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyA1LiB1bmtub3duIHNlcXVlbmNlXHJcbiAgICAgICAgLy8gW2kgLi4uIGUxICsgMV06IGEgYiBbYyBkIGVdIGYgZ1xyXG4gICAgICAgIC8vIFtpIC4uLiBlMiArIDFdOiBhIGIgW2UgZCBjIGhdIGYgZ1xyXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDQsIGUyID0gNVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBzMSA9IGk7IC8vIHByZXYgc3RhcnRpbmcgaW5kZXhcclxuICAgICAgICAgICAgY29uc3QgczIgPSBpOyAvLyBuZXh0IHN0YXJ0aW5nIGluZGV4XHJcbiAgICAgICAgICAgIC8vIDUuMSBidWlsZCBrZXk6aW5kZXggbWFwIGZvciBuZXdDaGlsZHJlblxyXG4gICAgICAgICAgICBjb25zdCBrZXlUb05ld0luZGV4TWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSBzMjsgaSA8PSBlMjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q2hpbGQgPSAoYzJbaV0gPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0Q2hpbGQua2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleVRvTmV3SW5kZXhNYXAuaGFzKG5leHRDaGlsZC5rZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYER1cGxpY2F0ZSBrZXlzIGZvdW5kIGR1cmluZyB1cGRhdGU6YCwgSlNPTi5zdHJpbmdpZnkobmV4dENoaWxkLmtleSksIGBNYWtlIHN1cmUga2V5cyBhcmUgdW5pcXVlLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBrZXlUb05ld0luZGV4TWFwLnNldChuZXh0Q2hpbGQua2V5LCBpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyA1LjIgbG9vcCB0aHJvdWdoIG9sZCBjaGlsZHJlbiBsZWZ0IHRvIGJlIHBhdGNoZWQgYW5kIHRyeSB0byBwYXRjaFxyXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBub2RlcyAmIHJlbW92ZSBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudFxyXG4gICAgICAgICAgICBsZXQgajtcclxuICAgICAgICAgICAgbGV0IHBhdGNoZWQgPSAwO1xyXG4gICAgICAgICAgICBjb25zdCB0b0JlUGF0Y2hlZCA9IGUyIC0gczIgKyAxO1xyXG4gICAgICAgICAgICBsZXQgbW92ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gdXNlZCB0byB0cmFjayB3aGV0aGVyIGFueSBub2RlIGhhcyBtb3ZlZFxyXG4gICAgICAgICAgICBsZXQgbWF4TmV3SW5kZXhTb0ZhciA9IDA7XHJcbiAgICAgICAgICAgIC8vIHdvcmtzIGFzIE1hcDxuZXdJbmRleCwgb2xkSW5kZXg+XHJcbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBvbGRJbmRleCBpcyBvZmZzZXQgYnkgKzFcclxuICAgICAgICAgICAgLy8gYW5kIG9sZEluZGV4ID0gMCBpcyBhIHNwZWNpYWwgdmFsdWUgaW5kaWNhdGluZyB0aGUgbmV3IG5vZGUgaGFzXHJcbiAgICAgICAgICAgIC8vIG5vIGNvcnJlc3BvbmRpbmcgb2xkIG5vZGUuXHJcbiAgICAgICAgICAgIC8vIHVzZWQgZm9yIGRldGVybWluaW5nIGxvbmdlc3Qgc3RhYmxlIHN1YnNlcXVlbmNlXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4VG9PbGRJbmRleE1hcCA9IG5ldyBBcnJheSh0b0JlUGF0Y2hlZCk7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b0JlUGF0Y2hlZDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgbmV3SW5kZXhUb09sZEluZGV4TWFwW2ldID0gMDtcclxuICAgICAgICAgICAgZm9yIChpID0gczE7IGkgPD0gZTE7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkNoaWxkID0gYzFbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAocGF0Y2hlZCA+PSB0b0JlUGF0Y2hlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFsbCBuZXcgY2hpbGRyZW4gaGF2ZSBiZWVuIHBhdGNoZWQgc28gdGhpcyBjYW4gb25seSBiZSBhIHJlbW92YWxcclxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50KHByZXZDaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3SW5kZXg7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJldkNoaWxkLmtleSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXggPSBrZXlUb05ld0luZGV4TWFwLmdldChwcmV2Q2hpbGQua2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGtleS1sZXNzIG5vZGUsIHRyeSB0byBsb2NhdGUgYSBrZXktbGVzcyBub2RlIG9mIHRoZSBzYW1lIHR5cGVcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSBzMjsgaiA8PSBlMjsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleFRvT2xkSW5kZXhNYXBbaiAtIHMyXSA9PT0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTYW1lVk5vZGVUeXBlKHByZXZDaGlsZCwgYzJbal0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbmRleCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudChwcmV2Q2hpbGQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXhUb09sZEluZGV4TWFwW25ld0luZGV4IC0gczJdID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4ID49IG1heE5ld0luZGV4U29GYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4TmV3SW5kZXhTb0ZhciA9IG5ld0luZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwYXRjaChwcmV2Q2hpbGQsIGMyW25ld0luZGV4XSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaGVkKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gNS4zIG1vdmUgYW5kIG1vdW50XHJcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlIGxvbmdlc3Qgc3RhYmxlIHN1YnNlcXVlbmNlIG9ubHkgd2hlbiBub2RlcyBoYXZlIG1vdmVkXHJcbiAgICAgICAgICAgIGNvbnN0IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlID0gbW92ZWRcclxuICAgICAgICAgICAgICAgID8gZ2V0U2VxdWVuY2UobmV3SW5kZXhUb09sZEluZGV4TWFwKVxyXG4gICAgICAgICAgICAgICAgOiBFTVBUWV9BUlI7XHJcbiAgICAgICAgICAgIGogPSBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZS5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAvLyBsb29waW5nIGJhY2t3YXJkcyBzbyB0aGF0IHdlIGNhbiB1c2UgbGFzdCBwYXRjaGVkIG5vZGUgYXMgYW5jaG9yXHJcbiAgICAgICAgICAgIGZvciAoaSA9IHRvQmVQYXRjaGVkIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRJbmRleCA9IHMyICsgaTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IGMyW25leHRJbmRleF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0SW5kZXggKyAxIDwgbDIgPyBjMltuZXh0SW5kZXggKyAxXS5lbCA6IHBhcmVudEFuY2hvcjtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3VudCBuZXdcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXh0Q2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb3ZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgaWY6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gc3RhYmxlIHN1YnNlcXVlbmNlIChlLmcuIGEgcmV2ZXJzZSlcclxuICAgICAgICAgICAgICAgICAgICAvLyBPUiBjdXJyZW50IG5vZGUgaXMgbm90IGFtb25nIHRoZSBzdGFibGUgc2VxdWVuY2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IDAgfHwgaSAhPT0gaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2Vbal0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZShuZXh0Q2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCAyIC8qIFJFT1JERVIgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgai0tO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBtb3ZlID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUsIHBhcmVudFN1c3BlbnNlID0gbnVsbCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgZWwsIHR5cGUsIHRyYW5zaXRpb24sIGNoaWxkcmVuLCBzaGFwZUZsYWcgfSA9IHZub2RlO1xyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICBtb3ZlKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgICAgIHZub2RlLnN1c3BlbnNlLm1vdmUoY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8pIHtcclxuICAgICAgICAgICAgdHlwZS5tb3ZlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgaW50ZXJuYWxzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBtb3ZlKGNoaWxkcmVuW2ldLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQodm5vZGUuYW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc3RhdGljIG5vZGUgbW92ZSBjYW4gb25seSBoYXBwZW4gd2hlbiBmb3JjZSB1cGRhdGluZyBITVJcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHR5cGUgPT09IFN0YXRpYykge1xyXG4gICAgICAgICAgICBtb3ZlU3RhdGljTm9kZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNpbmdsZSBub2Rlc1xyXG4gICAgICAgIGNvbnN0IG5lZWRUcmFuc2l0aW9uID0gbW92ZVR5cGUgIT09IDIgLyogUkVPUkRFUiAqLyAmJlxyXG4gICAgICAgICAgICBzaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gJiZcclxuICAgICAgICAgICAgdHJhbnNpdGlvbjtcclxuICAgICAgICBpZiAobmVlZFRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKG1vdmVUeXBlID09PSAwIC8qIEVOVEVSICovKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcclxuICAgICAgICAgICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB0cmFuc2l0aW9uLmVudGVyKGVsKSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBsZWF2ZSwgZGVsYXlMZWF2ZSwgYWZ0ZXJMZWF2ZSB9ID0gdHJhbnNpdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZSA9ICgpID0+IGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBlcmZvcm1MZWF2ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZWF2ZShlbCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlbGF5TGVhdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxheUxlYXZlKGVsLCByZW1vdmUsIHBlcmZvcm1MZWF2ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwZXJmb3JtTGVhdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCB1bm1vdW50ID0gKHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSA9IGZhbHNlLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHJlZiwgY2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiwgc2hhcGVGbGFnLCBwYXRjaEZsYWcsIGRpcnMgfSA9IHZub2RlO1xyXG4gICAgICAgIC8vIHVuc2V0IHJlZlxyXG4gICAgICAgIGlmIChyZWYgIT0gbnVsbCAmJiBwYXJlbnRDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgc2V0UmVmKHJlZiwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAyNTYgLyogQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovKSB7XHJcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudC5jdHguZGVhY3RpdmF0ZSh2bm9kZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2hvdWxkSW52b2tlRGlycyA9IHNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyAmJiBkaXJzO1xyXG4gICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlVW5tb3VudCkpIHtcclxuICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICB1bm1vdW50Q29tcG9uZW50KHZub2RlLmNvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICggc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5zdXNwZW5zZS51bm1vdW50KHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNob3VsZEludm9rZURpcnMpIHtcclxuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZVVubW91bnQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHluYW1pY0NoaWxkcmVuICYmXHJcbiAgICAgICAgICAgICAgICAvLyAjMTE1MzogZmFzdCBwYXRoIHNob3VsZCBub3QgYmUgdGFrZW4gZm9yIG5vbi1zdGFibGUgKHYtZm9yKSBmcmFnbWVudHNcclxuICAgICAgICAgICAgICAgICh0eXBlICE9PSBGcmFnbWVudCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChwYXRjaEZsYWcgPiAwICYmIHBhdGNoRmxhZyAmIDY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqLykpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBmYXN0IHBhdGggZm9yIGJsb2NrIG5vZGVzOiBvbmx5IG5lZWQgdG8gdW5tb3VudCBkeW5hbWljIGNoaWxkcmVuLlxyXG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGR5bmFtaWNDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCh0eXBlID09PSBGcmFnbWVudCAmJlxyXG4gICAgICAgICAgICAgICAgKHBhdGNoRmxhZyAmIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLyB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoRmxhZyAmIDI1NiAvKiBVTktFWUVEX0ZSQUdNRU5UICovKSkgfHxcclxuICAgICAgICAgICAgICAgICghb3B0aW1pemVkICYmIHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhbiB1bm1vdW50ZWQgdGVsZXBvcnQgc2hvdWxkIGFsd2F5cyByZW1vdmUgaXRzIGNoaWxkcmVuIGlmIG5vdCBkaXNhYmxlZFxyXG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8gJiZcclxuICAgICAgICAgICAgICAgIChkb1JlbW92ZSB8fCAhaXNUZWxlcG9ydERpc2FibGVkKHZub2RlLnByb3BzKSkpIHtcclxuICAgICAgICAgICAgICAgIHZub2RlLnR5cGUucmVtb3ZlKHZub2RlLCBpbnRlcm5hbHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlKHZub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVVbm1vdW50ZWQpIHx8IHNob3VsZEludm9rZURpcnMpIHtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIHNob3VsZEludm9rZURpcnMgJiZcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICd1bm1vdW50ZWQnKTtcclxuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCByZW1vdmUgPSB2bm9kZSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyB0eXBlLCBlbCwgYW5jaG9yLCB0cmFuc2l0aW9uIH0gPSB2bm9kZTtcclxuICAgICAgICBpZiAodHlwZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgcmVtb3ZlRnJhZ21lbnQoZWwsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB0eXBlID09PSBTdGF0aWMpIHtcclxuICAgICAgICAgICAgcmVtb3ZlU3RhdGljTm9kZSh2bm9kZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGVyZm9ybVJlbW92ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgaG9zdFJlbW92ZShlbCk7XHJcbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uICYmICF0cmFuc2l0aW9uLnBlcnNpc3RlZCAmJiB0cmFuc2l0aW9uLmFmdGVyTGVhdmUpIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovICYmXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24gJiZcclxuICAgICAgICAgICAgIXRyYW5zaXRpb24ucGVyc2lzdGVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgbGVhdmUsIGRlbGF5TGVhdmUgfSA9IHRyYW5zaXRpb247XHJcbiAgICAgICAgICAgIGNvbnN0IHBlcmZvcm1MZWF2ZSA9ICgpID0+IGxlYXZlKGVsLCBwZXJmb3JtUmVtb3ZlKTtcclxuICAgICAgICAgICAgaWYgKGRlbGF5TGVhdmUpIHtcclxuICAgICAgICAgICAgICAgIGRlbGF5TGVhdmUodm5vZGUuZWwsIHBlcmZvcm1SZW1vdmUsIHBlcmZvcm1MZWF2ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwZXJmb3JtTGVhdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGVyZm9ybVJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCByZW1vdmVGcmFnbWVudCA9IChjdXIsIGVuZCkgPT4ge1xyXG4gICAgICAgIC8vIEZvciBmcmFnbWVudHMsIGRpcmVjdGx5IHJlbW92ZSBhbGwgY29udGFpbmVkIERPTSBub2Rlcy5cclxuICAgICAgICAvLyAoZnJhZ21lbnQgY2hpbGQgbm9kZXMgY2Fubm90IGhhdmUgdHJhbnNpdGlvbilcclxuICAgICAgICBsZXQgbmV4dDtcclxuICAgICAgICB3aGlsZSAoY3VyICE9PSBlbmQpIHtcclxuICAgICAgICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhjdXIpO1xyXG4gICAgICAgICAgICBob3N0UmVtb3ZlKGN1cik7XHJcbiAgICAgICAgICAgIGN1ciA9IG5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhvc3RSZW1vdmUoZW5kKTtcclxuICAgIH07XHJcbiAgICBjb25zdCB1bm1vdW50Q29tcG9uZW50ID0gKGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpID0+IHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICh0cnVlICkgJiYgaW5zdGFuY2UudHlwZS5fX2htcklkKSB7XHJcbiAgICAgICAgICAgIHVucmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IGJ1bSwgZWZmZWN0cywgdXBkYXRlLCBzdWJUcmVlLCB1bSB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgLy8gYmVmb3JlVW5tb3VudCBob29rXHJcbiAgICAgICAgaWYgKGJ1bSkge1xyXG4gICAgICAgICAgICBpbnZva2VBcnJheUZucyhidW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZWZmZWN0cykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVmZmVjdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHN0b3AoZWZmZWN0c1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdXBkYXRlIG1heSBiZSBudWxsIGlmIGEgY29tcG9uZW50IGlzIHVubW91bnRlZCBiZWZvcmUgaXRzIGFzeW5jXHJcbiAgICAgICAgLy8gc2V0dXAgaGFzIHJlc29sdmVkLlxyXG4gICAgICAgIGlmICh1cGRhdGUpIHtcclxuICAgICAgICAgICAgc3RvcCh1cGRhdGUpO1xyXG4gICAgICAgICAgICB1bm1vdW50KHN1YlRyZWUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB1bm1vdW50ZWQgaG9va1xyXG4gICAgICAgIGlmICh1bSkge1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QodW0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuaXNVbm1vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAvLyBBIGNvbXBvbmVudCB3aXRoIGFzeW5jIGRlcCBpbnNpZGUgYSBwZW5kaW5nIHN1c3BlbnNlIGlzIHVubW91bnRlZCBiZWZvcmVcclxuICAgICAgICAvLyBpdHMgYXN5bmMgZGVwIHJlc29sdmVzLiBUaGlzIHNob3VsZCByZW1vdmUgdGhlIGRlcCBmcm9tIHRoZSBzdXNwZW5zZSwgYW5kXHJcbiAgICAgICAgLy8gY2F1c2UgdGhlIHN1c3BlbnNlIHRvIHJlc29sdmUgaW1tZWRpYXRlbHkgaWYgdGhhdCB3YXMgdGhlIGxhc3QgZGVwLlxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UgJiZcclxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJlxyXG4gICAgICAgICAgICAhcGFyZW50U3VzcGVuc2UuaXNVbm1vdW50ZWQgJiZcclxuICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNEZXAgJiZcclxuICAgICAgICAgICAgIWluc3RhbmNlLmFzeW5jUmVzb2x2ZWQgJiZcclxuICAgICAgICAgICAgaW5zdGFuY2Uuc3VzcGVuc2VJZCA9PT0gcGFyZW50U3VzcGVuc2UucGVuZGluZ0lkKSB7XHJcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLmRlcHMtLTtcclxuICAgICAgICAgICAgaWYgKHBhcmVudFN1c3BlbnNlLmRlcHMgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCB1bm1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlLCBzdGFydCA9IDApID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB1bm1vdW50KGNoaWxkcmVuW2ldLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSwgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZ2V0TmV4dEhvc3ROb2RlID0gdm5vZGUgPT4ge1xyXG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0TmV4dEhvc3ROb2RlKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCB2bm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZub2RlLnN1c3BlbnNlLm5leHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhvc3ROZXh0U2libGluZygodm5vZGUuYW5jaG9yIHx8IHZub2RlLmVsKSk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVuZGVyID0gKHZub2RlLCBjb250YWluZXIpID0+IHtcclxuICAgICAgICBpZiAodm5vZGUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoY29udGFpbmVyLl92bm9kZSkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudChjb250YWluZXIuX3Zub2RlLCBudWxsLCBudWxsLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGF0Y2goY29udGFpbmVyLl92bm9kZSB8fCBudWxsLCB2bm9kZSwgY29udGFpbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcclxuICAgICAgICBjb250YWluZXIuX3Zub2RlID0gdm5vZGU7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaW50ZXJuYWxzID0ge1xyXG4gICAgICAgIHA6IHBhdGNoLFxyXG4gICAgICAgIHVtOiB1bm1vdW50LFxyXG4gICAgICAgIG06IG1vdmUsXHJcbiAgICAgICAgcjogcmVtb3ZlLFxyXG4gICAgICAgIG10OiBtb3VudENvbXBvbmVudCxcclxuICAgICAgICBtYzogbW91bnRDaGlsZHJlbixcclxuICAgICAgICBwYzogcGF0Y2hDaGlsZHJlbixcclxuICAgICAgICBwYmM6IHBhdGNoQmxvY2tDaGlsZHJlbixcclxuICAgICAgICBuOiBnZXROZXh0SG9zdE5vZGUsXHJcbiAgICAgICAgbzogb3B0aW9uc1xyXG4gICAgfTtcclxuICAgIGxldCBoeWRyYXRlO1xyXG4gICAgbGV0IGh5ZHJhdGVOb2RlO1xyXG4gICAgaWYgKGNyZWF0ZUh5ZHJhdGlvbkZucykge1xyXG4gICAgICAgIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV0gPSBjcmVhdGVIeWRyYXRpb25GbnMoaW50ZXJuYWxzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVuZGVyLFxyXG4gICAgICAgIGh5ZHJhdGUsXHJcbiAgICAgICAgY3JlYXRlQXBwOiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpbnZva2VWTm9kZUhvb2soaG9vaywgaW5zdGFuY2UsIHZub2RlLCBwcmV2Vk5vZGUgPSBudWxsKSB7XHJcbiAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgNyAvKiBWTk9ERV9IT09LICovLCBbXHJcbiAgICAgICAgdm5vZGUsXHJcbiAgICAgICAgcHJldlZOb2RlXHJcbiAgICBdKTtcclxufVxyXG4vKipcclxuICogIzExNTZcclxuICogV2hlbiBhIGNvbXBvbmVudCBpcyBITVItZW5hYmxlZCwgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCBhbGwgc3RhdGljIG5vZGVzXHJcbiAqIGluc2lkZSBhIGJsb2NrIGFsc28gaW5oZXJpdCB0aGUgRE9NIGVsZW1lbnQgZnJvbSB0aGUgcHJldmlvdXMgdHJlZSBzbyB0aGF0XHJcbiAqIEhNUiB1cGRhdGVzICh3aGljaCBhcmUgZnVsbCB1cGRhdGVzKSBjYW4gcmV0cmlldmUgdGhlIGVsZW1lbnQgZm9yIHBhdGNoaW5nLlxyXG4gKlxyXG4gKiAjMjA4MFxyXG4gKiBJbnNpZGUga2V5ZWQgYHRlbXBsYXRlYCBmcmFnbWVudCBzdGF0aWMgY2hpbGRyZW4sIGlmIGEgZnJhZ21lbnQgaXMgbW92ZWQsXHJcbiAqIHRoZSBjaGlsZHJlbiB3aWxsIGFsd2F5cyBtb3ZlZCBzbyB0aGF0IG5lZWQgaW5oZXJpdCBlbCBmb3JtIHByZXZpb3VzIG5vZGVzXHJcbiAqIHRvIGVuc3VyZSBjb3JyZWN0IG1vdmVkIHBvc2l0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHNoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgY29uc3QgY2gxID0gbjEuY2hpbGRyZW47XHJcbiAgICBjb25zdCBjaDIgPSBuMi5jaGlsZHJlbjtcclxuICAgIGlmIChpc0FycmF5KGNoMSkgJiYgaXNBcnJheShjaDIpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaDEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gdGhpcyBpcyBvbmx5IGNhbGxlZCBpbiB0aGUgb3B0aW1pemVkIHBhdGggc28gYXJyYXkgY2hpbGRyZW4gYXJlXHJcbiAgICAgICAgICAgIC8vIGd1YXJhbnRlZWQgdG8gYmUgdm5vZGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGMxID0gY2gxW2ldO1xyXG4gICAgICAgICAgICBsZXQgYzIgPSBjaDJbaV07XHJcbiAgICAgICAgICAgIGlmIChjMi5zaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gJiYgIWMyLmR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGMyLnBhdGNoRmxhZyA8PSAwIHx8IGMyLnBhdGNoRmxhZyA9PT0gMzIgLyogSFlEUkFURV9FVkVOVFMgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBjMiA9IGNoMltpXSA9IGNsb25lSWZNb3VudGVkKGNoMltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYzIuZWwgPSBjMS5lbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghc2hhbGxvdylcclxuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKGMxLCBjMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYWxzbyBpbmhlcml0IGZvciBjb21tZW50IG5vZGVzLCBidXQgbm90IHBsYWNlaG9sZGVycyAoZS5nLiB2LWlmIHdoaWNoXHJcbiAgICAgICAgICAgIC8vIHdvdWxkIGhhdmUgcmVjZWl2ZWQgLmVsIGR1cmluZyBibG9jayBwYXRjaClcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjMi50eXBlID09PSBDb21tZW50ICYmICFjMi5lbCkge1xyXG4gICAgICAgICAgICAgICAgYzIuZWwgPSBjMS5lbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Mb25nZXN0X2luY3JlYXNpbmdfc3Vic2VxdWVuY2VcclxuZnVuY3Rpb24gZ2V0U2VxdWVuY2UoYXJyKSB7XHJcbiAgICBjb25zdCBwID0gYXJyLnNsaWNlKCk7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbMF07XHJcbiAgICBsZXQgaSwgaiwgdSwgdiwgYztcclxuICAgIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBjb25zdCBhcnJJID0gYXJyW2ldO1xyXG4gICAgICAgIGlmIChhcnJJICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGogPSByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAoYXJyW2pdIDwgYXJySSkge1xyXG4gICAgICAgICAgICAgICAgcFtpXSA9IGo7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpKTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHUgPSAwO1xyXG4gICAgICAgICAgICB2ID0gcmVzdWx0Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIHdoaWxlICh1IDwgdikge1xyXG4gICAgICAgICAgICAgICAgYyA9ICgodSArIHYpIC8gMikgfCAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFycltyZXN1bHRbY11dIDwgYXJySSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHUgPSBjICsgMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHYgPSBjO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhcnJJIDwgYXJyW3Jlc3VsdFt1XV0pIHtcclxuICAgICAgICAgICAgICAgIGlmICh1ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBbaV0gPSByZXN1bHRbdSAtIDFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0W3VdID0gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHUgPSByZXN1bHQubGVuZ3RoO1xyXG4gICAgdiA9IHJlc3VsdFt1IC0gMV07XHJcbiAgICB3aGlsZSAodS0tID4gMCkge1xyXG4gICAgICAgIHJlc3VsdFt1XSA9IHY7XHJcbiAgICAgICAgdiA9IHBbdl07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XG5cbmNvbnN0IGlzVGVsZXBvcnQgPSAodHlwZSkgPT4gdHlwZS5fX2lzVGVsZXBvcnQ7XHJcbmNvbnN0IGlzVGVsZXBvcnREaXNhYmxlZCA9IChwcm9wcykgPT4gcHJvcHMgJiYgKHByb3BzLmRpc2FibGVkIHx8IHByb3BzLmRpc2FibGVkID09PSAnJyk7XHJcbmNvbnN0IHJlc29sdmVUYXJnZXQgPSAocHJvcHMsIHNlbGVjdCkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0U2VsZWN0b3IgPSBwcm9wcyAmJiBwcm9wcy50bztcclxuICAgIGlmIChpc1N0cmluZyh0YXJnZXRTZWxlY3RvcikpIHtcclxuICAgICAgICBpZiAoIXNlbGVjdCkge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgIHdhcm4oYEN1cnJlbnQgcmVuZGVyZXIgZG9lcyBub3Qgc3VwcG9ydCBzdHJpbmcgdGFyZ2V0IGZvciBUZWxlcG9ydHMuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGAobWlzc2luZyBxdWVyeVNlbGVjdG9yIHJlbmRlcmVyIG9wdGlvbilgKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBzZWxlY3QodGFyZ2V0U2VsZWN0b3IpO1xyXG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRmFpbGVkIHRvIGxvY2F0ZSBUZWxlcG9ydCB0YXJnZXQgd2l0aCBzZWxlY3RvciBcIiR7dGFyZ2V0U2VsZWN0b3J9XCIuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgTm90ZSB0aGUgdGFyZ2V0IGVsZW1lbnQgbXVzdCBleGlzdCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkIC0gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpLmUuIHRoZSB0YXJnZXQgY2Fubm90IGJlIHJlbmRlcmVkIGJ5IHRoZSBjb21wb25lbnQgaXRzZWxmLCBhbmQgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpZGVhbGx5IHNob3VsZCBiZSBvdXRzaWRlIG9mIHRoZSBlbnRpcmUgVnVlIGNvbXBvbmVudCB0cmVlLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhdGFyZ2V0U2VsZWN0b3IgJiYgIWlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcclxuICAgICAgICAgICAgd2FybihgSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQ6ICR7dGFyZ2V0U2VsZWN0b3J9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0YXJnZXRTZWxlY3RvcjtcclxuICAgIH1cclxufTtcclxuY29uc3QgVGVsZXBvcnRJbXBsID0ge1xyXG4gICAgX19pc1RlbGVwb3J0OiB0cnVlLFxyXG4gICAgcHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkLCBpbnRlcm5hbHMpIHtcclxuICAgICAgICBjb25zdCB7IG1jOiBtb3VudENoaWxkcmVuLCBwYzogcGF0Y2hDaGlsZHJlbiwgcGJjOiBwYXRjaEJsb2NrQ2hpbGRyZW4sIG86IHsgaW5zZXJ0LCBxdWVyeVNlbGVjdG9yLCBjcmVhdGVUZXh0LCBjcmVhdGVDb21tZW50IH0gfSA9IGludGVybmFscztcclxuICAgICAgICBjb25zdCBkaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZChuMi5wcm9wcyk7XHJcbiAgICAgICAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuIH0gPSBuMjtcclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBpbnNlcnQgYW5jaG9ycyBpbiB0aGUgbWFpbiB2aWV3XHJcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gKG4yLmVsID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgICAgICA/IGNyZWF0ZUNvbW1lbnQoJ3RlbGVwb3J0IHN0YXJ0JylcclxuICAgICAgICAgICAgICAgIDogY3JlYXRlVGV4dCgnJykpO1xyXG4gICAgICAgICAgICBjb25zdCBtYWluQW5jaG9yID0gKG4yLmFuY2hvciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgICAgICAgICAgPyBjcmVhdGVDb21tZW50KCd0ZWxlcG9ydCBlbmQnKVxyXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVUZXh0KCcnKSk7XHJcbiAgICAgICAgICAgIGluc2VydChwbGFjZWhvbGRlciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICBpbnNlcnQobWFpbkFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAobjIudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChuMi5wcm9wcywgcXVlcnlTZWxlY3RvcikpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSAobjIudGFyZ2V0QW5jaG9yID0gY3JlYXRlVGV4dCgnJykpO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBpbnNlcnQodGFyZ2V0QW5jaG9yLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIG1vdW50OicsIHRhcmdldCwgYCgke3R5cGVvZiB0YXJnZXR9KWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG1vdW50ID0gKGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBUZWxlcG9ydCAqYWx3YXlzKiBoYXMgQXJyYXkgY2hpbGRyZW4uIFRoaXMgaXMgZW5mb3JjZWQgaW4gYm90aCB0aGVcclxuICAgICAgICAgICAgICAgIC8vIGNvbXBpbGVyIGFuZCB2bm9kZSBjaGlsZHJlbiBub3JtYWxpemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91bnRDaGlsZHJlbihjaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIG1vdW50KGNvbnRhaW5lciwgbWFpbkFuY2hvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBtb3VudCh0YXJnZXQsIHRhcmdldEFuY2hvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBjb250ZW50XHJcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XHJcbiAgICAgICAgICAgIGNvbnN0IG1haW5BbmNob3IgPSAobjIuYW5jaG9yID0gbjEuYW5jaG9yKTtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gKG4yLnRhcmdldCA9IG4xLnRhcmdldCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEFuY2hvciA9IChuMi50YXJnZXRBbmNob3IgPSBuMS50YXJnZXRBbmNob3IpO1xyXG4gICAgICAgICAgICBjb25zdCB3YXNEaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZChuMS5wcm9wcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb250YWluZXIgPSB3YXNEaXNhYmxlZCA/IGNvbnRhaW5lciA6IHRhcmdldDtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudEFuY2hvciA9IHdhc0Rpc2FibGVkID8gbWFpbkFuY2hvciA6IHRhcmdldEFuY2hvcjtcclxuICAgICAgICAgICAgaWYgKG4yLmR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgLy8gZmFzdCBwYXRoIHdoZW4gdGhlIHRlbGVwb3J0IGhhcHBlbnMgdG8gYmUgYSBibG9jayByb290XHJcbiAgICAgICAgICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4objEuZHluYW1pY0NoaWxkcmVuLCBuMi5keW5hbWljQ2hpbGRyZW4sIGN1cnJlbnRDb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIC8vIGV2ZW4gaW4gYmxvY2sgdHJlZSBtb2RlIHdlIG5lZWQgdG8gbWFrZSBzdXJlIGFsbCByb290LWxldmVsIG5vZGVzXHJcbiAgICAgICAgICAgICAgICAvLyBpbiB0aGUgdGVsZXBvcnQgaW5oZXJpdCBwcmV2aW91cyBET00gcmVmZXJlbmNlcyBzbyB0aGF0IHRoZXkgY2FuXHJcbiAgICAgICAgICAgICAgICAvLyBiZSBtb3ZlZCBpbiBmdXR1cmUgcGF0Y2hlcy5cclxuICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghb3B0aW1pemVkKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRjaENoaWxkcmVuKG4xLCBuMiwgY3VycmVudENvbnRhaW5lciwgY3VycmVudEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF3YXNEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVuYWJsZWQgLT4gZGlzYWJsZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGludG8gbWFpbiBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICBtb3ZlVGVsZXBvcnQobjIsIGNvbnRhaW5lciwgbWFpbkFuY2hvciwgaW50ZXJuYWxzLCAxIC8qIFRPR0dMRSAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0YXJnZXQgY2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgaWYgKChuMi5wcm9wcyAmJiBuMi5wcm9wcy50bykgIT09IChuMS5wcm9wcyAmJiBuMS5wcm9wcy50bykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0VGFyZ2V0ID0gKG4yLnRhcmdldCA9IHJlc29sdmVUYXJnZXQobjIucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlVGVsZXBvcnQobjIsIG5leHRUYXJnZXQsIG51bGwsIGludGVybmFscywgMCAvKiBUQVJHRVRfQ0hBTkdFICovKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIHVwZGF0ZTonLCB0YXJnZXQsIGAoJHt0eXBlb2YgdGFyZ2V0fSlgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh3YXNEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpc2FibGVkIC0+IGVuYWJsZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGludG8gdGVsZXBvcnQgdGFyZ2V0XHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVRlbGVwb3J0KG4yLCB0YXJnZXQsIHRhcmdldEFuY2hvciwgaW50ZXJuYWxzLCAxIC8qIFRPR0dMRSAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlKHZub2RlLCB7IHI6IHJlbW92ZSwgbzogeyByZW1vdmU6IGhvc3RSZW1vdmUgfSB9KSB7XHJcbiAgICAgICAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuLCBhbmNob3IgfSA9IHZub2RlO1xyXG4gICAgICAgIGhvc3RSZW1vdmUoYW5jaG9yKTtcclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlKGNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtb3ZlOiBtb3ZlVGVsZXBvcnQsXHJcbiAgICBoeWRyYXRlOiBoeWRyYXRlVGVsZXBvcnRcclxufTtcclxuZnVuY3Rpb24gbW92ZVRlbGVwb3J0KHZub2RlLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgeyBvOiB7IGluc2VydCB9LCBtOiBtb3ZlIH0sIG1vdmVUeXBlID0gMiAvKiBSRU9SREVSICovKSB7XHJcbiAgICAvLyBtb3ZlIHRhcmdldCBhbmNob3IgaWYgdGhpcyBpcyBhIHRhcmdldCBjaGFuZ2UuXHJcbiAgICBpZiAobW92ZVR5cGUgPT09IDAgLyogVEFSR0VUX0NIQU5HRSAqLykge1xyXG4gICAgICAgIGluc2VydCh2bm9kZS50YXJnZXRBbmNob3IsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgZWwsIGFuY2hvciwgc2hhcGVGbGFnLCBjaGlsZHJlbiwgcHJvcHMgfSA9IHZub2RlO1xyXG4gICAgY29uc3QgaXNSZW9yZGVyID0gbW92ZVR5cGUgPT09IDIgLyogUkVPUkRFUiAqLztcclxuICAgIC8vIG1vdmUgbWFpbiB2aWV3IGFuY2hvciBpZiB0aGlzIGlzIGEgcmUtb3JkZXIuXHJcbiAgICBpZiAoaXNSZW9yZGVyKSB7XHJcbiAgICAgICAgaW5zZXJ0KGVsLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XHJcbiAgICB9XHJcbiAgICAvLyBpZiB0aGlzIGlzIGEgcmUtb3JkZXIgYW5kIHRlbGVwb3J0IGlzIGVuYWJsZWQgKGNvbnRlbnQgaXMgaW4gdGFyZ2V0KVxyXG4gICAgLy8gZG8gbm90IG1vdmUgY2hpbGRyZW4uIFNvIHRoZSBvcHBvc2l0ZSBpczogb25seSBtb3ZlIGNoaWxkcmVuIGlmIHRoaXNcclxuICAgIC8vIGlzIG5vdCBhIHJlb3JkZXIsIG9yIHRoZSB0ZWxlcG9ydCBpcyBkaXNhYmxlZFxyXG4gICAgaWYgKCFpc1Jlb3JkZXIgfHwgaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xyXG4gICAgICAgIC8vIFRlbGVwb3J0IGhhcyBlaXRoZXIgQXJyYXkgY2hpbGRyZW4gb3Igbm8gY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG1vdmUoY2hpbGRyZW5baV0sIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCAyIC8qIFJFT1JERVIgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gbW92ZSBtYWluIHZpZXcgYW5jaG9yIGlmIHRoaXMgaXMgYSByZS1vcmRlci5cclxuICAgIGlmIChpc1Jlb3JkZXIpIHtcclxuICAgICAgICBpbnNlcnQoYW5jaG9yLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaHlkcmF0ZVRlbGVwb3J0KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQsIHsgbzogeyBuZXh0U2libGluZywgcGFyZW50Tm9kZSwgcXVlcnlTZWxlY3RvciB9IH0sIGh5ZHJhdGVDaGlsZHJlbikge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gKHZub2RlLnRhcmdldCA9IHJlc29sdmVUYXJnZXQodm5vZGUucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpKTtcclxuICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAvLyBpZiBtdWx0aXBsZSB0ZWxlcG9ydHMgcmVuZGVyZWQgdG8gdGhlIHNhbWUgdGFyZ2V0IGVsZW1lbnQsIHdlIG5lZWQgdG9cclxuICAgICAgICAvLyBwaWNrIHVwIGZyb20gd2hlcmUgdGhlIGxhc3QgdGVsZXBvcnQgZmluaXNoZWQgaW5zdGVhZCBvZiB0aGUgZmlyc3Qgbm9kZVxyXG4gICAgICAgIGNvbnN0IHRhcmdldE5vZGUgPSB0YXJnZXQuX2xwYSB8fCB0YXJnZXQuZmlyc3RDaGlsZDtcclxuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgaWYgKGlzVGVsZXBvcnREaXNhYmxlZCh2bm9kZS5wcm9wcykpIHtcclxuICAgICAgICAgICAgICAgIHZub2RlLmFuY2hvciA9IGh5ZHJhdGVDaGlsZHJlbihuZXh0U2libGluZyhub2RlKSwgdm5vZGUsIHBhcmVudE5vZGUobm9kZSksIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgPSB0YXJnZXROb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgPSBoeWRyYXRlQ2hpbGRyZW4odGFyZ2V0Tm9kZSwgdm5vZGUsIHRhcmdldCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0YXJnZXQuX2xwYSA9XHJcbiAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgJiYgbmV4dFNpYmxpbmcodm5vZGUudGFyZ2V0QW5jaG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdm5vZGUuYW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLmFuY2hvcik7XHJcbn1cclxuLy8gRm9yY2UtY2FzdGVkIHB1YmxpYyB0eXBpbmcgZm9yIGggYW5kIFRTWCBwcm9wcyBpbmZlcmVuY2VcclxuY29uc3QgVGVsZXBvcnQgPSBUZWxlcG9ydEltcGw7XG5cbmNvbnN0IENPTVBPTkVOVFMgPSAnY29tcG9uZW50cyc7XHJcbmNvbnN0IERJUkVDVElWRVMgPSAnZGlyZWN0aXZlcyc7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudChuYW1lKSB7XHJcbiAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KENPTVBPTkVOVFMsIG5hbWUpIHx8IG5hbWU7XHJcbn1cclxuY29uc3QgTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCA9IFN5bWJvbCgpO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHJlc29sdmVEeW5hbWljQ29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgaWYgKGlzU3RyaW5nKGNvbXBvbmVudCkpIHtcclxuICAgICAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KENPTVBPTkVOVFMsIGNvbXBvbmVudCwgZmFsc2UpIHx8IGNvbXBvbmVudDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGludmFsaWQgdHlwZXMgd2lsbCBmYWxsdGhyb3VnaCB0byBjcmVhdGVWTm9kZSBhbmQgcmFpc2Ugd2FybmluZ1xyXG4gICAgICAgIHJldHVybiAoY29tcG9uZW50IHx8IE5VTExfRFlOQU1JQ19DT01QT05FTlQpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZURpcmVjdGl2ZShuYW1lKSB7XHJcbiAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KERJUkVDVElWRVMsIG5hbWUpO1xyXG59XHJcbi8vIGltcGxlbWVudGF0aW9uXHJcbmZ1bmN0aW9uIHJlc29sdmVBc3NldCh0eXBlLCBuYW1lLCB3YXJuTWlzc2luZyA9IHRydWUpIHtcclxuICAgIGNvbnN0IGluc3RhbmNlID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIHx8IGN1cnJlbnRJbnN0YW5jZTtcclxuICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XHJcbiAgICAgICAgLy8gc2VsZiBuYW1lIGhhcyBoaWdoZXN0IHByaW9yaXR5XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IENPTVBPTkVOVFMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZk5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWU7XHJcbiAgICAgICAgICAgIGlmIChzZWxmTmFtZSAmJlxyXG4gICAgICAgICAgICAgICAgKHNlbGZOYW1lID09PSBuYW1lIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZk5hbWUgPT09IGNhbWVsaXplKG5hbWUpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZk5hbWUgPT09IGNhcGl0YWxpemUoY2FtZWxpemUobmFtZSkpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXMgPSBcclxuICAgICAgICAvLyBsb2NhbCByZWdpc3RyYXRpb25cclxuICAgICAgICAvLyBjaGVjayBpbnN0YW5jZVt0eXBlXSBmaXJzdCBmb3IgY29tcG9uZW50cyB3aXRoIG1peGluIG9yIGV4dGVuZHMuXHJcbiAgICAgICAgcmVzb2x2ZShpbnN0YW5jZVt0eXBlXSB8fCBDb21wb25lbnRbdHlwZV0sIG5hbWUpIHx8XHJcbiAgICAgICAgICAgIC8vIGdsb2JhbCByZWdpc3RyYXRpb25cclxuICAgICAgICAgICAgcmVzb2x2ZShpbnN0YW5jZS5hcHBDb250ZXh0W3R5cGVdLCBuYW1lKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcclxuICAgICAgICAgICAgd2FybihgRmFpbGVkIHRvIHJlc29sdmUgJHt0eXBlLnNsaWNlKDAsIC0xKX06ICR7bmFtZX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHdhcm4oYHJlc29sdmUke2NhcGl0YWxpemUodHlwZS5zbGljZSgwLCAtMSkpfSBgICtcclxuICAgICAgICAgICAgYGNhbiBvbmx5IGJlIHVzZWQgaW4gcmVuZGVyKCkgb3Igc2V0dXAoKS5gKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZXNvbHZlKHJlZ2lzdHJ5LCBuYW1lKSB7XHJcbiAgICByZXR1cm4gKHJlZ2lzdHJ5ICYmXHJcbiAgICAgICAgKHJlZ2lzdHJ5W25hbWVdIHx8XHJcbiAgICAgICAgICAgIHJlZ2lzdHJ5W2NhbWVsaXplKG5hbWUpXSB8fFxyXG4gICAgICAgICAgICByZWdpc3RyeVtjYXBpdGFsaXplKGNhbWVsaXplKG5hbWUpKV0pKTtcclxufVxuXG5jb25zdCBGcmFnbWVudCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnRnJhZ21lbnQnIDogdW5kZWZpbmVkKTtcclxuY29uc3QgVGV4dCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnVGV4dCcgOiB1bmRlZmluZWQpO1xyXG5jb25zdCBDb21tZW50ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdDb21tZW50JyA6IHVuZGVmaW5lZCk7XHJcbmNvbnN0IFN0YXRpYyA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnU3RhdGljJyA6IHVuZGVmaW5lZCk7XHJcbi8vIFNpbmNlIHYtaWYgYW5kIHYtZm9yIGFyZSB0aGUgdHdvIHBvc3NpYmxlIHdheXMgbm9kZSBzdHJ1Y3R1cmUgY2FuIGR5bmFtaWNhbGx5XHJcbi8vIGNoYW5nZSwgb25jZSB3ZSBjb25zaWRlciB2LWlmIGJyYW5jaGVzIGFuZCBlYWNoIHYtZm9yIGZyYWdtZW50IGEgYmxvY2ssIHdlXHJcbi8vIGNhbiBkaXZpZGUgYSB0ZW1wbGF0ZSBpbnRvIG5lc3RlZCBibG9ja3MsIGFuZCB3aXRoaW4gZWFjaCBibG9jayB0aGUgbm9kZVxyXG4vLyBzdHJ1Y3R1cmUgd291bGQgYmUgc3RhYmxlLiBUaGlzIGFsbG93cyB1cyB0byBza2lwIG1vc3QgY2hpbGRyZW4gZGlmZmluZ1xyXG4vLyBhbmQgb25seSB3b3JyeSBhYm91dCB0aGUgZHluYW1pYyBub2RlcyAoaW5kaWNhdGVkIGJ5IHBhdGNoIGZsYWdzKS5cclxuY29uc3QgYmxvY2tTdGFjayA9IFtdO1xyXG5sZXQgY3VycmVudEJsb2NrID0gbnVsbDtcclxuLyoqXHJcbiAqIE9wZW4gYSBibG9jay5cclxuICogVGhpcyBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgYGNyZWF0ZUJsb2NrYC4gSXQgY2Fubm90IGJlIHBhcnQgb2YgYGNyZWF0ZUJsb2NrYFxyXG4gKiBiZWNhdXNlIHRoZSBjaGlsZHJlbiBvZiB0aGUgYmxvY2sgYXJlIGV2YWx1YXRlZCBiZWZvcmUgYGNyZWF0ZUJsb2NrYCBpdHNlbGZcclxuICogaXMgY2FsbGVkLiBUaGUgZ2VuZXJhdGVkIGNvZGUgdHlwaWNhbGx5IGxvb2tzIGxpa2UgdGhpczpcclxuICpcclxuICogYGBganNcclxuICogZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gKiAgIHJldHVybiAob3BlbkJsb2NrKCksY3JlYXRlQmxvY2soJ2RpdicsIG51bGwsIFsuLi5dKSlcclxuICogfVxyXG4gKiBgYGBcclxuICogZGlzYWJsZVRyYWNraW5nIGlzIHRydWUgd2hlbiBjcmVhdGluZyBhIHYtZm9yIGZyYWdtZW50IGJsb2NrLCBzaW5jZSBhIHYtZm9yXHJcbiAqIGZyYWdtZW50IGFsd2F5cyBkaWZmcyBpdHMgY2hpbGRyZW4uXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBvcGVuQmxvY2soZGlzYWJsZVRyYWNraW5nID0gZmFsc2UpIHtcclxuICAgIGJsb2NrU3RhY2sucHVzaCgoY3VycmVudEJsb2NrID0gZGlzYWJsZVRyYWNraW5nID8gbnVsbCA6IFtdKSk7XHJcbn1cclxuZnVuY3Rpb24gY2xvc2VCbG9jaygpIHtcclxuICAgIGJsb2NrU3RhY2sucG9wKCk7XHJcbiAgICBjdXJyZW50QmxvY2sgPSBibG9ja1N0YWNrW2Jsb2NrU3RhY2subGVuZ3RoIC0gMV0gfHwgbnVsbDtcclxufVxyXG4vLyBXaGV0aGVyIHdlIHNob3VsZCBiZSB0cmFja2luZyBkeW5hbWljIGNoaWxkIG5vZGVzIGluc2lkZSBhIGJsb2NrLlxyXG4vLyBPbmx5IHRyYWNrcyB3aGVuIHRoaXMgdmFsdWUgaXMgPiAwXHJcbi8vIFdlIGFyZSBub3QgdXNpbmcgYSBzaW1wbGUgYm9vbGVhbiBiZWNhdXNlIHRoaXMgdmFsdWUgbWF5IG5lZWQgdG8gYmVcclxuLy8gaW5jcmVtZW50ZWQvZGVjcmVtZW50ZWQgYnkgbmVzdGVkIHVzYWdlIG9mIHYtb25jZSAoc2VlIGJlbG93KVxyXG5sZXQgc2hvdWxkVHJhY2sgPSAxO1xyXG4vKipcclxuICogQmxvY2sgdHJhY2tpbmcgc29tZXRpbWVzIG5lZWRzIHRvIGJlIGRpc2FibGVkLCBmb3IgZXhhbXBsZSBkdXJpbmcgdGhlXHJcbiAqIGNyZWF0aW9uIG9mIGEgdHJlZSB0aGF0IG5lZWRzIHRvIGJlIGNhY2hlZCBieSB2LW9uY2UuIFRoZSBjb21waWxlciBnZW5lcmF0ZXNcclxuICogY29kZSBsaWtlIHRoaXM6XHJcbiAqXHJcbiAqIGBgYCBqc1xyXG4gKiBfY2FjaGVbMV0gfHwgKFxyXG4gKiAgIHNldEJsb2NrVHJhY2tpbmcoLTEpLFxyXG4gKiAgIF9jYWNoZVsxXSA9IGNyZWF0ZVZOb2RlKC4uLiksXHJcbiAqICAgc2V0QmxvY2tUcmFja2luZygxKSxcclxuICogICBfY2FjaGVbMV1cclxuICogKVxyXG4gKiBgYGBcclxuICpcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHNldEJsb2NrVHJhY2tpbmcodmFsdWUpIHtcclxuICAgIHNob3VsZFRyYWNrICs9IHZhbHVlO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGUgYSBibG9jayByb290IHZub2RlLiBUYWtlcyB0aGUgc2FtZSBleGFjdCBhcmd1bWVudHMgYXMgYGNyZWF0ZVZOb2RlYC5cclxuICogQSBibG9jayByb290IGtlZXBzIHRyYWNrIG9mIGR5bmFtaWMgbm9kZXMgd2l0aGluIHRoZSBibG9jayBpbiB0aGVcclxuICogYGR5bmFtaWNDaGlsZHJlbmAgYXJyYXkuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVCbG9jayh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzKSB7XHJcbiAgICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMsIHRydWUgLyogaXNCbG9jazogcHJldmVudCBhIGJsb2NrIGZyb20gdHJhY2tpbmcgaXRzZWxmICovKTtcclxuICAgIC8vIHNhdmUgY3VycmVudCBibG9jayBjaGlsZHJlbiBvbiB0aGUgYmxvY2sgdm5vZGVcclxuICAgIHZub2RlLmR5bmFtaWNDaGlsZHJlbiA9IGN1cnJlbnRCbG9jayB8fCBFTVBUWV9BUlI7XHJcbiAgICAvLyBjbG9zZSBibG9ja1xyXG4gICAgY2xvc2VCbG9jaygpO1xyXG4gICAgLy8gYSBibG9jayBpcyBhbHdheXMgZ29pbmcgdG8gYmUgcGF0Y2hlZCwgc28gdHJhY2sgaXQgYXMgYSBjaGlsZCBvZiBpdHNcclxuICAgIC8vIHBhcmVudCBibG9ja1xyXG4gICAgaWYgKHNob3VsZFRyYWNrID4gMCAmJiBjdXJyZW50QmxvY2spIHtcclxuICAgICAgICBjdXJyZW50QmxvY2sucHVzaCh2bm9kZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdm5vZGU7XHJcbn1cclxuZnVuY3Rpb24gaXNWTm9kZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlID8gdmFsdWUuX192X2lzVk5vZGUgPT09IHRydWUgOiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgbjIuc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8gJiZcclxuICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuaGFzKG4yLnR5cGUpKSB7XHJcbiAgICAgICAgLy8gSE1SIG9ubHk6IGlmIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gaG90LXVwZGF0ZWQsIGZvcmNlIGEgcmVsb2FkLlxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBuMS50eXBlID09PSBuMi50eXBlICYmIG4xLmtleSA9PT0gbjIua2V5O1xyXG59XHJcbmxldCB2bm9kZUFyZ3NUcmFuc2Zvcm1lcjtcclxuLyoqXHJcbiAqIEludGVybmFsIEFQSSBmb3IgcmVnaXN0ZXJpbmcgYW4gYXJndW1lbnRzIHRyYW5zZm9ybSBmb3IgY3JlYXRlVk5vZGVcclxuICogdXNlZCBmb3IgY3JlYXRpbmcgc3R1YnMgaW4gdGhlIHRlc3QtdXRpbHNcclxuICogSXQgaXMgKmludGVybmFsKiBidXQgbmVlZHMgdG8gYmUgZXhwb3NlZCBmb3IgdGVzdC11dGlscyB0byBwaWNrIHVwIHByb3BlclxyXG4gKiB0eXBpbmdzXHJcbiAqL1xyXG5mdW5jdGlvbiB0cmFuc2Zvcm1WTm9kZUFyZ3ModHJhbnNmb3JtZXIpIHtcclxuICAgIHZub2RlQXJnc1RyYW5zZm9ybWVyID0gdHJhbnNmb3JtZXI7XHJcbn1cclxuY29uc3QgY3JlYXRlVk5vZGVXaXRoQXJnc1RyYW5zZm9ybSA9ICguLi5hcmdzKSA9PiB7XHJcbiAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKC4uLih2bm9kZUFyZ3NUcmFuc2Zvcm1lclxyXG4gICAgICAgID8gdm5vZGVBcmdzVHJhbnNmb3JtZXIoYXJncywgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKVxyXG4gICAgICAgIDogYXJncykpO1xyXG59O1xyXG5jb25zdCBJbnRlcm5hbE9iamVjdEtleSA9IGBfX3ZJbnRlcm5hbGA7XHJcbmNvbnN0IG5vcm1hbGl6ZUtleSA9ICh7IGtleSB9KSA9PiBrZXkgIT0gbnVsbCA/IGtleSA6IG51bGw7XHJcbmNvbnN0IG5vcm1hbGl6ZVJlZiA9ICh7IHJlZiB9KSA9PiB7XHJcbiAgICByZXR1cm4gKHJlZiAhPSBudWxsXHJcbiAgICAgICAgPyBpc0FycmF5KHJlZilcclxuICAgICAgICAgICAgPyByZWZcclxuICAgICAgICAgICAgOiB7IGk6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSwgcjogcmVmIH1cclxuICAgICAgICA6IG51bGwpO1xyXG59O1xyXG5jb25zdCBjcmVhdGVWTm9kZSA9ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgID8gY3JlYXRlVk5vZGVXaXRoQXJnc1RyYW5zZm9ybVxyXG4gICAgOiBfY3JlYXRlVk5vZGUpO1xyXG5mdW5jdGlvbiBfY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMgPSBudWxsLCBjaGlsZHJlbiA9IG51bGwsIHBhdGNoRmxhZyA9IDAsIGR5bmFtaWNQcm9wcyA9IG51bGwsIGlzQmxvY2tOb2RlID0gZmFsc2UpIHtcclxuICAgIGlmICghdHlwZSB8fCB0eXBlID09PSBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhdHlwZSkge1xyXG4gICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHZub2RlIHR5cGUgd2hlbiBjcmVhdGluZyB2bm9kZTogJHt0eXBlfS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHlwZSA9IENvbW1lbnQ7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNWTm9kZSh0eXBlKSkge1xyXG4gICAgICAgIC8vIGNyZWF0ZVZOb2RlIHJlY2VpdmluZyBhbiBleGlzdGluZyB2bm9kZS4gVGhpcyBoYXBwZW5zIGluIGNhc2VzIGxpa2VcclxuICAgICAgICAvLyA8Y29tcG9uZW50IDppcz1cInZub2RlXCIvPlxyXG4gICAgICAgIC8vICMyMDc4IG1ha2Ugc3VyZSB0byBtZXJnZSByZWZzIGR1cmluZyB0aGUgY2xvbmUgaW5zdGVhZCBvZiBvdmVyd3JpdGluZyBpdFxyXG4gICAgICAgIGNvbnN0IGNsb25lZCA9IGNsb25lVk5vZGUodHlwZSwgcHJvcHMsIHRydWUgLyogbWVyZ2VSZWY6IHRydWUgKi8pO1xyXG4gICAgICAgIGlmIChjaGlsZHJlbikge1xyXG4gICAgICAgICAgICBub3JtYWxpemVDaGlsZHJlbihjbG9uZWQsIGNoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsb25lZDtcclxuICAgIH1cclxuICAgIC8vIGNsYXNzIGNvbXBvbmVudCBub3JtYWxpemF0aW9uLlxyXG4gICAgaWYgKGlzQ2xhc3NDb21wb25lbnQodHlwZSkpIHtcclxuICAgICAgICB0eXBlID0gdHlwZS5fX3ZjY09wdHM7XHJcbiAgICB9XHJcbiAgICAvLyBjbGFzcyAmIHN0eWxlIG5vcm1hbGl6YXRpb24uXHJcbiAgICBpZiAocHJvcHMpIHtcclxuICAgICAgICAvLyBmb3IgcmVhY3RpdmUgb3IgcHJveHkgb2JqZWN0cywgd2UgbmVlZCB0byBjbG9uZSBpdCB0byBlbmFibGUgbXV0YXRpb24uXHJcbiAgICAgICAgaWYgKGlzUHJveHkocHJvcHMpIHx8IEludGVybmFsT2JqZWN0S2V5IGluIHByb3BzKSB7XHJcbiAgICAgICAgICAgIHByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB7IGNsYXNzOiBrbGFzcywgc3R5bGUgfSA9IHByb3BzO1xyXG4gICAgICAgIGlmIChrbGFzcyAmJiAhaXNTdHJpbmcoa2xhc3MpKSB7XHJcbiAgICAgICAgICAgIHByb3BzLmNsYXNzID0gbm9ybWFsaXplQ2xhc3Moa2xhc3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNPYmplY3Qoc3R5bGUpKSB7XHJcbiAgICAgICAgICAgIC8vIHJlYWN0aXZlIHN0YXRlIG9iamVjdHMgbmVlZCB0byBiZSBjbG9uZWQgc2luY2UgdGhleSBhcmUgbGlrZWx5IHRvIGJlXHJcbiAgICAgICAgICAgIC8vIG11dGF0ZWRcclxuICAgICAgICAgICAgaWYgKGlzUHJveHkoc3R5bGUpICYmICFpc0FycmF5KHN0eWxlKSkge1xyXG4gICAgICAgICAgICAgICAgc3R5bGUgPSBleHRlbmQoe30sIHN0eWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcm9wcy5zdHlsZSA9IG5vcm1hbGl6ZVN0eWxlKHN0eWxlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBlbmNvZGUgdGhlIHZub2RlIHR5cGUgaW5mb3JtYXRpb24gaW50byBhIGJpdG1hcFxyXG4gICAgY29uc3Qgc2hhcGVGbGFnID0gaXNTdHJpbmcodHlwZSlcclxuICAgICAgICA/IDEgLyogRUxFTUVOVCAqL1xyXG4gICAgICAgIDogIGlzU3VzcGVuc2UodHlwZSlcclxuICAgICAgICAgICAgPyAxMjggLyogU1VTUEVOU0UgKi9cclxuICAgICAgICAgICAgOiBpc1RlbGVwb3J0KHR5cGUpXHJcbiAgICAgICAgICAgICAgICA/IDY0IC8qIFRFTEVQT1JUICovXHJcbiAgICAgICAgICAgICAgICA6IGlzT2JqZWN0KHR5cGUpXHJcbiAgICAgICAgICAgICAgICAgICAgPyA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqL1xyXG4gICAgICAgICAgICAgICAgICAgIDogaXNGdW5jdGlvbih0eXBlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDIgLyogRlVOQ1RJT05BTF9DT01QT05FTlQgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzaGFwZUZsYWcgJiA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqLyAmJiBpc1Byb3h5KHR5cGUpKSB7XHJcbiAgICAgICAgdHlwZSA9IHRvUmF3KHR5cGUpO1xyXG4gICAgICAgIHdhcm4oYFZ1ZSByZWNlaXZlZCBhIENvbXBvbmVudCB3aGljaCB3YXMgbWFkZSBhIHJlYWN0aXZlIG9iamVjdC4gVGhpcyBjYW4gYCArXHJcbiAgICAgICAgICAgIGBsZWFkIHRvIHVubmVjZXNzYXJ5IHBlcmZvcm1hbmNlIG92ZXJoZWFkLCBhbmQgc2hvdWxkIGJlIGF2b2lkZWQgYnkgYCArXHJcbiAgICAgICAgICAgIGBtYXJraW5nIHRoZSBjb21wb25lbnQgd2l0aCBcXGBtYXJrUmF3XFxgIG9yIHVzaW5nIFxcYHNoYWxsb3dSZWZcXGAgYCArXHJcbiAgICAgICAgICAgIGBpbnN0ZWFkIG9mIFxcYHJlZlxcYC5gLCBgXFxuQ29tcG9uZW50IHRoYXQgd2FzIG1hZGUgcmVhY3RpdmU6IGAsIHR5cGUpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgdm5vZGUgPSB7XHJcbiAgICAgICAgX192X2lzVk5vZGU6IHRydWUsXHJcbiAgICAgICAgW1wiX192X3NraXBcIiAvKiBTS0lQICovXTogdHJ1ZSxcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIHByb3BzLFxyXG4gICAgICAgIGtleTogcHJvcHMgJiYgbm9ybWFsaXplS2V5KHByb3BzKSxcclxuICAgICAgICByZWY6IHByb3BzICYmIG5vcm1hbGl6ZVJlZihwcm9wcyksXHJcbiAgICAgICAgc2NvcGVJZDogY3VycmVudFNjb3BlSWQsXHJcbiAgICAgICAgY2hpbGRyZW46IG51bGwsXHJcbiAgICAgICAgY29tcG9uZW50OiBudWxsLFxyXG4gICAgICAgIHN1c3BlbnNlOiBudWxsLFxyXG4gICAgICAgIHNzQ29udGVudDogbnVsbCxcclxuICAgICAgICBzc0ZhbGxiYWNrOiBudWxsLFxyXG4gICAgICAgIGRpcnM6IG51bGwsXHJcbiAgICAgICAgdHJhbnNpdGlvbjogbnVsbCxcclxuICAgICAgICBlbDogbnVsbCxcclxuICAgICAgICBhbmNob3I6IG51bGwsXHJcbiAgICAgICAgdGFyZ2V0OiBudWxsLFxyXG4gICAgICAgIHRhcmdldEFuY2hvcjogbnVsbCxcclxuICAgICAgICBzdGF0aWNDb3VudDogMCxcclxuICAgICAgICBzaGFwZUZsYWcsXHJcbiAgICAgICAgcGF0Y2hGbGFnLFxyXG4gICAgICAgIGR5bmFtaWNQcm9wcyxcclxuICAgICAgICBkeW5hbWljQ2hpbGRyZW46IG51bGwsXHJcbiAgICAgICAgYXBwQ29udGV4dDogbnVsbFxyXG4gICAgfTtcclxuICAgIC8vIHZhbGlkYXRlIGtleVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB2bm9kZS5rZXkgIT09IHZub2RlLmtleSkge1xyXG4gICAgICAgIHdhcm4oYFZOb2RlIGNyZWF0ZWQgd2l0aCBpbnZhbGlkIGtleSAoTmFOKS4gVk5vZGUgdHlwZTpgLCB2bm9kZS50eXBlKTtcclxuICAgIH1cclxuICAgIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbik7XHJcbiAgICAvLyBub3JtYWxpemUgc3VzcGVuc2UgY2hpbGRyZW5cclxuICAgIGlmICggc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250ZW50LCBmYWxsYmFjayB9ID0gbm9ybWFsaXplU3VzcGVuc2VDaGlsZHJlbih2bm9kZSk7XHJcbiAgICAgICAgdm5vZGUuc3NDb250ZW50ID0gY29udGVudDtcclxuICAgICAgICB2bm9kZS5zc0ZhbGxiYWNrID0gZmFsbGJhY2s7XHJcbiAgICB9XHJcbiAgICBpZiAoc2hvdWxkVHJhY2sgPiAwICYmXHJcbiAgICAgICAgLy8gYXZvaWQgYSBibG9jayBub2RlIGZyb20gdHJhY2tpbmcgaXRzZWxmXHJcbiAgICAgICAgIWlzQmxvY2tOb2RlICYmXHJcbiAgICAgICAgLy8gaGFzIGN1cnJlbnQgcGFyZW50IGJsb2NrXHJcbiAgICAgICAgY3VycmVudEJsb2NrICYmXHJcbiAgICAgICAgLy8gcHJlc2VuY2Ugb2YgYSBwYXRjaCBmbGFnIGluZGljYXRlcyB0aGlzIG5vZGUgbmVlZHMgcGF0Y2hpbmcgb24gdXBkYXRlcy5cclxuICAgICAgICAvLyBjb21wb25lbnQgbm9kZXMgYWxzbyBzaG91bGQgYWx3YXlzIGJlIHBhdGNoZWQsIGJlY2F1c2UgZXZlbiBpZiB0aGVcclxuICAgICAgICAvLyBjb21wb25lbnQgZG9lc24ndCBuZWVkIHRvIHVwZGF0ZSwgaXQgbmVlZHMgdG8gcGVyc2lzdCB0aGUgaW5zdGFuY2Ugb24gdG9cclxuICAgICAgICAvLyB0aGUgbmV4dCB2bm9kZSBzbyB0aGF0IGl0IGNhbiBiZSBwcm9wZXJseSB1bm1vdW50ZWQgbGF0ZXIuXHJcbiAgICAgICAgKHBhdGNoRmxhZyA+IDAgfHwgc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pICYmXHJcbiAgICAgICAgLy8gdGhlIEVWRU5UUyBmbGFnIGlzIG9ubHkgZm9yIGh5ZHJhdGlvbiBhbmQgaWYgaXQgaXMgdGhlIG9ubHkgZmxhZywgdGhlXHJcbiAgICAgICAgLy8gdm5vZGUgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGR5bmFtaWMgZHVlIHRvIGhhbmRsZXIgY2FjaGluZy5cclxuICAgICAgICBwYXRjaEZsYWcgIT09IDMyIC8qIEhZRFJBVEVfRVZFTlRTICovKSB7XHJcbiAgICAgICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZub2RlO1xyXG59XHJcbmZ1bmN0aW9uIGNsb25lVk5vZGUodm5vZGUsIGV4dHJhUHJvcHMsIG1lcmdlUmVmID0gZmFsc2UpIHtcclxuICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBOT1QgdXNpbmcgc3ByZWFkIG9yIGV4dGVuZCB0byBhdm9pZCB0aGUgcnVudGltZVxyXG4gICAgLy8ga2V5IGVudW1lcmF0aW9uIGNvc3QuXHJcbiAgICBjb25zdCB7IHByb3BzLCByZWYsIHBhdGNoRmxhZyB9ID0gdm5vZGU7XHJcbiAgICBjb25zdCBtZXJnZWRQcm9wcyA9IGV4dHJhUHJvcHMgPyBtZXJnZVByb3BzKHByb3BzIHx8IHt9LCBleHRyYVByb3BzKSA6IHByb3BzO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBfX3ZfaXNWTm9kZTogdHJ1ZSxcclxuICAgICAgICBbXCJfX3Zfc2tpcFwiIC8qIFNLSVAgKi9dOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6IHZub2RlLnR5cGUsXHJcbiAgICAgICAgcHJvcHM6IG1lcmdlZFByb3BzLFxyXG4gICAgICAgIGtleTogbWVyZ2VkUHJvcHMgJiYgbm9ybWFsaXplS2V5KG1lcmdlZFByb3BzKSxcclxuICAgICAgICByZWY6IGV4dHJhUHJvcHMgJiYgZXh0cmFQcm9wcy5yZWZcclxuICAgICAgICAgICAgPyAvLyAjMjA3OCBpbiB0aGUgY2FzZSBvZiA8Y29tcG9uZW50IDppcz1cInZub2RlXCIgcmVmPVwiZXh0cmFcIi8+XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgdm5vZGUgaXRzZWxmIGFscmVhZHkgaGFzIGEgcmVmLCBjbG9uZVZOb2RlIHdpbGwgbmVlZCB0byBtZXJnZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIHJlZnMgc28gdGhlIHNpbmdsZSB2bm9kZSBjYW4gYmUgc2V0IG9uIG11bHRpcGxlIHJlZnNcclxuICAgICAgICAgICAgICAgIG1lcmdlUmVmICYmIHJlZlxyXG4gICAgICAgICAgICAgICAgICAgID8gaXNBcnJheShyZWYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVmLmNvbmNhdChub3JtYWxpemVSZWYoZXh0cmFQcm9wcykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogW3JlZiwgbm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpXVxyXG4gICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpXHJcbiAgICAgICAgICAgIDogcmVmLFxyXG4gICAgICAgIHNjb3BlSWQ6IHZub2RlLnNjb3BlSWQsXHJcbiAgICAgICAgY2hpbGRyZW46IHZub2RlLmNoaWxkcmVuLFxyXG4gICAgICAgIHRhcmdldDogdm5vZGUudGFyZ2V0LFxyXG4gICAgICAgIHRhcmdldEFuY2hvcjogdm5vZGUudGFyZ2V0QW5jaG9yLFxyXG4gICAgICAgIHN0YXRpY0NvdW50OiB2bm9kZS5zdGF0aWNDb3VudCxcclxuICAgICAgICBzaGFwZUZsYWc6IHZub2RlLnNoYXBlRmxhZyxcclxuICAgICAgICAvLyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIHdpdGggZXh0cmEgcHJvcHMsIHdlIGNhbiBubyBsb25nZXIgYXNzdW1lIGl0c1xyXG4gICAgICAgIC8vIGV4aXN0aW5nIHBhdGNoIGZsYWcgdG8gYmUgcmVsaWFibGUgYW5kIG5lZWQgdG8gYWRkIHRoZSBGVUxMX1BST1BTIGZsYWcuXHJcbiAgICAgICAgLy8gbm90ZTogcGVyc2VydmUgZmxhZyBmb3IgZnJhZ21lbnRzIHNpbmNlIHRoZXkgdXNlIHRoZSBmbGFnIGZvciBjaGlsZHJlblxyXG4gICAgICAgIC8vIGZhc3QgcGF0aHMgb25seS5cclxuICAgICAgICBwYXRjaEZsYWc6IGV4dHJhUHJvcHMgJiYgdm5vZGUudHlwZSAhPT0gRnJhZ21lbnRcclxuICAgICAgICAgICAgPyBwYXRjaEZsYWcgPT09IC0xIC8vIGhvaXN0ZWQgbm9kZVxyXG4gICAgICAgICAgICAgICAgPyAxNiAvKiBGVUxMX1BST1BTICovXHJcbiAgICAgICAgICAgICAgICA6IHBhdGNoRmxhZyB8IDE2IC8qIEZVTExfUFJPUFMgKi9cclxuICAgICAgICAgICAgOiBwYXRjaEZsYWcsXHJcbiAgICAgICAgZHluYW1pY1Byb3BzOiB2bm9kZS5keW5hbWljUHJvcHMsXHJcbiAgICAgICAgZHluYW1pY0NoaWxkcmVuOiB2bm9kZS5keW5hbWljQ2hpbGRyZW4sXHJcbiAgICAgICAgYXBwQ29udGV4dDogdm5vZGUuYXBwQ29udGV4dCxcclxuICAgICAgICBkaXJzOiB2bm9kZS5kaXJzLFxyXG4gICAgICAgIHRyYW5zaXRpb246IHZub2RlLnRyYW5zaXRpb24sXHJcbiAgICAgICAgLy8gVGhlc2Ugc2hvdWxkIHRlY2huaWNhbGx5IG9ubHkgYmUgbm9uLW51bGwgb24gbW91bnRlZCBWTm9kZXMuIEhvd2V2ZXIsXHJcbiAgICAgICAgLy8gdGhleSAqc2hvdWxkKiBiZSBjb3BpZWQgZm9yIGtlcHQtYWxpdmUgdm5vZGVzLiBTbyB3ZSBqdXN0IGFsd2F5cyBjb3B5XHJcbiAgICAgICAgLy8gdGhlbSBzaW5jZSB0aGVtIGJlaW5nIG5vbi1udWxsIGR1cmluZyBhIG1vdW50IGRvZXNuJ3QgYWZmZWN0IHRoZSBsb2dpYyBhc1xyXG4gICAgICAgIC8vIHRoZXkgd2lsbCBzaW1wbHkgYmUgb3ZlcndyaXR0ZW4uXHJcbiAgICAgICAgY29tcG9uZW50OiB2bm9kZS5jb21wb25lbnQsXHJcbiAgICAgICAgc3VzcGVuc2U6IHZub2RlLnN1c3BlbnNlLFxyXG4gICAgICAgIHNzQ29udGVudDogdm5vZGUuc3NDb250ZW50ICYmIGNsb25lVk5vZGUodm5vZGUuc3NDb250ZW50KSxcclxuICAgICAgICBzc0ZhbGxiYWNrOiB2bm9kZS5zc0ZhbGxiYWNrICYmIGNsb25lVk5vZGUodm5vZGUuc3NGYWxsYmFjayksXHJcbiAgICAgICAgZWw6IHZub2RlLmVsLFxyXG4gICAgICAgIGFuY2hvcjogdm5vZGUuYW5jaG9yXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlKHRleHQgPSAnICcsIGZsYWcgPSAwKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlVk5vZGUoVGV4dCwgbnVsbCwgdGV4dCwgZmxhZyk7XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNWTm9kZShjb250ZW50LCBudW1iZXJPZk5vZGVzKSB7XHJcbiAgICAvLyBBIHN0YXRpYyB2bm9kZSBjYW4gY29udGFpbiBtdWx0aXBsZSBzdHJpbmdpZmllZCBlbGVtZW50cywgYW5kIHRoZSBudW1iZXJcclxuICAgIC8vIG9mIGVsZW1lbnRzIGlzIG5lY2Vzc2FyeSBmb3IgaHlkcmF0aW9uLlxyXG4gICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShTdGF0aWMsIG51bGwsIGNvbnRlbnQpO1xyXG4gICAgdm5vZGUuc3RhdGljQ291bnQgPSBudW1iZXJPZk5vZGVzO1xyXG4gICAgcmV0dXJuIHZub2RlO1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudFZOb2RlKHRleHQgPSAnJywgXHJcbi8vIHdoZW4gdXNlZCBhcyB0aGUgdi1lbHNlIGJyYW5jaCwgdGhlIGNvbW1lbnQgbm9kZSBtdXN0IGJlIGNyZWF0ZWQgYXMgYVxyXG4vLyBibG9jayB0byBlbnN1cmUgY29ycmVjdCB1cGRhdGVzLlxyXG5hc0Jsb2NrID0gZmFsc2UpIHtcclxuICAgIHJldHVybiBhc0Jsb2NrXHJcbiAgICAgICAgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKENvbW1lbnQsIG51bGwsIHRleHQpKVxyXG4gICAgICAgIDogY3JlYXRlVk5vZGUoQ29tbWVudCwgbnVsbCwgdGV4dCk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplVk5vZGUoY2hpbGQpIHtcclxuICAgIGlmIChjaGlsZCA9PSBudWxsIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgLy8gZW1wdHkgcGxhY2Vob2xkZXJcclxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoQ29tbWVudCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KGNoaWxkKSkge1xyXG4gICAgICAgIC8vIGZyYWdtZW50XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKEZyYWdtZW50LCBudWxsLCBjaGlsZCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgY2hpbGQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgLy8gYWxyZWFkeSB2bm9kZSwgdGhpcyBzaG91bGQgYmUgdGhlIG1vc3QgY29tbW9uIHNpbmNlIGNvbXBpbGVkIHRlbXBsYXRlc1xyXG4gICAgICAgIC8vIGFsd2F5cyBwcm9kdWNlIGFsbC12bm9kZSBjaGlsZHJlbiBhcnJheXNcclxuICAgICAgICByZXR1cm4gY2hpbGQuZWwgPT09IG51bGwgPyBjaGlsZCA6IGNsb25lVk5vZGUoY2hpbGQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gc3RyaW5ncyBhbmQgbnVtYmVyc1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShUZXh0LCBudWxsLCBTdHJpbmcoY2hpbGQpKTtcclxuICAgIH1cclxufVxyXG4vLyBvcHRpbWl6ZWQgbm9ybWFsaXphdGlvbiBmb3IgdGVtcGxhdGUtY29tcGlsZWQgcmVuZGVyIGZuc1xyXG5mdW5jdGlvbiBjbG9uZUlmTW91bnRlZChjaGlsZCkge1xyXG4gICAgcmV0dXJuIGNoaWxkLmVsID09PSBudWxsID8gY2hpbGQgOiBjbG9uZVZOb2RlKGNoaWxkKTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4pIHtcclxuICAgIGxldCB0eXBlID0gMDtcclxuICAgIGNvbnN0IHsgc2hhcGVGbGFnIH0gPSB2bm9kZTtcclxuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XHJcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNBcnJheShjaGlsZHJlbikpIHtcclxuICAgICAgICB0eXBlID0gMTYgLyogQVJSQVlfQ0hJTERSRU4gKi87XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyB8fCBzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICAvLyBOb3JtYWxpemUgc2xvdCB0byBwbGFpbiBjaGlsZHJlbiBmb3IgcGxhaW4gZWxlbWVudCBhbmQgVGVsZXBvcnRcclxuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IGNoaWxkcmVuLmRlZmF1bHQ7XHJcbiAgICAgICAgICAgIGlmIChzbG90KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBfYyBtYXJrZXIgaXMgYWRkZWQgYnkgd2l0aEN0eCgpIGluZGljYXRpbmcgdGhpcyBpcyBhIGNvbXBpbGVkIHNsb3RcclxuICAgICAgICAgICAgICAgIHNsb3QuX2MgJiYgc2V0Q29tcGlsZWRTbG90UmVuZGVyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIHNsb3QoKSk7XHJcbiAgICAgICAgICAgICAgICBzbG90Ll9jICYmIHNldENvbXBpbGVkU2xvdFJlbmRlcmluZygtMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdHlwZSA9IDMyIC8qIFNMT1RTX0NISUxEUkVOICovO1xyXG4gICAgICAgICAgICBjb25zdCBzbG90RmxhZyA9IGNoaWxkcmVuLl87XHJcbiAgICAgICAgICAgIGlmICghc2xvdEZsYWcgJiYgIShJbnRlcm5hbE9iamVjdEtleSBpbiBjaGlsZHJlbikpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLl9jdHggPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2xvdEZsYWcgPT09IDMgLyogRk9SV0FSREVEICovICYmIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gYSBjaGlsZCBjb21wb25lbnQgcmVjZWl2ZXMgZm9yd2FyZGVkIHNsb3RzIGZyb20gdGhlIHBhcmVudC5cclxuICAgICAgICAgICAgICAgIC8vIGl0cyBzbG90IHR5cGUgaXMgZGV0ZXJtaW5lZCBieSBpdHMgcGFyZW50J3Mgc2xvdCB0eXBlLlxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS52bm9kZS5wYXRjaEZsYWcgJiAxMDI0IC8qIERZTkFNSUNfU0xPVFMgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5fID0gMiAvKiBEWU5BTUlDICovO1xyXG4gICAgICAgICAgICAgICAgICAgIHZub2RlLnBhdGNoRmxhZyB8PSAxMDI0IC8qIERZTkFNSUNfU0xPVFMgKi87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5fID0gMSAvKiBTVEFCTEUgKi87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKGNoaWxkcmVuKSkge1xyXG4gICAgICAgIGNoaWxkcmVuID0geyBkZWZhdWx0OiBjaGlsZHJlbiwgX2N0eDogY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIH07XHJcbiAgICAgICAgdHlwZSA9IDMyIC8qIFNMT1RTX0NISUxEUkVOICovO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY2hpbGRyZW4gPSBTdHJpbmcoY2hpbGRyZW4pO1xyXG4gICAgICAgIC8vIGZvcmNlIHRlbGVwb3J0IGNoaWxkcmVuIHRvIGFycmF5IHNvIGl0IGNhbiBiZSBtb3ZlZCBhcm91bmRcclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8pIHtcclxuICAgICAgICAgICAgdHlwZSA9IDE2IC8qIEFSUkFZX0NISUxEUkVOICovO1xyXG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSA4IC8qIFRFWFRfQ0hJTERSRU4gKi87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdm5vZGUuY2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuICAgIHZub2RlLnNoYXBlRmxhZyB8PSB0eXBlO1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlUHJvcHMoLi4uYXJncykge1xyXG4gICAgY29uc3QgcmV0ID0gZXh0ZW5kKHt9LCBhcmdzWzBdKTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHRvTWVyZ2UgPSBhcmdzW2ldO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRvTWVyZ2UpIHtcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJldC5jbGFzcyAhPT0gdG9NZXJnZS5jbGFzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldC5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKFtyZXQuY2xhc3MsIHRvTWVyZ2UuY2xhc3NdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcclxuICAgICAgICAgICAgICAgIHJldC5zdHlsZSA9IG5vcm1hbGl6ZVN0eWxlKFtyZXQuc3R5bGUsIHRvTWVyZ2Uuc3R5bGVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc09uKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gcmV0W2tleV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmNvbWluZyA9IHRvTWVyZ2Vba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZyAhPT0gaW5jb21pbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXRba2V5XSA9IGV4aXN0aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCB0b01lcmdlW2tleV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaW5jb21pbmc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0W2tleV0gPSB0b01lcmdlW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XG5cbmZ1bmN0aW9uIHByb3ZpZGUoa2V5LCB2YWx1ZSkge1xyXG4gICAgaWYgKCFjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYHByb3ZpZGUoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGxldCBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcztcclxuICAgICAgICAvLyBieSBkZWZhdWx0IGFuIGluc3RhbmNlIGluaGVyaXRzIGl0cyBwYXJlbnQncyBwcm92aWRlcyBvYmplY3RcclxuICAgICAgICAvLyBidXQgd2hlbiBpdCBuZWVkcyB0byBwcm92aWRlIHZhbHVlcyBvZiBpdHMgb3duLCBpdCBjcmVhdGVzIGl0c1xyXG4gICAgICAgIC8vIG93biBwcm92aWRlcyBvYmplY3QgdXNpbmcgcGFyZW50IHByb3ZpZGVzIG9iamVjdCBhcyBwcm90b3R5cGUuXHJcbiAgICAgICAgLy8gdGhpcyB3YXkgaW4gYGluamVjdGAgd2UgY2FuIHNpbXBseSBsb29rIHVwIGluamVjdGlvbnMgZnJvbSBkaXJlY3RcclxuICAgICAgICAvLyBwYXJlbnQgYW5kIGxldCB0aGUgcHJvdG90eXBlIGNoYWluIGRvIHRoZSB3b3JrLlxyXG4gICAgICAgIGNvbnN0IHBhcmVudFByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLnBhcmVudCAmJiBjdXJyZW50SW5zdGFuY2UucGFyZW50LnByb3ZpZGVzO1xyXG4gICAgICAgIGlmIChwYXJlbnRQcm92aWRlcyA9PT0gcHJvdmlkZXMpIHtcclxuICAgICAgICAgICAgcHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucHJvdmlkZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFByb3ZpZGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVFMgZG9lc24ndCBhbGxvdyBzeW1ib2wgYXMgaW5kZXggdHlwZVxyXG4gICAgICAgIHByb3ZpZGVzW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpbmplY3Qoa2V5LCBkZWZhdWx0VmFsdWUsIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSA9IGZhbHNlKSB7XHJcbiAgICAvLyBmYWxsYmFjayB0byBgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlYCBzbyB0aGF0IHRoaXMgY2FuIGJlIGNhbGxlZCBpblxyXG4gICAgLy8gYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xyXG4gICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgLy8gIzI0MDBcclxuICAgICAgICAvLyB0byBzdXBwb3J0IGBhcHAudXNlYCBwbHVnaW5zLFxyXG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIGFwcENvbnRleHQncyBgcHJvdmlkZXNgIGlmIHRoZSBpbnRhbmNlIGlzIGF0IHJvb3RcclxuICAgICAgICBjb25zdCBwcm92aWRlcyA9IGluc3RhbmNlLnBhcmVudCA9PSBudWxsXHJcbiAgICAgICAgICAgID8gaW5zdGFuY2Uudm5vZGUuYXBwQ29udGV4dCAmJiBpbnN0YW5jZS52bm9kZS5hcHBDb250ZXh0LnByb3ZpZGVzXHJcbiAgICAgICAgICAgIDogaW5zdGFuY2UucGFyZW50LnByb3ZpZGVzO1xyXG4gICAgICAgIGlmIChwcm92aWRlcyAmJiBrZXkgaW4gcHJvdmlkZXMpIHtcclxuICAgICAgICAgICAgLy8gVFMgZG9lc24ndCBhbGxvdyBzeW1ib2wgYXMgaW5kZXggdHlwZVxyXG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSAmJiBpc0Z1bmN0aW9uKGRlZmF1bHRWYWx1ZSlcclxuICAgICAgICAgICAgICAgID8gZGVmYXVsdFZhbHVlKClcclxuICAgICAgICAgICAgICAgIDogZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgd2FybihgaW5qZWN0aW9uIFwiJHtTdHJpbmcoa2V5KX1cIiBub3QgZm91bmQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgaW5qZWN0KCkgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgc2V0dXAoKSBvciBmdW5jdGlvbmFsIGNvbXBvbmVudHMuYCk7XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlRHVwbGljYXRlQ2hlY2tlcigpIHtcclxuICAgIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHJldHVybiAodHlwZSwga2V5KSA9PiB7XHJcbiAgICAgICAgaWYgKGNhY2hlW2tleV0pIHtcclxuICAgICAgICAgICAgd2FybihgJHt0eXBlfSBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiAke2NhY2hlW2tleV19LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2FjaGVba2V5XSA9IHR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5sZXQgaXNJbkJlZm9yZUNyZWF0ZSA9IGZhbHNlO1xyXG5mdW5jdGlvbiBhcHBseU9wdGlvbnMoaW5zdGFuY2UsIG9wdGlvbnMsIGRlZmVycmVkRGF0YSA9IFtdLCBkZWZlcnJlZFdhdGNoID0gW10sIGRlZmVycmVkUHJvdmlkZSA9IFtdLCBhc01peGluID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IHsgXHJcbiAgICAvLyBjb21wb3NpdGlvblxyXG4gICAgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucywgXHJcbiAgICAvLyBzdGF0ZVxyXG4gICAgZGF0YTogZGF0YU9wdGlvbnMsIGNvbXB1dGVkOiBjb21wdXRlZE9wdGlvbnMsIG1ldGhvZHMsIHdhdGNoOiB3YXRjaE9wdGlvbnMsIHByb3ZpZGU6IHByb3ZpZGVPcHRpb25zLCBpbmplY3Q6IGluamVjdE9wdGlvbnMsIFxyXG4gICAgLy8gYXNzZXRzXHJcbiAgICBjb21wb25lbnRzLCBkaXJlY3RpdmVzLCBcclxuICAgIC8vIGxpZmVjeWNsZVxyXG4gICAgYmVmb3JlTW91bnQsIG1vdW50ZWQsIGJlZm9yZVVwZGF0ZSwgdXBkYXRlZCwgYWN0aXZhdGVkLCBkZWFjdGl2YXRlZCwgYmVmb3JlRGVzdHJveSwgYmVmb3JlVW5tb3VudCwgZGVzdHJveWVkLCB1bm1vdW50ZWQsIHJlbmRlciwgcmVuZGVyVHJhY2tlZCwgcmVuZGVyVHJpZ2dlcmVkLCBlcnJvckNhcHR1cmVkIH0gPSBvcHRpb25zO1xyXG4gICAgY29uc3QgcHVibGljVGhpcyA9IGluc3RhbmNlLnByb3h5O1xyXG4gICAgY29uc3QgY3R4ID0gaW5zdGFuY2UuY3R4O1xyXG4gICAgY29uc3QgZ2xvYmFsTWl4aW5zID0gaW5zdGFuY2UuYXBwQ29udGV4dC5taXhpbnM7XHJcbiAgICBpZiAoYXNNaXhpbiAmJiByZW5kZXIgJiYgaW5zdGFuY2UucmVuZGVyID09PSBOT09QKSB7XHJcbiAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gcmVuZGVyO1xyXG4gICAgfVxyXG4gICAgLy8gYXBwbHlPcHRpb25zIGlzIGNhbGxlZCBub24tYXMtbWl4aW4gb25jZSBwZXIgaW5zdGFuY2VcclxuICAgIGlmICghYXNNaXhpbikge1xyXG4gICAgICAgIGlzSW5CZWZvcmVDcmVhdGUgPSB0cnVlO1xyXG4gICAgICAgIGNhbGxTeW5jSG9vaygnYmVmb3JlQ3JlYXRlJywgXCJiY1wiIC8qIEJFRk9SRV9DUkVBVEUgKi8sIG9wdGlvbnMsIGluc3RhbmNlLCBnbG9iYWxNaXhpbnMpO1xyXG4gICAgICAgIGlzSW5CZWZvcmVDcmVhdGUgPSBmYWxzZTtcclxuICAgICAgICAvLyBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGZpcnN0XHJcbiAgICAgICAgYXBwbHlNaXhpbnMoaW5zdGFuY2UsIGdsb2JhbE1peGlucywgZGVmZXJyZWREYXRhLCBkZWZlcnJlZFdhdGNoLCBkZWZlcnJlZFByb3ZpZGUpO1xyXG4gICAgfVxyXG4gICAgLy8gZXh0ZW5kaW5nIGEgYmFzZSBjb21wb25lbnQuLi5cclxuICAgIGlmIChleHRlbmRzT3B0aW9ucykge1xyXG4gICAgICAgIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSwgZXh0ZW5kc09wdGlvbnMsIGRlZmVycmVkRGF0YSwgZGVmZXJyZWRXYXRjaCwgZGVmZXJyZWRQcm92aWRlLCB0cnVlKTtcclxuICAgIH1cclxuICAgIC8vIGxvY2FsIG1peGluc1xyXG4gICAgaWYgKG1peGlucykge1xyXG4gICAgICAgIGFwcGx5TWl4aW5zKGluc3RhbmNlLCBtaXhpbnMsIGRlZmVycmVkRGF0YSwgZGVmZXJyZWRXYXRjaCwgZGVmZXJyZWRQcm92aWRlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSA6IG51bGw7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY29uc3QgW3Byb3BzT3B0aW9uc10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XHJcbiAgICAgICAgaWYgKHByb3BzT3B0aW9ucykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wc09wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIlByb3BzXCIgLyogUFJPUFMgKi8sIGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBvcHRpb25zIGluaXRpYWxpemF0aW9uIG9yZGVyICh0byBiZSBjb25zaXN0ZW50IHdpdGggVnVlIDIpOlxyXG4gICAgLy8gLSBwcm9wcyAoYWxyZWFkeSBkb25lIG91dHNpZGUgb2YgdGhpcyBmdW5jdGlvbilcclxuICAgIC8vIC0gaW5qZWN0XHJcbiAgICAvLyAtIG1ldGhvZHNcclxuICAgIC8vIC0gZGF0YSAoZGVmZXJyZWQgc2luY2UgaXQgcmVsaWVzIG9uIGB0aGlzYCBhY2Nlc3MpXHJcbiAgICAvLyAtIGNvbXB1dGVkXHJcbiAgICAvLyAtIHdhdGNoIChkZWZlcnJlZCBzaW5jZSBpdCByZWxpZXMgb24gYHRoaXNgIGFjY2VzcylcclxuICAgIGlmIChpbmplY3RPcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkoaW5qZWN0T3B0aW9ucykpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmplY3RPcHRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBpbmplY3RPcHRpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgY3R4W2tleV0gPSBpbmplY3Qoa2V5KTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJJbmplY3RcIiAvKiBJTkpFQ1QgKi8sIGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGluamVjdE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdCA9IGluamVjdE9wdGlvbnNba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChvcHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4W2tleV0gPSBpbmplY3Qob3B0LmZyb20gfHwga2V5LCBvcHQuZGVmYXVsdCwgdHJ1ZSAvKiB0cmVhdCBkZWZhdWx0IGZ1bmN0aW9uIGFzIGZhY3RvcnkgKi8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4W2tleV0gPSBpbmplY3Qob3B0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJJbmplY3RcIiAvKiBJTkpFQ1QgKi8sIGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAobWV0aG9kcykge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG1ldGhvZHMpIHtcclxuICAgICAgICAgICAgY29uc3QgbWV0aG9kSGFuZGxlciA9IG1ldGhvZHNba2V5XTtcclxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obWV0aG9kSGFuZGxlcikpIHtcclxuICAgICAgICAgICAgICAgIGN0eFtrZXldID0gbWV0aG9kSGFuZGxlci5iaW5kKHB1YmxpY1RoaXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIk1ldGhvZHNcIiAvKiBNRVRIT0RTICovLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgTWV0aG9kIFwiJHtrZXl9XCIgaGFzIHR5cGUgXCIke3R5cGVvZiBtZXRob2RIYW5kbGVyfVwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYERpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWFzTWl4aW4pIHtcclxuICAgICAgICBpZiAoZGVmZXJyZWREYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBkZWZlcnJlZERhdGEuZm9yRWFjaChkYXRhRm4gPT4gcmVzb2x2ZURhdGEoaW5zdGFuY2UsIGRhdGFGbiwgcHVibGljVGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGF0YU9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZURhdGEoaW5zdGFuY2UsIGRhdGFPcHRpb25zLCBwdWJsaWNUaGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zdCByYXdEYXRhID0gdG9SYXcoaW5zdGFuY2UuZGF0YSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkRhdGFcIiAvKiBEQVRBICovLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgLy8gZXhwb3NlIGRhdGEgb24gY3R4IGR1cmluZyBkZXZcclxuICAgICAgICAgICAgICAgIGlmIChrZXlbMF0gIT09ICckJyAmJiBrZXlbMF0gIT09ICdfJykge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldDogKCkgPT4gcmF3RGF0YVtrZXldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IE5PT1BcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGRhdGFPcHRpb25zKSB7XHJcbiAgICAgICAgZGVmZXJyZWREYXRhLnB1c2goZGF0YU9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvbXB1dGVkT3B0aW9ucykge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGNvbXB1dGVkT3B0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zdCBvcHQgPSBjb21wdXRlZE9wdGlvbnNba2V5XTtcclxuICAgICAgICAgICAgY29uc3QgZ2V0ID0gaXNGdW5jdGlvbihvcHQpXHJcbiAgICAgICAgICAgICAgICA/IG9wdC5iaW5kKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpXHJcbiAgICAgICAgICAgICAgICA6IGlzRnVuY3Rpb24ob3B0LmdldClcclxuICAgICAgICAgICAgICAgICAgICA/IG9wdC5nZXQuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKVxyXG4gICAgICAgICAgICAgICAgICAgIDogTk9PUDtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBnZXQgPT09IE5PT1ApIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYENvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaGFzIG5vIGdldHRlci5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBzZXQgPSAhaXNGdW5jdGlvbihvcHQpICYmIGlzRnVuY3Rpb24ob3B0LnNldClcclxuICAgICAgICAgICAgICAgID8gb3B0LnNldC5iaW5kKHB1YmxpY1RoaXMpXHJcbiAgICAgICAgICAgICAgICA6IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgICAgICAgICAgICAgID8gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBXcml0ZSBvcGVyYXRpb24gZmFpbGVkOiBjb21wdXRlZCBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIHJlYWRvbmx5LmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA6IE5PT1A7XHJcbiAgICAgICAgICAgIGNvbnN0IGMgPSBjb21wdXRlZCh7XHJcbiAgICAgICAgICAgICAgICBnZXQsXHJcbiAgICAgICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gYy52YWx1ZSxcclxuICAgICAgICAgICAgICAgIHNldDogdiA9PiAoYy52YWx1ZSA9IHYpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJDb21wdXRlZFwiIC8qIENPTVBVVEVEICovLCBrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHdhdGNoT3B0aW9ucykge1xyXG4gICAgICAgIGRlZmVycmVkV2F0Y2gucHVzaCh3YXRjaE9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFhc01peGluICYmIGRlZmVycmVkV2F0Y2gubGVuZ3RoKSB7XHJcbiAgICAgICAgZGVmZXJyZWRXYXRjaC5mb3JFYWNoKHdhdGNoT3B0aW9ucyA9PiB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHdhdGNoT3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgY3JlYXRlV2F0Y2hlcih3YXRjaE9wdGlvbnNba2V5XSwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAocHJvdmlkZU9wdGlvbnMpIHtcclxuICAgICAgICBkZWZlcnJlZFByb3ZpZGUucHVzaChwcm92aWRlT3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFzTWl4aW4gJiYgZGVmZXJyZWRQcm92aWRlLmxlbmd0aCkge1xyXG4gICAgICAgIGRlZmVycmVkUHJvdmlkZS5mb3JFYWNoKHByb3ZpZGVPcHRpb25zID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXMgPSBpc0Z1bmN0aW9uKHByb3ZpZGVPcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgPyBwcm92aWRlT3B0aW9ucy5jYWxsKHB1YmxpY1RoaXMpXHJcbiAgICAgICAgICAgICAgICA6IHByb3ZpZGVPcHRpb25zO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm92aWRlcykge1xyXG4gICAgICAgICAgICAgICAgcHJvdmlkZShrZXksIHByb3ZpZGVzW2tleV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBhc3NldCBvcHRpb25zLlxyXG4gICAgLy8gVG8gcmVkdWNlIG1lbW9yeSB1c2FnZSwgb25seSBjb21wb25lbnRzIHdpdGggbWl4aW5zIG9yIGV4dGVuZHMgd2lsbCBoYXZlXHJcbiAgICAvLyByZXNvbHZlZCBhc3NldCByZWdpc3RyeSBhdHRhY2hlZCB0byBpbnN0YW5jZS5cclxuICAgIGlmIChhc01peGluKSB7XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudHMpIHtcclxuICAgICAgICAgICAgZXh0ZW5kKGluc3RhbmNlLmNvbXBvbmVudHMgfHxcclxuICAgICAgICAgICAgICAgIChpbnN0YW5jZS5jb21wb25lbnRzID0gZXh0ZW5kKHt9LCBpbnN0YW5jZS50eXBlLmNvbXBvbmVudHMpKSwgY29tcG9uZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaXJlY3RpdmVzKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZChpbnN0YW5jZS5kaXJlY3RpdmVzIHx8XHJcbiAgICAgICAgICAgICAgICAoaW5zdGFuY2UuZGlyZWN0aXZlcyA9IGV4dGVuZCh7fSwgaW5zdGFuY2UudHlwZS5kaXJlY3RpdmVzKSksIGRpcmVjdGl2ZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGxpZmVjeWNsZSBvcHRpb25zXHJcbiAgICBpZiAoIWFzTWl4aW4pIHtcclxuICAgICAgICBjYWxsU3luY0hvb2soJ2NyZWF0ZWQnLCBcImNcIiAvKiBDUkVBVEVEICovLCBvcHRpb25zLCBpbnN0YW5jZSwgZ2xvYmFsTWl4aW5zKTtcclxuICAgIH1cclxuICAgIGlmIChiZWZvcmVNb3VudCkge1xyXG4gICAgICAgIG9uQmVmb3JlTW91bnQoYmVmb3JlTW91bnQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAobW91bnRlZCkge1xyXG4gICAgICAgIG9uTW91bnRlZChtb3VudGVkLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKGJlZm9yZVVwZGF0ZSkge1xyXG4gICAgICAgIG9uQmVmb3JlVXBkYXRlKGJlZm9yZVVwZGF0ZS5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmICh1cGRhdGVkKSB7XHJcbiAgICAgICAgb25VcGRhdGVkKHVwZGF0ZWQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoYWN0aXZhdGVkKSB7XHJcbiAgICAgICAgb25BY3RpdmF0ZWQoYWN0aXZhdGVkLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlYWN0aXZhdGVkKSB7XHJcbiAgICAgICAgb25EZWFjdGl2YXRlZChkZWFjdGl2YXRlZC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmIChlcnJvckNhcHR1cmVkKSB7XHJcbiAgICAgICAgb25FcnJvckNhcHR1cmVkKGVycm9yQ2FwdHVyZWQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVuZGVyVHJhY2tlZCkge1xyXG4gICAgICAgIG9uUmVuZGVyVHJhY2tlZChyZW5kZXJUcmFja2VkLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlbmRlclRyaWdnZXJlZCkge1xyXG4gICAgICAgIG9uUmVuZGVyVHJpZ2dlcmVkKHJlbmRlclRyaWdnZXJlZC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgYmVmb3JlRGVzdHJveSkge1xyXG4gICAgICAgIHdhcm4oYFxcYGJlZm9yZURlc3Ryb3lcXGAgaGFzIGJlZW4gcmVuYW1lZCB0byBcXGBiZWZvcmVVbm1vdW50XFxgLmApO1xyXG4gICAgfVxyXG4gICAgaWYgKGJlZm9yZVVubW91bnQpIHtcclxuICAgICAgICBvbkJlZm9yZVVubW91bnQoYmVmb3JlVW5tb3VudC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZGVzdHJveWVkKSB7XHJcbiAgICAgICAgd2FybihgXFxgZGVzdHJveWVkXFxgIGhhcyBiZWVuIHJlbmFtZWQgdG8gXFxgdW5tb3VudGVkXFxgLmApO1xyXG4gICAgfVxyXG4gICAgaWYgKHVubW91bnRlZCkge1xyXG4gICAgICAgIG9uVW5tb3VudGVkKHVubW91bnRlZC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjYWxsU3luY0hvb2sobmFtZSwgdHlwZSwgb3B0aW9ucywgaW5zdGFuY2UsIGdsb2JhbE1peGlucykge1xyXG4gICAgY2FsbEhvb2tGcm9tTWl4aW5zKG5hbWUsIHR5cGUsIGdsb2JhbE1peGlucywgaW5zdGFuY2UpO1xyXG4gICAgY29uc3QgeyBleHRlbmRzOiBiYXNlLCBtaXhpbnMgfSA9IG9wdGlvbnM7XHJcbiAgICBpZiAoYmFzZSkge1xyXG4gICAgICAgIGNhbGxIb29rRnJvbUV4dGVuZHMobmFtZSwgdHlwZSwgYmFzZSwgaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgaWYgKG1peGlucykge1xyXG4gICAgICAgIGNhbGxIb29rRnJvbU1peGlucyhuYW1lLCB0eXBlLCBtaXhpbnMsIGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHNlbGZIb29rID0gb3B0aW9uc1tuYW1lXTtcclxuICAgIGlmIChzZWxmSG9vaykge1xyXG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKHNlbGZIb29rLmJpbmQoaW5zdGFuY2UucHJveHkpLCBpbnN0YW5jZSwgdHlwZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY2FsbEhvb2tGcm9tRXh0ZW5kcyhuYW1lLCB0eXBlLCBiYXNlLCBpbnN0YW5jZSkge1xyXG4gICAgaWYgKGJhc2UuZXh0ZW5kcykge1xyXG4gICAgICAgIGNhbGxIb29rRnJvbUV4dGVuZHMobmFtZSwgdHlwZSwgYmFzZS5leHRlbmRzLCBpbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBiYXNlSG9vayA9IGJhc2VbbmFtZV07XHJcbiAgICBpZiAoYmFzZUhvb2spIHtcclxuICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhiYXNlSG9vay5iaW5kKGluc3RhbmNlLnByb3h5KSwgaW5zdGFuY2UsIHR5cGUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNhbGxIb29rRnJvbU1peGlucyhuYW1lLCB0eXBlLCBtaXhpbnMsIGluc3RhbmNlKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGNoYWluZWRNaXhpbnMgPSBtaXhpbnNbaV0ubWl4aW5zO1xyXG4gICAgICAgIGlmIChjaGFpbmVkTWl4aW5zKSB7XHJcbiAgICAgICAgICAgIGNhbGxIb29rRnJvbU1peGlucyhuYW1lLCB0eXBlLCBjaGFpbmVkTWl4aW5zLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZuID0gbWl4aW5zW2ldW25hbWVdO1xyXG4gICAgICAgIGlmIChmbikge1xyXG4gICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhmbi5iaW5kKGluc3RhbmNlLnByb3h5KSwgaW5zdGFuY2UsIHR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBhcHBseU1peGlucyhpbnN0YW5jZSwgbWl4aW5zLCBkZWZlcnJlZERhdGEsIGRlZmVycmVkV2F0Y2gsIGRlZmVycmVkUHJvdmlkZSkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtaXhpbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhcHBseU9wdGlvbnMoaW5zdGFuY2UsIG1peGluc1tpXSwgZGVmZXJyZWREYXRhLCBkZWZlcnJlZFdhdGNoLCBkZWZlcnJlZFByb3ZpZGUsIHRydWUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlc29sdmVEYXRhKGluc3RhbmNlLCBkYXRhRm4sIHB1YmxpY1RoaXMpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRnVuY3Rpb24oZGF0YUZuKSkge1xyXG4gICAgICAgIHdhcm4oYFRoZSBkYXRhIG9wdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb24uIGAgK1xyXG4gICAgICAgICAgICBgUGxhaW4gb2JqZWN0IHVzYWdlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuYCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkYXRhID0gZGF0YUZuLmNhbGwocHVibGljVGhpcywgcHVibGljVGhpcyk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzUHJvbWlzZShkYXRhKSkge1xyXG4gICAgICAgIHdhcm4oYGRhdGEoKSByZXR1cm5lZCBhIFByb21pc2UgLSBub3RlIGRhdGEoKSBjYW5ub3QgYmUgYXN5bmM7IElmIHlvdSBgICtcclxuICAgICAgICAgICAgYGludGVuZCB0byBwZXJmb3JtIGRhdGEgZmV0Y2hpbmcgYmVmb3JlIGNvbXBvbmVudCByZW5kZXJzLCB1c2UgYCArXHJcbiAgICAgICAgICAgIGBhc3luYyBzZXR1cCgpICsgPFN1c3BlbnNlPi5gKTtcclxuICAgIH1cclxuICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybihgZGF0YSgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LmApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaW5zdGFuY2UuZGF0YSA9PT0gRU1QVFlfT0JKKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuZGF0YSA9IHJlYWN0aXZlKGRhdGEpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gZXhpc3RpbmcgZGF0YTogdGhpcyBpcyBhIG1peGluIG9yIGV4dGVuZHMuXHJcbiAgICAgICAgZXh0ZW5kKGluc3RhbmNlLmRhdGEsIGRhdGEpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIocmF3LCBjdHgsIHB1YmxpY1RoaXMsIGtleSkge1xyXG4gICAgY29uc3QgZ2V0dGVyID0ga2V5LmluY2x1ZGVzKCcuJylcclxuICAgICAgICA/IGNyZWF0ZVBhdGhHZXR0ZXIocHVibGljVGhpcywga2V5KVxyXG4gICAgICAgIDogKCkgPT4gcHVibGljVGhpc1trZXldO1xyXG4gICAgaWYgKGlzU3RyaW5nKHJhdykpIHtcclxuICAgICAgICBjb25zdCBoYW5kbGVyID0gY3R4W3Jhd107XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcclxuICAgICAgICAgICAgd2F0Y2goZ2V0dGVyLCBoYW5kbGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggaGFuZGxlciBzcGVjaWZpZWQgYnkga2V5IFwiJHtyYXd9XCJgLCBoYW5kbGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHJhdykpIHtcclxuICAgICAgICB3YXRjaChnZXR0ZXIsIHJhdy5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHJhdykpIHtcclxuICAgICAgICBpZiAoaXNBcnJheShyYXcpKSB7XHJcbiAgICAgICAgICAgIHJhdy5mb3JFYWNoKHIgPT4gY3JlYXRlV2F0Y2hlcihyLCBjdHgsIHB1YmxpY1RoaXMsIGtleSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IGlzRnVuY3Rpb24ocmF3LmhhbmRsZXIpXHJcbiAgICAgICAgICAgICAgICA/IHJhdy5oYW5kbGVyLmJpbmQocHVibGljVGhpcylcclxuICAgICAgICAgICAgICAgIDogY3R4W3Jhdy5oYW5kbGVyXTtcclxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcclxuICAgICAgICAgICAgICAgIHdhdGNoKGdldHRlciwgaGFuZGxlciwgcmF3KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggaGFuZGxlciBzcGVjaWZpZWQgYnkga2V5IFwiJHtyYXcuaGFuZGxlcn1cImAsIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgSW52YWxpZCB3YXRjaCBvcHRpb246IFwiJHtrZXl9XCJgLCByYXcpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVBhdGhHZXR0ZXIoY3R4LCBwYXRoKSB7XHJcbiAgICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGN1ciA9IGN0eDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aCAmJiBjdXI7IGkrKykge1xyXG4gICAgICAgICAgICBjdXIgPSBjdXJbc2VnbWVudHNbaV1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3VyO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgcmF3ID0gaW5zdGFuY2UudHlwZTtcclxuICAgIGNvbnN0IHsgX19tZXJnZWQsIG1peGlucywgZXh0ZW5kczogZXh0ZW5kc09wdGlvbnMgfSA9IHJhdztcclxuICAgIGlmIChfX21lcmdlZClcclxuICAgICAgICByZXR1cm4gX19tZXJnZWQ7XHJcbiAgICBjb25zdCBnbG9iYWxNaXhpbnMgPSBpbnN0YW5jZS5hcHBDb250ZXh0Lm1peGlucztcclxuICAgIGlmICghZ2xvYmFsTWl4aW5zLmxlbmd0aCAmJiAhbWl4aW5zICYmICFleHRlbmRzT3B0aW9ucylcclxuICAgICAgICByZXR1cm4gcmF3O1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xyXG4gICAgZ2xvYmFsTWl4aW5zLmZvckVhY2gobSA9PiBtZXJnZU9wdGlvbnMob3B0aW9ucywgbSwgaW5zdGFuY2UpKTtcclxuICAgIG1lcmdlT3B0aW9ucyhvcHRpb25zLCByYXcsIGluc3RhbmNlKTtcclxuICAgIHJldHVybiAocmF3Ll9fbWVyZ2VkID0gb3B0aW9ucyk7XHJcbn1cclxuZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHRvLCBmcm9tLCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3Qgc3RyYXRzID0gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xyXG4gICAgY29uc3QgeyBtaXhpbnMsIGV4dGVuZHM6IGV4dGVuZHNPcHRpb25zIH0gPSBmcm9tO1xyXG4gICAgZXh0ZW5kc09wdGlvbnMgJiYgbWVyZ2VPcHRpb25zKHRvLCBleHRlbmRzT3B0aW9ucywgaW5zdGFuY2UpO1xyXG4gICAgbWl4aW5zICYmXHJcbiAgICAgICAgbWl4aW5zLmZvckVhY2goKG0pID0+IG1lcmdlT3B0aW9ucyh0bywgbSwgaW5zdGFuY2UpKTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGZyb20pIHtcclxuICAgICAgICBpZiAoc3RyYXRzICYmIGhhc093bihzdHJhdHMsIGtleSkpIHtcclxuICAgICAgICAgICAgdG9ba2V5XSA9IHN0cmF0c1trZXldKHRvW2tleV0sIGZyb21ba2V5XSwgaW5zdGFuY2UucHJveHksIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0b1trZXldID0gZnJvbVtrZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5jb25zdCBwdWJsaWNQcm9wZXJ0aWVzTWFwID0gZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIHtcclxuICAgICQ6IGkgPT4gaSxcclxuICAgICRlbDogaSA9PiBpLnZub2RlLmVsLFxyXG4gICAgJGRhdGE6IGkgPT4gaS5kYXRhLFxyXG4gICAgJHByb3BzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5wcm9wcykgOiBpLnByb3BzKSxcclxuICAgICRhdHRyczogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkuYXR0cnMpIDogaS5hdHRycyksXHJcbiAgICAkc2xvdHM6IGkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpLnNsb3RzKSA6IGkuc2xvdHMpLFxyXG4gICAgJHJlZnM6IGkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpLnJlZnMpIDogaS5yZWZzKSxcclxuICAgICRwYXJlbnQ6IGkgPT4gaS5wYXJlbnQgJiYgaS5wYXJlbnQucHJveHksXHJcbiAgICAkcm9vdDogaSA9PiBpLnJvb3QgJiYgaS5yb290LnByb3h5LFxyXG4gICAgJGVtaXQ6IGkgPT4gaS5lbWl0LFxyXG4gICAgJG9wdGlvbnM6IGkgPT4gKF9fVlVFX09QVElPTlNfQVBJX18gPyByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpKSA6IGkudHlwZSksXHJcbiAgICAkZm9yY2VVcGRhdGU6IGkgPT4gKCkgPT4gcXVldWVKb2IoaS51cGRhdGUpLFxyXG4gICAgJG5leHRUaWNrOiBpID0+IG5leHRUaWNrLmJpbmQoaS5wcm94eSksXHJcbiAgICAkd2F0Y2g6IGkgPT4gKF9fVlVFX09QVElPTlNfQVBJX18gPyBpbnN0YW5jZVdhdGNoLmJpbmQoaSkgOiBOT09QKVxyXG59KTtcclxuY29uc3QgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzID0ge1xyXG4gICAgZ2V0KHsgXzogaW5zdGFuY2UgfSwga2V5KSB7XHJcbiAgICAgICAgY29uc3QgeyBjdHgsIHNldHVwU3RhdGUsIGRhdGEsIHByb3BzLCBhY2Nlc3NDYWNoZSwgdHlwZSwgYXBwQ29udGV4dCB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgLy8gbGV0IEB2dWUvcmVhY3Rpdml0eSBrbm93IGl0IHNob3VsZCBuZXZlciBvYnNlcnZlIFZ1ZSBwdWJsaWMgaW5zdGFuY2VzLlxyXG4gICAgICAgIGlmIChrZXkgPT09IFwiX192X3NraXBcIiAvKiBTS0lQICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBmb3IgaW50ZXJuYWwgZm9ybWF0dGVycyB0byBrbm93IHRoYXQgdGhpcyBpcyBhIFZ1ZSBpbnN0YW5jZVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYga2V5ID09PSAnX19pc1Z1ZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGRhdGEgLyBwcm9wcyAvIGN0eFxyXG4gICAgICAgIC8vIFRoaXMgZ2V0dGVyIGdldHMgY2FsbGVkIGZvciBldmVyeSBwcm9wZXJ0eSBhY2Nlc3Mgb24gdGhlIHJlbmRlciBjb250ZXh0XHJcbiAgICAgICAgLy8gZHVyaW5nIHJlbmRlciBhbmQgaXMgYSBtYWpvciBob3RzcG90LiBUaGUgbW9zdCBleHBlbnNpdmUgcGFydCBvZiB0aGlzXHJcbiAgICAgICAgLy8gaXMgdGhlIG11bHRpcGxlIGhhc093bigpIGNhbGxzLiBJdCdzIG11Y2ggZmFzdGVyIHRvIGRvIGEgc2ltcGxlIHByb3BlcnR5XHJcbiAgICAgICAgLy8gYWNjZXNzIG9uIGEgcGxhaW4gb2JqZWN0LCBzbyB3ZSB1c2UgYW4gYWNjZXNzQ2FjaGUgb2JqZWN0ICh3aXRoIG51bGxcclxuICAgICAgICAvLyBwcm90b3R5cGUpIHRvIG1lbW9pemUgd2hhdCBhY2Nlc3MgdHlwZSBhIGtleSBjb3JyZXNwb25kcyB0by5cclxuICAgICAgICBsZXQgbm9ybWFsaXplZFByb3BzO1xyXG4gICAgICAgIGlmIChrZXlbMF0gIT09ICckJykge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gYWNjZXNzQ2FjaGVba2V5XTtcclxuICAgICAgICAgICAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwIC8qIFNFVFVQICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0dXBTdGF0ZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMSAvKiBEQVRBICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMyAvKiBDT05URVhUICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3R4W2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyIC8qIFBST1BTICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0OiBqdXN0IGZhbGx0aHJvdWdoXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMCAvKiBTRVRVUCAqLztcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFN0YXRlW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMSAvKiBEQVRBICovO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChcclxuICAgICAgICAgICAgLy8gb25seSBjYWNoZSBvdGhlciBwcm9wZXJ0aWVzIHdoZW4gaW5zdGFuY2UgaGFzIGRlY2xhcmVkICh0aHVzIHN0YWJsZSlcclxuICAgICAgICAgICAgLy8gcHJvcHNcclxuICAgICAgICAgICAgKG5vcm1hbGl6ZWRQcm9wcyA9IGluc3RhbmNlLnByb3BzT3B0aW9uc1swXSkgJiZcclxuICAgICAgICAgICAgICAgIGhhc093bihub3JtYWxpemVkUHJvcHMsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAyIC8qIFBST1BTICovO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY3R4ICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGN0eCwga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDMgLyogQ09OVEVYVCAqLztcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghX19WVUVfT1BUSU9OU19BUElfXyB8fCAhaXNJbkJlZm9yZUNyZWF0ZSkge1xyXG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDQgLyogT1RIRVIgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHVibGljR2V0dGVyID0gcHVibGljUHJvcGVydGllc01hcFtrZXldO1xyXG4gICAgICAgIGxldCBjc3NNb2R1bGUsIGdsb2JhbFByb3BlcnRpZXM7XHJcbiAgICAgICAgLy8gcHVibGljICR4eHggcHJvcGVydGllc1xyXG4gICAgICAgIGlmIChwdWJsaWNHZXR0ZXIpIHtcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJyRhdHRycycpIHtcclxuICAgICAgICAgICAgICAgIHRyYWNrKGluc3RhbmNlLCBcImdldFwiIC8qIEdFVCAqLywga2V5KTtcclxuICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwdWJsaWNHZXR0ZXIoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChcclxuICAgICAgICAvLyBjc3MgbW9kdWxlIChpbmplY3RlZCBieSB2dWUtbG9hZGVyKVxyXG4gICAgICAgIChjc3NNb2R1bGUgPSB0eXBlLl9fY3NzTW9kdWxlcykgJiZcclxuICAgICAgICAgICAgKGNzc01vZHVsZSA9IGNzc01vZHVsZVtrZXldKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY3NzTW9kdWxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XHJcbiAgICAgICAgICAgIC8vIHVzZXIgbWF5IHNldCBjdXN0b20gcHJvcGVydGllcyB0byBgdGhpc2AgdGhhdCBzdGFydCB3aXRoIGAkYFxyXG4gICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMyAvKiBDT05URVhUICovO1xyXG4gICAgICAgICAgICByZXR1cm4gY3R4W2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgIC8vIGdsb2JhbCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgKChnbG9iYWxQcm9wZXJ0aWVzID0gYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcyksXHJcbiAgICAgICAgICAgIGhhc093bihnbG9iYWxQcm9wZXJ0aWVzLCBrZXkpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsUHJvcGVydGllc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlICYmXHJcbiAgICAgICAgICAgICghaXNTdHJpbmcoa2V5KSB8fFxyXG4gICAgICAgICAgICAgICAgLy8gIzEwOTEgYXZvaWQgaW50ZXJuYWwgaXNSZWYvaXNWTm9kZSBjaGVja3Mgb24gY29tcG9uZW50IGluc3RhbmNlIGxlYWRpbmdcclxuICAgICAgICAgICAgICAgIC8vIHRvIGluZmluaXRlIHdhcm5pbmcgbG9vcFxyXG4gICAgICAgICAgICAgICAga2V5LmluZGV4T2YoJ19fdicpICE9PSAwKSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmXHJcbiAgICAgICAgICAgICAgICAoa2V5WzBdID09PSAnJCcgfHwga2V5WzBdID09PSAnXycpICYmXHJcbiAgICAgICAgICAgICAgICBoYXNPd24oZGF0YSwga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShrZXkpfSBtdXN0IGJlIGFjY2Vzc2VkIHZpYSAkZGF0YSBiZWNhdXNlIGl0IHN0YXJ0cyB3aXRoIGEgcmVzZXJ2ZWQgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYGNoYXJhY3RlciAoXCIkXCIgb3IgXCJfXCIpIGFuZCBpcyBub3QgcHJveGllZCBvbiB0aGUgcmVuZGVyIGNvbnRleHQuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IHdhcyBhY2Nlc3NlZCBkdXJpbmcgcmVuZGVyIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBidXQgaXMgbm90IGRlZmluZWQgb24gaW5zdGFuY2UuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2V0KHsgXzogaW5zdGFuY2UgfSwga2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IHsgZGF0YSwgc2V0dXBTdGF0ZSwgY3R4IH0gPSBpbnN0YW5jZTtcclxuICAgICAgICBpZiAoc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHNldHVwU3RhdGVba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcclxuICAgICAgICAgICAgZGF0YVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSBpbiBpbnN0YW5jZS5wcm9wcykge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgIHdhcm4oYEF0dGVtcHRpbmcgdG8gbXV0YXRlIHByb3AgXCIke2tleX1cIi4gUHJvcHMgYXJlIHJlYWRvbmx5LmAsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoa2V5WzBdID09PSAnJCcgJiYga2V5LnNsaWNlKDEpIGluIGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQXR0ZW1wdGluZyB0byBtdXRhdGUgcHVibGljIHByb3BlcnR5IFwiJHtrZXl9XCIuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBQcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggJCBhcmUgcmVzZXJ2ZWQgYW5kIHJlYWRvbmx5LmAsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXkgaW4gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3R4W2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBoYXMoeyBfOiB7IGRhdGEsIHNldHVwU3RhdGUsIGFjY2Vzc0NhY2hlLCBjdHgsIGFwcENvbnRleHQsIHByb3BzT3B0aW9ucyB9IH0sIGtleSkge1xyXG4gICAgICAgIGxldCBub3JtYWxpemVkUHJvcHM7XHJcbiAgICAgICAgcmV0dXJuIChhY2Nlc3NDYWNoZVtrZXldICE9PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkgfHxcclxuICAgICAgICAgICAgKHNldHVwU3RhdGUgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oc2V0dXBTdGF0ZSwga2V5KSkgfHxcclxuICAgICAgICAgICAgKChub3JtYWxpemVkUHJvcHMgPSBwcm9wc09wdGlvbnNbMF0pICYmIGhhc093bihub3JtYWxpemVkUHJvcHMsIGtleSkpIHx8XHJcbiAgICAgICAgICAgIGhhc093bihjdHgsIGtleSkgfHxcclxuICAgICAgICAgICAgaGFzT3duKHB1YmxpY1Byb3BlcnRpZXNNYXAsIGtleSkgfHxcclxuICAgICAgICAgICAgaGFzT3duKGFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMsIGtleSkpO1xyXG4gICAgfVxyXG59O1xyXG5pZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFmYWxzZSkge1xyXG4gICAgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLm93bktleXMgPSAodGFyZ2V0KSA9PiB7XHJcbiAgICAgICAgd2FybihgQXZvaWQgYXBwIGxvZ2ljIHRoYXQgcmVsaWVzIG9uIGVudW1lcmF0aW5nIGtleXMgb24gYSBjb21wb25lbnQgaW5zdGFuY2UuIGAgK1xyXG4gICAgICAgICAgICBgVGhlIGtleXMgd2lsbCBiZSBlbXB0eSBpbiBwcm9kdWN0aW9uIG1vZGUgdG8gYXZvaWQgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQuYCk7XHJcbiAgICAgICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMgPSBleHRlbmQoe30sIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycywge1xyXG4gICAgZ2V0KHRhcmdldCwga2V5KSB7XHJcbiAgICAgICAgLy8gZmFzdCBwYXRoIGZvciB1bnNjb3BhYmxlcyB3aGVuIHVzaW5nIGB3aXRoYCBibG9ja1xyXG4gICAgICAgIGlmIChrZXkgPT09IFN5bWJvbC51bnNjb3BhYmxlcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMuZ2V0KHRhcmdldCwga2V5LCB0YXJnZXQpO1xyXG4gICAgfSxcclxuICAgIGhhcyhfLCBrZXkpIHtcclxuICAgICAgICBjb25zdCBoYXMgPSBrZXlbMF0gIT09ICdfJyAmJiAhaXNHbG9iYWxseVdoaXRlbGlzdGVkKGtleSk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGFzICYmIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycy5oYXMoXywga2V5KSkge1xyXG4gICAgICAgICAgICB3YXJuKGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IHNob3VsZCBub3Qgc3RhcnQgd2l0aCBfIHdoaWNoIGlzIGEgcmVzZXJ2ZWQgcHJlZml4IGZvciBWdWUgaW50ZXJuYWxzLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGFzO1xyXG4gICAgfVxyXG59KTtcclxuLy8gSW4gZGV2IG1vZGUsIHRoZSBwcm94eSB0YXJnZXQgZXhwb3NlcyB0aGUgc2FtZSBwcm9wZXJ0aWVzIGFzIHNlZW4gb24gYHRoaXNgXHJcbi8vIGZvciBlYXNpZXIgY29uc29sZSBpbnNwZWN0aW9uLiBJbiBwcm9kIG1vZGUgaXQgd2lsbCBiZSBhbiBlbXB0eSBvYmplY3Qgc29cclxuLy8gdGhlc2UgcHJvcGVydGllcyBkZWZpbml0aW9ucyBjYW4gYmUgc2tpcHBlZC5cclxuZnVuY3Rpb24gY3JlYXRlUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0ge307XHJcbiAgICAvLyBleHBvc2UgaW50ZXJuYWwgaW5zdGFuY2UgZm9yIHByb3h5IGhhbmRsZXJzXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBgX2AsIHtcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgZ2V0OiAoKSA9PiBpbnN0YW5jZVxyXG4gICAgfSk7XHJcbiAgICAvLyBleHBvc2UgcHVibGljIHByb3BlcnRpZXNcclxuICAgIE9iamVjdC5rZXlzKHB1YmxpY1Byb3BlcnRpZXNNYXApLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiBwdWJsaWNQcm9wZXJ0aWVzTWFwW2tleV0oaW5zdGFuY2UpLFxyXG4gICAgICAgICAgICAvLyBpbnRlcmNlcHRlZCBieSB0aGUgcHJveHkgc28gbm8gbmVlZCBmb3IgaW1wbGVtZW50YXRpb24sXHJcbiAgICAgICAgICAgIC8vIGJ1dCBuZWVkZWQgdG8gcHJldmVudCBzZXQgZXJyb3JzXHJcbiAgICAgICAgICAgIHNldDogTk9PUFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICAvLyBleHBvc2UgZ2xvYmFsIHByb3BlcnRpZXNcclxuICAgIGNvbnN0IHsgZ2xvYmFsUHJvcGVydGllcyB9ID0gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWc7XHJcbiAgICBPYmplY3Qua2V5cyhnbG9iYWxQcm9wZXJ0aWVzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGdldDogKCkgPT4gZ2xvYmFsUHJvcGVydGllc1trZXldLFxyXG4gICAgICAgICAgICBzZXQ6IE5PT1BcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufVxyXG4vLyBkZXYgb25seVxyXG5mdW5jdGlvbiBleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgeyBjdHgsIHByb3BzT3B0aW9uczogW3Byb3BzT3B0aW9uc10gfSA9IGluc3RhbmNlO1xyXG4gICAgaWYgKHByb3BzT3B0aW9ucykge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzT3B0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGluc3RhbmNlLnByb3BzW2tleV0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IE5PT1BcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuLy8gZGV2IG9ubHlcclxuZnVuY3Rpb24gZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgeyBjdHgsIHNldHVwU3RhdGUgfSA9IGluc3RhbmNlO1xyXG4gICAgT2JqZWN0LmtleXModG9SYXcoc2V0dXBTdGF0ZSkpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBpZiAoa2V5WzBdID09PSAnJCcgfHwga2V5WzBdID09PSAnXycpIHtcclxuICAgICAgICAgICAgd2Fybihgc2V0dXAoKSByZXR1cm4gcHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShrZXkpfSBzaG91bGQgbm90IHN0YXJ0IHdpdGggXCIkXCIgb3IgXCJfXCIgYCArXHJcbiAgICAgICAgICAgICAgICBgd2hpY2ggYXJlIHJlc2VydmVkIHByZWZpeGVzIGZvciBWdWUgaW50ZXJuYWxzLmApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGdldDogKCkgPT4gc2V0dXBTdGF0ZVtrZXldLFxyXG4gICAgICAgICAgICBzZXQ6IE5PT1BcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XG5cbmNvbnN0IGVtcHR5QXBwQ29udGV4dCA9IGNyZWF0ZUFwcENvbnRleHQoKTtcclxubGV0IHVpZCQxID0gMDtcclxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2Uodm5vZGUsIHBhcmVudCwgc3VzcGVuc2UpIHtcclxuICAgIGNvbnN0IHR5cGUgPSB2bm9kZS50eXBlO1xyXG4gICAgLy8gaW5oZXJpdCBwYXJlbnQgYXBwIGNvbnRleHQgLSBvciAtIGlmIHJvb3QsIGFkb3B0IGZyb20gcm9vdCB2bm9kZVxyXG4gICAgY29uc3QgYXBwQ29udGV4dCA9IChwYXJlbnQgPyBwYXJlbnQuYXBwQ29udGV4dCA6IHZub2RlLmFwcENvbnRleHQpIHx8IGVtcHR5QXBwQ29udGV4dDtcclxuICAgIGNvbnN0IGluc3RhbmNlID0ge1xyXG4gICAgICAgIHVpZDogdWlkJDErKyxcclxuICAgICAgICB2bm9kZSxcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIHBhcmVudCxcclxuICAgICAgICBhcHBDb250ZXh0LFxyXG4gICAgICAgIHJvb3Q6IG51bGwsXHJcbiAgICAgICAgbmV4dDogbnVsbCxcclxuICAgICAgICBzdWJUcmVlOiBudWxsLFxyXG4gICAgICAgIHVwZGF0ZTogbnVsbCxcclxuICAgICAgICByZW5kZXI6IG51bGwsXHJcbiAgICAgICAgcHJveHk6IG51bGwsXHJcbiAgICAgICAgd2l0aFByb3h5OiBudWxsLFxyXG4gICAgICAgIGVmZmVjdHM6IG51bGwsXHJcbiAgICAgICAgcHJvdmlkZXM6IHBhcmVudCA/IHBhcmVudC5wcm92aWRlcyA6IE9iamVjdC5jcmVhdGUoYXBwQ29udGV4dC5wcm92aWRlcyksXHJcbiAgICAgICAgYWNjZXNzQ2FjaGU6IG51bGwsXHJcbiAgICAgICAgcmVuZGVyQ2FjaGU6IFtdLFxyXG4gICAgICAgIC8vIGxvY2FsIHJlc292bGVkIGFzc2V0c1xyXG4gICAgICAgIGNvbXBvbmVudHM6IG51bGwsXHJcbiAgICAgICAgZGlyZWN0aXZlczogbnVsbCxcclxuICAgICAgICAvLyByZXNvbHZlZCBwcm9wcyBhbmQgZW1pdHMgb3B0aW9uc1xyXG4gICAgICAgIHByb3BzT3B0aW9uczogbm9ybWFsaXplUHJvcHNPcHRpb25zKHR5cGUsIGFwcENvbnRleHQpLFxyXG4gICAgICAgIGVtaXRzT3B0aW9uczogbm9ybWFsaXplRW1pdHNPcHRpb25zKHR5cGUsIGFwcENvbnRleHQpLFxyXG4gICAgICAgIC8vIGVtaXRcclxuICAgICAgICBlbWl0OiBudWxsLFxyXG4gICAgICAgIGVtaXR0ZWQ6IG51bGwsXHJcbiAgICAgICAgLy8gc3RhdGVcclxuICAgICAgICBjdHg6IEVNUFRZX09CSixcclxuICAgICAgICBkYXRhOiBFTVBUWV9PQkosXHJcbiAgICAgICAgcHJvcHM6IEVNUFRZX09CSixcclxuICAgICAgICBhdHRyczogRU1QVFlfT0JKLFxyXG4gICAgICAgIHNsb3RzOiBFTVBUWV9PQkosXHJcbiAgICAgICAgcmVmczogRU1QVFlfT0JKLFxyXG4gICAgICAgIHNldHVwU3RhdGU6IEVNUFRZX09CSixcclxuICAgICAgICBzZXR1cENvbnRleHQ6IG51bGwsXHJcbiAgICAgICAgLy8gc3VzcGVuc2UgcmVsYXRlZFxyXG4gICAgICAgIHN1c3BlbnNlLFxyXG4gICAgICAgIHN1c3BlbnNlSWQ6IHN1c3BlbnNlID8gc3VzcGVuc2UucGVuZGluZ0lkIDogMCxcclxuICAgICAgICBhc3luY0RlcDogbnVsbCxcclxuICAgICAgICBhc3luY1Jlc29sdmVkOiBmYWxzZSxcclxuICAgICAgICAvLyBsaWZlY3ljbGUgaG9va3NcclxuICAgICAgICAvLyBub3QgdXNpbmcgZW51bXMgaGVyZSBiZWNhdXNlIGl0IHJlc3VsdHMgaW4gY29tcHV0ZWQgcHJvcGVydGllc1xyXG4gICAgICAgIGlzTW91bnRlZDogZmFsc2UsXHJcbiAgICAgICAgaXNVbm1vdW50ZWQ6IGZhbHNlLFxyXG4gICAgICAgIGlzRGVhY3RpdmF0ZWQ6IGZhbHNlLFxyXG4gICAgICAgIGJjOiBudWxsLFxyXG4gICAgICAgIGM6IG51bGwsXHJcbiAgICAgICAgYm06IG51bGwsXHJcbiAgICAgICAgbTogbnVsbCxcclxuICAgICAgICBidTogbnVsbCxcclxuICAgICAgICB1OiBudWxsLFxyXG4gICAgICAgIHVtOiBudWxsLFxyXG4gICAgICAgIGJ1bTogbnVsbCxcclxuICAgICAgICBkYTogbnVsbCxcclxuICAgICAgICBhOiBudWxsLFxyXG4gICAgICAgIHJ0ZzogbnVsbCxcclxuICAgICAgICBydGM6IG51bGwsXHJcbiAgICAgICAgZWM6IG51bGxcclxuICAgIH07XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuY3R4ID0gY3JlYXRlUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpbnN0YW5jZS5jdHggPSB7IF86IGluc3RhbmNlIH07XHJcbiAgICB9XHJcbiAgICBpbnN0YW5jZS5yb290ID0gcGFyZW50ID8gcGFyZW50LnJvb3QgOiBpbnN0YW5jZTtcclxuICAgIGluc3RhbmNlLmVtaXQgPSBlbWl0LmJpbmQobnVsbCwgaW5zdGFuY2UpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbnN0YW5jZTtcclxufVxyXG5sZXQgY3VycmVudEluc3RhbmNlID0gbnVsbDtcclxuY29uc3QgZ2V0Q3VycmVudEluc3RhbmNlID0gKCkgPT4gY3VycmVudEluc3RhbmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcclxuY29uc3Qgc2V0Q3VycmVudEluc3RhbmNlID0gKGluc3RhbmNlKSA9PiB7XHJcbiAgICBjdXJyZW50SW5zdGFuY2UgPSBpbnN0YW5jZTtcclxufTtcclxuY29uc3QgaXNCdWlsdEluVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcpO1xyXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSwgY29uZmlnKSB7XHJcbiAgICBjb25zdCBhcHBJc05hdGl2ZVRhZyA9IGNvbmZpZy5pc05hdGl2ZVRhZyB8fCBOTztcclxuICAgIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgYXBwSXNOYXRpdmVUYWcobmFtZSkpIHtcclxuICAgICAgICB3YXJuKCdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50IGlkOiAnICsgbmFtZSk7XHJcbiAgICB9XHJcbn1cclxubGV0IGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGZhbHNlO1xyXG5mdW5jdGlvbiBzZXR1cENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IgPSBmYWxzZSkge1xyXG4gICAgaXNJblNTUkNvbXBvbmVudFNldHVwID0gaXNTU1I7XHJcbiAgICBjb25zdCB7IHByb3BzLCBjaGlsZHJlbiwgc2hhcGVGbGFnIH0gPSBpbnN0YW5jZS52bm9kZTtcclxuICAgIGNvbnN0IGlzU3RhdGVmdWwgPSBzaGFwZUZsYWcgJiA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqLztcclxuICAgIGluaXRQcm9wcyhpbnN0YW5jZSwgcHJvcHMsIGlzU3RhdGVmdWwsIGlzU1NSKTtcclxuICAgIGluaXRTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xyXG4gICAgY29uc3Qgc2V0dXBSZXN1bHQgPSBpc1N0YXRlZnVsXHJcbiAgICAgICAgPyBzZXR1cFN0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlLCBpc1NTUilcclxuICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgIGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGZhbHNlO1xyXG4gICAgcmV0dXJuIHNldHVwUmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIHNldHVwU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSKSB7XHJcbiAgICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGlmIChDb21wb25lbnQubmFtZSkge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoQ29tcG9uZW50Lm5hbWUsIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKENvbXBvbmVudC5jb21wb25lbnRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoQ29tcG9uZW50LmNvbXBvbmVudHMpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZXNbaV0sIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQ29tcG9uZW50LmRpcmVjdGl2ZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhDb21wb25lbnQuZGlyZWN0aXZlcyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyAwLiBjcmVhdGUgcmVuZGVyIHByb3h5IHByb3BlcnR5IGFjY2VzcyBjYWNoZVxyXG4gICAgaW5zdGFuY2UuYWNjZXNzQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgLy8gMS4gY3JlYXRlIHB1YmxpYyBpbnN0YW5jZSAvIHJlbmRlciBwcm94eVxyXG4gICAgLy8gYWxzbyBtYXJrIGl0IHJhdyBzbyBpdCdzIG5ldmVyIG9ic2VydmVkXHJcbiAgICBpbnN0YW5jZS5wcm94eSA9IG5ldyBQcm94eShpbnN0YW5jZS5jdHgsIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgZXhwb3NlUHJvcHNPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgLy8gMi4gY2FsbCBzZXR1cCgpXHJcbiAgICBjb25zdCB7IHNldHVwIH0gPSBDb21wb25lbnQ7XHJcbiAgICBpZiAoc2V0dXApIHtcclxuICAgICAgICBjb25zdCBzZXR1cENvbnRleHQgPSAoaW5zdGFuY2Uuc2V0dXBDb250ZXh0ID1cclxuICAgICAgICAgICAgc2V0dXAubGVuZ3RoID4gMSA/IGNyZWF0ZVNldHVwQ29udGV4dChpbnN0YW5jZSkgOiBudWxsKTtcclxuICAgICAgICBjdXJyZW50SW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICBwYXVzZVRyYWNraW5nKCk7XHJcbiAgICAgICAgY29uc3Qgc2V0dXBSZXN1bHQgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoc2V0dXAsIGluc3RhbmNlLCAwIC8qIFNFVFVQX0ZVTkNUSU9OICovLCBbKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGluc3RhbmNlLnByb3BzKSA6IGluc3RhbmNlLnByb3BzLCBzZXR1cENvbnRleHRdKTtcclxuICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgY3VycmVudEluc3RhbmNlID0gbnVsbDtcclxuICAgICAgICBpZiAoaXNQcm9taXNlKHNldHVwUmVzdWx0KSkge1xyXG4gICAgICAgICAgICBpZiAoaXNTU1IpIHtcclxuICAgICAgICAgICAgICAgIC8vIHJldHVybiB0aGUgcHJvbWlzZSBzbyBzZXJ2ZXItcmVuZGVyZXIgY2FuIHdhaXQgb24gaXRcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFJlc3VsdC50aGVuKChyZXNvbHZlZFJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCByZXNvbHZlZFJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGFzeW5jIHNldHVwIHJldHVybmVkIFByb21pc2UuXHJcbiAgICAgICAgICAgICAgICAvLyBiYWlsIGhlcmUgYW5kIHdhaXQgZm9yIHJlLWVudHJ5LlxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNEZXAgPSBzZXR1cFJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHNldHVwUmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHNldHVwUmVzdWx0LCBpc1NTUikge1xyXG4gICAgaWYgKGlzRnVuY3Rpb24oc2V0dXBSZXN1bHQpKSB7XHJcbiAgICAgICAgLy8gc2V0dXAgcmV0dXJuZWQgYW4gaW5saW5lIHJlbmRlciBmdW5jdGlvblxyXG4gICAgICAgIGluc3RhbmNlLnJlbmRlciA9IHNldHVwUmVzdWx0O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3Qoc2V0dXBSZXN1bHQpKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc1ZOb2RlKHNldHVwUmVzdWx0KSkge1xyXG4gICAgICAgICAgICB3YXJuKGBzZXR1cCgpIHNob3VsZCBub3QgcmV0dXJuIFZOb2RlcyBkaXJlY3RseSAtIGAgK1xyXG4gICAgICAgICAgICAgICAgYHJldHVybiBhIHJlbmRlciBmdW5jdGlvbiBpbnN0ZWFkLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzZXR1cCByZXR1cm5lZCBiaW5kaW5ncy5cclxuICAgICAgICAvLyBhc3N1bWluZyBhIHJlbmRlciBmdW5jdGlvbiBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGlzIHByZXNlbnQuXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuZGV2dG9vbHNSYXdTZXR1cFN0YXRlID0gc2V0dXBSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RhbmNlLnNldHVwU3RhdGUgPSBwcm94eVJlZnMoc2V0dXBSZXN1bHQpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNldHVwUmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB3YXJuKGBzZXR1cCgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LiBSZWNlaXZlZDogJHtzZXR1cFJlc3VsdCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBzZXR1cFJlc3VsdH1gKTtcclxuICAgIH1cclxuICAgIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlKTtcclxufVxyXG5sZXQgY29tcGlsZTtcclxuLyoqXHJcbiAqIEZvciBydW50aW1lLWRvbSB0byByZWdpc3RlciB0aGUgY29tcGlsZXIuXHJcbiAqIE5vdGUgdGhlIGV4cG9ydGVkIG1ldGhvZCB1c2VzIGFueSB0byBhdm9pZCBkLnRzIHJlbHlpbmcgb24gdGhlIGNvbXBpbGVyIHR5cGVzLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIoX2NvbXBpbGUpIHtcclxuICAgIGNvbXBpbGUgPSBfY29tcGlsZTtcclxufVxyXG5mdW5jdGlvbiBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSwgaXNTU1IpIHtcclxuICAgIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XHJcbiAgICAvLyB0ZW1wbGF0ZSAvIHJlbmRlciBmdW5jdGlvbiBub3JtYWxpemF0aW9uXHJcbiAgICBpZiAoIWluc3RhbmNlLnJlbmRlcikge1xyXG4gICAgICAgIC8vIGNvdWxkIGJlIHNldCBmcm9tIHNldHVwKClcclxuICAgICAgICBpZiAoY29tcGlsZSAmJiBDb21wb25lbnQudGVtcGxhdGUgJiYgIUNvbXBvbmVudC5yZW5kZXIpIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgY29tcGlsZWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIENvbXBvbmVudC5yZW5kZXIgPSBjb21waWxlKENvbXBvbmVudC50ZW1wbGF0ZSwge1xyXG4gICAgICAgICAgICAgICAgaXNDdXN0b21FbGVtZW50OiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5pc0N1c3RvbUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICBkZWxpbWl0ZXJzOiBDb21wb25lbnQuZGVsaW1pdGVyc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGNvbXBpbGVgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSAoQ29tcG9uZW50LnJlbmRlciB8fCBOT09QKTtcclxuICAgICAgICAvLyBmb3IgcnVudGltZS1jb21waWxlZCByZW5kZXIgZnVuY3Rpb25zIHVzaW5nIGB3aXRoYCBibG9ja3MsIHRoZSByZW5kZXJcclxuICAgICAgICAvLyBwcm94eSB1c2VkIG5lZWRzIGEgZGlmZmVyZW50IGBoYXNgIGhhbmRsZXIgd2hpY2ggaXMgbW9yZSBwZXJmb3JtYW50IGFuZFxyXG4gICAgICAgIC8vIGFsc28gb25seSBhbGxvd3MgYSB3aGl0ZWxpc3Qgb2YgZ2xvYmFscyB0byBmYWxsdGhyb3VnaC5cclxuICAgICAgICBpZiAoaW5zdGFuY2UucmVuZGVyLl9yYykge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS53aXRoUHJveHkgPSBuZXcgUHJveHkoaW5zdGFuY2UuY3R4LCBSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHN1cHBvcnQgZm9yIDIueCBvcHRpb25zXHJcbiAgICBpZiAoX19WVUVfT1BUSU9OU19BUElfXykge1xyXG4gICAgICAgIGN1cnJlbnRJbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgICAgIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSwgQ29tcG9uZW50KTtcclxuICAgICAgICBjdXJyZW50SW5zdGFuY2UgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgLy8gd2FybiBtaXNzaW5nIHRlbXBsYXRlL3JlbmRlclxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhQ29tcG9uZW50LnJlbmRlciAmJiBpbnN0YW5jZS5yZW5kZXIgPT09IE5PT1ApIHtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIWNvbXBpbGUgJiYgQ29tcG9uZW50LnRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBwcm92aWRlZCB0ZW1wbGF0ZSBvcHRpb24gYnV0IGAgK1xyXG4gICAgICAgICAgICAgICAgYHJ1bnRpbWUgY29tcGlsYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJ1aWxkIG9mIFZ1ZS5gICtcclxuICAgICAgICAgICAgICAgICggYCBDb25maWd1cmUgeW91ciBidW5kbGVyIHRvIGFsaWFzIFwidnVlXCIgdG8gXCJ2dWUvZGlzdC92dWUuZXNtLWJ1bmRsZXIuanNcIi5gXHJcbiAgICAgICAgICAgICAgICAgICAgKSAvKiBzaG91bGQgbm90IGhhcHBlbiAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgaXMgbWlzc2luZyB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24uYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IGF0dHJIYW5kbGVycyA9IHtcclxuICAgIGdldDogKHRhcmdldCwga2V5KSA9PiB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV07XHJcbiAgICB9LFxyXG4gICAgc2V0OiAoKSA9PiB7XHJcbiAgICAgICAgd2Fybihgc2V0dXBDb250ZXh0LmF0dHJzIGlzIHJlYWRvbmx5LmApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBkZWxldGVQcm9wZXJ0eTogKCkgPT4ge1xyXG4gICAgICAgIHdhcm4oYHNldHVwQ29udGV4dC5hdHRycyBpcyByZWFkb25seS5gKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZVNldHVwQ29udGV4dChpbnN0YW5jZSkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIC8vIFdlIHVzZSBnZXR0ZXJzIGluIGRldiBpbiBjYXNlIGxpYnMgbGlrZSB0ZXN0LXV0aWxzIG92ZXJ3cml0ZSBpbnN0YW5jZVxyXG4gICAgICAgIC8vIHByb3BlcnRpZXMgKG92ZXJ3cml0ZXMgc2hvdWxkIG5vdCBiZSBkb25lIGluIHByb2QpXHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgICAgICBnZXQgYXR0cnMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb3h5KGluc3RhbmNlLmF0dHJzLCBhdHRySGFuZGxlcnMpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQgc2xvdHMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hhbGxvd1JlYWRvbmx5KGluc3RhbmNlLnNsb3RzKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0IGVtaXQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGV2ZW50LCAuLi5hcmdzKSA9PiBpbnN0YW5jZS5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYXR0cnM6IGluc3RhbmNlLmF0dHJzLFxyXG4gICAgICAgICAgICBzbG90czogaW5zdGFuY2Uuc2xvdHMsXHJcbiAgICAgICAgICAgIGVtaXQ6IGluc3RhbmNlLmVtaXRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbi8vIHJlY29yZCBlZmZlY3RzIGNyZWF0ZWQgZHVyaW5nIGEgY29tcG9uZW50J3Mgc2V0dXAoKSBzbyB0aGF0IHRoZXkgY2FuIGJlXHJcbi8vIHN0b3BwZWQgd2hlbiB0aGUgY29tcG9uZW50IHVubW91bnRzXHJcbmZ1bmN0aW9uIHJlY29yZEluc3RhbmNlQm91bmRFZmZlY3QoZWZmZWN0KSB7XHJcbiAgICBpZiAoY3VycmVudEluc3RhbmNlKSB7XHJcbiAgICAgICAgKGN1cnJlbnRJbnN0YW5jZS5lZmZlY3RzIHx8IChjdXJyZW50SW5zdGFuY2UuZWZmZWN0cyA9IFtdKSkucHVzaChlZmZlY3QpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XHJcbmNvbnN0IGNsYXNzaWZ5ID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoY2xhc3NpZnlSRSwgYyA9PiBjLnRvVXBwZXJDYXNlKCkpLnJlcGxhY2UoL1stX10vZywgJycpO1xyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBDb21wb25lbnQsIGlzUm9vdCA9IGZhbHNlKSB7XHJcbiAgICBsZXQgbmFtZSA9IGlzRnVuY3Rpb24oQ29tcG9uZW50KVxyXG4gICAgICAgID8gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lXHJcbiAgICAgICAgOiBDb21wb25lbnQubmFtZTtcclxuICAgIGlmICghbmFtZSAmJiBDb21wb25lbnQuX19maWxlKSB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBDb21wb25lbnQuX19maWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcclxuICAgICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICAgICAgbmFtZSA9IG1hdGNoWzFdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghbmFtZSAmJiBpbnN0YW5jZSAmJiBpbnN0YW5jZS5wYXJlbnQpIHtcclxuICAgICAgICAvLyB0cnkgdG8gaW5mZXIgdGhlIG5hbWUgYmFzZWQgb24gcmV2ZXJzZSByZXNvbHV0aW9uXHJcbiAgICAgICAgY29uc3QgaW5mZXJGcm9tUmVnaXN0cnkgPSAocmVnaXN0cnkpID0+IHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmVnaXN0cnkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZWdpc3RyeVtrZXldID09PSBDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBuYW1lID1cclxuICAgICAgICAgICAgaW5mZXJGcm9tUmVnaXN0cnkoaW5zdGFuY2UuY29tcG9uZW50cyB8fFxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucGFyZW50LnR5cGUuY29tcG9uZW50cykgfHwgaW5mZXJGcm9tUmVnaXN0cnkoaW5zdGFuY2UuYXBwQ29udGV4dC5jb21wb25lbnRzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuYW1lID8gY2xhc3NpZnkobmFtZSkgOiBpc1Jvb3QgPyBgQXBwYCA6IGBBbm9ueW1vdXNgO1xyXG59XHJcbmZ1bmN0aW9uIGlzQ2xhc3NDb21wb25lbnQodmFsdWUpIHtcclxuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKSAmJiAnX192Y2NPcHRzJyBpbiB2YWx1ZTtcclxufVxuXG5mdW5jdGlvbiBjb21wdXRlZChnZXR0ZXJPck9wdGlvbnMpIHtcclxuICAgIGNvbnN0IGMgPSBjb21wdXRlZCQxKGdldHRlck9yT3B0aW9ucyk7XHJcbiAgICByZWNvcmRJbnN0YW5jZUJvdW5kRWZmZWN0KGMuZWZmZWN0KTtcclxuICAgIHJldHVybiBjO1xyXG59XG5cbi8vIGltcGxlbWVudGF0aW9uLCBjbG9zZSB0byBuby1vcFxyXG5mdW5jdGlvbiBkZWZpbmVDb21wb25lbnQob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob3B0aW9ucykgPyB7IHNldHVwOiBvcHRpb25zLCBuYW1lOiBvcHRpb25zLm5hbWUgfSA6IG9wdGlvbnM7XHJcbn1cblxuZnVuY3Rpb24gZGVmaW5lQXN5bmNDb21wb25lbnQoc291cmNlKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XHJcbiAgICAgICAgc291cmNlID0geyBsb2FkZXI6IHNvdXJjZSB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBsb2FkZXIsIGxvYWRpbmdDb21wb25lbnQ6IGxvYWRpbmdDb21wb25lbnQsIGVycm9yQ29tcG9uZW50OiBlcnJvckNvbXBvbmVudCwgZGVsYXkgPSAyMDAsIHRpbWVvdXQsIC8vIHVuZGVmaW5lZCA9IG5ldmVyIHRpbWVzIG91dFxyXG4gICAgc3VzcGVuc2libGUgPSB0cnVlLCBvbkVycm9yOiB1c2VyT25FcnJvciB9ID0gc291cmNlO1xyXG4gICAgbGV0IHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcclxuICAgIGxldCByZXNvbHZlZENvbXA7XHJcbiAgICBsZXQgcmV0cmllcyA9IDA7XHJcbiAgICBjb25zdCByZXRyeSA9ICgpID0+IHtcclxuICAgICAgICByZXRyaWVzKys7XHJcbiAgICAgICAgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiBsb2FkKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbG9hZCA9ICgpID0+IHtcclxuICAgICAgICBsZXQgdGhpc1JlcXVlc3Q7XHJcbiAgICAgICAgcmV0dXJuIChwZW5kaW5nUmVxdWVzdCB8fFxyXG4gICAgICAgICAgICAodGhpc1JlcXVlc3QgPSBwZW5kaW5nUmVxdWVzdCA9IGxvYWRlcigpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGVyciA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyIDogbmV3IEVycm9yKFN0cmluZyhlcnIpKTtcclxuICAgICAgICAgICAgICAgIGlmICh1c2VyT25FcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJSZXRyeSA9ICgpID0+IHJlc29sdmUocmV0cnkoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJGYWlsID0gKCkgPT4gcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJPbkVycm9yKGVyciwgdXNlclJldHJ5LCB1c2VyRmFpbCwgcmV0cmllcyArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKGNvbXApID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzUmVxdWVzdCAhPT0gcGVuZGluZ1JlcXVlc3QgJiYgcGVuZGluZ1JlcXVlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGVuZGluZ1JlcXVlc3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFjb21wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQXN5bmMgY29tcG9uZW50IGxvYWRlciByZXNvbHZlZCB0byB1bmRlZmluZWQuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgSWYgeW91IGFyZSB1c2luZyByZXRyeSgpLCBtYWtlIHN1cmUgdG8gcmV0dXJuIGl0cyByZXR1cm4gdmFsdWUuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBpbnRlcm9wIG1vZHVsZSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIChjb21wLl9fZXNNb2R1bGUgfHwgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wID0gY29tcC5kZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjb21wICYmICFpc09iamVjdChjb21wKSAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhc3luYyBjb21wb25lbnQgbG9hZCByZXN1bHQ6ICR7Y29tcH1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc29sdmVkQ29tcCA9IGNvbXA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcDtcclxuICAgICAgICAgICAgfSkpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZGVmaW5lQ29tcG9uZW50KHtcclxuICAgICAgICBfX2FzeW5jTG9hZGVyOiBsb2FkLFxyXG4gICAgICAgIG5hbWU6ICdBc3luY0NvbXBvbmVudFdyYXBwZXInLFxyXG4gICAgICAgIHNldHVwKCkge1xyXG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZTtcclxuICAgICAgICAgICAgLy8gYWxyZWFkeSByZXNvbHZlZFxyXG4gICAgICAgICAgICBpZiAocmVzb2x2ZWRDb21wKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uRXJyb3IgPSAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAxMyAvKiBBU1lOQ19DT01QT05FTlRfTE9BREVSICovLCAhZXJyb3JDb21wb25lbnQgLyogZG8gbm90IHRocm93IGluIGRldiBpZiB1c2VyIHByb3ZpZGVkIGVycm9yIGNvbXBvbmVudCAqLyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIHN1c3BlbnNlLWNvbnRyb2xsZWQgb3IgU1NSLlxyXG4gICAgICAgICAgICBpZiAoKCBzdXNwZW5zaWJsZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSkgfHxcclxuICAgICAgICAgICAgICAgIChmYWxzZSApKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oY29tcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGNyZWF0ZUlubmVyQ29tcChjb21wLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gZXJyb3JDb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBjcmVhdGVWTm9kZShlcnJvckNvbXBvbmVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVyclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBsb2FkZWQgPSByZWYoZmFsc2UpO1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IHJlZigpO1xyXG4gICAgICAgICAgICBjb25zdCBkZWxheWVkID0gcmVmKCEhZGVsYXkpO1xyXG4gICAgICAgICAgICBpZiAoZGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ZWQudmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sIGRlbGF5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxvYWRlZC52YWx1ZSAmJiAhZXJyb3IudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGBBc3luYyBjb21wb25lbnQgdGltZWQgb3V0IGFmdGVyICR7dGltZW91dH1tcy5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci52YWx1ZSA9IGVycjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsb2FkKClcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxvYWRlZC52YWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChsb2FkZWQudmFsdWUgJiYgcmVzb2x2ZWRDb21wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUlubmVyQ29tcChyZXNvbHZlZENvbXAsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVycm9yLnZhbHVlICYmIGVycm9yQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKGVycm9yQ29tcG9uZW50LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvci52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobG9hZGluZ0NvbXBvbmVudCAmJiAhZGVsYXllZC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShsb2FkaW5nQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbm5lckNvbXAoY29tcCwgeyB2bm9kZTogeyBwcm9wcywgY2hpbGRyZW4gfSB9KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlVk5vZGUoY29tcCwgcHJvcHMsIGNoaWxkcmVuKTtcclxufVxuXG4vLyBBY3R1YWwgaW1wbGVtZW50YXRpb25cclxuZnVuY3Rpb24gaCh0eXBlLCBwcm9wc09yQ2hpbGRyZW4sIGNoaWxkcmVuKSB7XHJcbiAgICBjb25zdCBsID0gYXJndW1lbnRzLmxlbmd0aDtcclxuICAgIGlmIChsID09PSAyKSB7XHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KHByb3BzT3JDaGlsZHJlbikgJiYgIWlzQXJyYXkocHJvcHNPckNoaWxkcmVuKSkge1xyXG4gICAgICAgICAgICAvLyBzaW5nbGUgdm5vZGUgd2l0aG91dCBwcm9wc1xyXG4gICAgICAgICAgICBpZiAoaXNWTm9kZShwcm9wc09yQ2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgbnVsbCwgW3Byb3BzT3JDaGlsZHJlbl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByb3BzIHdpdGhvdXQgY2hpbGRyZW5cclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzT3JDaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBvbWl0IHByb3BzXHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBudWxsLCBwcm9wc09yQ2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChsID4gMykge1xyXG4gICAgICAgICAgICBjaGlsZHJlbiA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGwgPT09IDMgJiYgaXNWTm9kZShjaGlsZHJlbikpIHtcclxuICAgICAgICAgICAgY2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbik7XHJcbiAgICB9XHJcbn1cblxuY29uc3Qgc3NyQ29udGV4dEtleSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgc3NyQ29udGV4dGAgOiBgYCk7XHJcbmNvbnN0IHVzZVNTUkNvbnRleHQgPSAoKSA9PiB7XHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgY3R4ID0gaW5qZWN0KHNzckNvbnRleHRLZXkpO1xyXG4gICAgICAgIGlmICghY3R4KSB7XHJcbiAgICAgICAgICAgIHdhcm4oYFNlcnZlciByZW5kZXJpbmcgY29udGV4dCBub3QgcHJvdmlkZWQuIE1ha2Ugc3VyZSB0byBvbmx5IGNhbGwgYCArXHJcbiAgICAgICAgICAgICAgICBgdXNlU3NyQ29udGV4dCgpIGNvbmRpdGlvbmFsbHkgaW4gdGhlIHNlcnZlciBidWlsZC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGN0eDtcclxuICAgIH1cclxufTtcblxuZnVuY3Rpb24gaW5pdEN1c3RvbUZvcm1hdHRlcigpIHtcclxuICAgIGlmICghKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8ICF0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdnVlU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6IzNiYTc3NicgfTtcclxuICAgIGNvbnN0IG51bWJlclN0eWxlID0geyBzdHlsZTogJ2NvbG9yOiMwYjFiYzknIH07XHJcbiAgICBjb25zdCBzdHJpbmdTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojYjYyZTI0JyB9O1xyXG4gICAgY29uc3Qga2V5d29yZFN0eWxlID0geyBzdHlsZTogJ2NvbG9yOiM5ZDI4OGMnIH07XHJcbiAgICAvLyBjdXN0b20gZm9ybWF0dGVyIGZvciBDaHJvbWVcclxuICAgIC8vIGh0dHBzOi8vd3d3Lm1hdHR6ZXVuZXJ0LmNvbS8yMDE2LzAyLzE5L2N1c3RvbS1jaHJvbWUtZGV2dG9vbHMtb2JqZWN0LWZvcm1hdHRlcnMuaHRtbFxyXG4gICAgY29uc3QgZm9ybWF0dGVyID0ge1xyXG4gICAgICAgIGhlYWRlcihvYmopIHtcclxuICAgICAgICAgICAgLy8gVE9ETyBhbHNvIGZvcm1hdCBDb21wb25lbnRQdWJsaWNJbnN0YW5jZSAmIGN0eC5zbG90cy9hdHRycyBpbiBzZXR1cFxyXG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KG9iaikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvYmouX19pc1Z1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnZGl2JywgdnVlU3R5bGUsIGBWdWVJbnN0YW5jZWBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVmKG9iaikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgWydzcGFuJywgdnVlU3R5bGUsIGdlblJlZkZsYWcob2JqKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgJzwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKG9iai52YWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgYD5gXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVhY3RpdmUob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCB2dWVTdHlsZSwgJ1JlYWN0aXZlJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgJzwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKG9iaiksXHJcbiAgICAgICAgICAgICAgICAgICAgYD4ke2lzUmVhZG9ubHkob2JqKSA/IGAgKHJlYWRvbmx5KWAgOiBgYH1gXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVhZG9ubHkob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCB2dWVTdHlsZSwgJ1JlYWRvbmx5J10sXHJcbiAgICAgICAgICAgICAgICAgICAgJzwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKG9iaiksXHJcbiAgICAgICAgICAgICAgICAgICAgJz4nXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFzQm9keShvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmouX19pc1Z1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvZHkob2JqKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmogJiYgb2JqLl9faXNWdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgLi4uZm9ybWF0SW5zdGFuY2Uob2JqLiQpXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZ1bmN0aW9uIGZvcm1hdEluc3RhbmNlKGluc3RhbmNlKSB7XHJcbiAgICAgICAgY29uc3QgYmxvY2tzID0gW107XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLnR5cGUucHJvcHMgJiYgaW5zdGFuY2UucHJvcHMpIHtcclxuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygncHJvcHMnLCB0b1JhdyhpbnN0YW5jZS5wcm9wcykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLnNldHVwU3RhdGUgIT09IEVNUFRZX09CSikge1xyXG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdzZXR1cCcsIGluc3RhbmNlLnNldHVwU3RhdGUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmRhdGEgIT09IEVNUFRZX09CSikge1xyXG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdkYXRhJywgdG9SYXcoaW5zdGFuY2UuZGF0YSkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29tcHV0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgJ2NvbXB1dGVkJyk7XHJcbiAgICAgICAgaWYgKGNvbXB1dGVkKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ2NvbXB1dGVkJywgY29tcHV0ZWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaW5qZWN0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgJ2luamVjdCcpO1xyXG4gICAgICAgIGlmIChpbmplY3RlZCkge1xyXG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdpbmplY3RlZCcsIGluamVjdGVkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJsb2Nrcy5wdXNoKFtcclxuICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAnc3BhbicsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGtleXdvcmRTdHlsZS5zdHlsZSArICc7b3BhY2l0eTowLjY2J1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICckIChpbnRlcm5hbCk6ICdcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgWydvYmplY3QnLCB7IG9iamVjdDogaW5zdGFuY2UgfV1cclxuICAgICAgICBdKTtcclxuICAgICAgICByZXR1cm4gYmxvY2tzO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VCbG9jayh0eXBlLCB0YXJnZXQpIHtcclxuICAgICAgICB0YXJnZXQgPSBleHRlbmQoe30sIHRhcmdldCk7XHJcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyh0YXJnZXQpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywge31dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgeyBzdHlsZTogJ2xpbmUtaGVpZ2h0OjEuMjVlbTttYXJnaW4tYm90dG9tOjAuNmVtJyB9LFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2NvbG9yOiM0NzY1ODInXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdHlwZVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ3BhZGRpbmctbGVmdDoxLjI1ZW0nXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgLi4uT2JqZWN0LmtleXModGFyZ2V0KS5tYXAoa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIGtleXdvcmRTdHlsZSwga2V5ICsgJzogJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKHRhcmdldFtrZXldLCBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2LCBhc1JhdyA9IHRydWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBudW1iZXJTdHlsZSwgdl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywgc3RyaW5nU3R5bGUsIEpTT04uc3RyaW5naWZ5KHYpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHYgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywga2V5d29yZFN0eWxlLCB2XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3QodikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnb2JqZWN0JywgeyBvYmplY3Q6IGFzUmF3ID8gdG9SYXcodikgOiB2IH1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIHN0cmluZ1N0eWxlLCBTdHJpbmcodildO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RLZXlzKGluc3RhbmNlLCB0eXBlKSB7XHJcbiAgICAgICAgY29uc3QgQ29tcCA9IGluc3RhbmNlLnR5cGU7XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oQ29tcCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBleHRyYWN0ZWQgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5jdHgpIHtcclxuICAgICAgICAgICAgaWYgKGlzS2V5T2ZUeXBlKENvbXAsIGtleSwgdHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIGV4dHJhY3RlZFtrZXldID0gaW5zdGFuY2UuY3R4W2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RlZDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGlzS2V5T2ZUeXBlKENvbXAsIGtleSwgdHlwZSkge1xyXG4gICAgICAgIGNvbnN0IG9wdHMgPSBDb21wW3R5cGVdO1xyXG4gICAgICAgIGlmICgoaXNBcnJheShvcHRzKSAmJiBvcHRzLmluY2x1ZGVzKGtleSkpIHx8XHJcbiAgICAgICAgICAgIChpc09iamVjdChvcHRzKSAmJiBrZXkgaW4gb3B0cykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChDb21wLmV4dGVuZHMgJiYgaXNLZXlPZlR5cGUoQ29tcC5leHRlbmRzLCBrZXksIHR5cGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQ29tcC5taXhpbnMgJiYgQ29tcC5taXhpbnMuc29tZShtID0+IGlzS2V5T2ZUeXBlKG0sIGtleSwgdHlwZSkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdlblJlZkZsYWcodikge1xyXG4gICAgICAgIGlmICh2Ll9zaGFsbG93KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgU2hhbGxvd1JlZmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2LmVmZmVjdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYENvbXB1dGVkUmVmYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGBSZWZgO1xyXG4gICAgfVxyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXHJcbiAgICBpZiAod2luZG93LmRldnRvb2xzRm9ybWF0dGVycykge1xyXG4gICAgICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgd2luZG93LmRldnRvb2xzRm9ybWF0dGVycyA9IFtmb3JtYXR0ZXJdO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBBY3R1YWwgaW1wbGVtZW50YXRpb25cclxuICovXHJcbmZ1bmN0aW9uIHJlbmRlckxpc3Qoc291cmNlLCByZW5kZXJJdGVtKSB7XHJcbiAgICBsZXQgcmV0O1xyXG4gICAgaWYgKGlzQXJyYXkoc291cmNlKSB8fCBpc1N0cmluZyhzb3VyY2UpKSB7XHJcbiAgICAgICAgcmV0ID0gbmV3IEFycmF5KHNvdXJjZS5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gc291cmNlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICByZXRbaV0gPSByZW5kZXJJdGVtKHNvdXJjZVtpXSwgaSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFOdW1iZXIuaXNJbnRlZ2VyKHNvdXJjZSkpIHtcclxuICAgICAgICAgICAgd2FybihgVGhlIHYtZm9yIHJhbmdlIGV4cGVjdCBhbiBpbnRlZ2VyIHZhbHVlIGJ1dCBnb3QgJHtzb3VyY2V9LmApO1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldCA9IG5ldyBBcnJheShzb3VyY2UpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlOyBpKyspIHtcclxuICAgICAgICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShpICsgMSwgaSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xyXG4gICAgICAgIGlmIChzb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSkge1xyXG4gICAgICAgICAgICByZXQgPSBBcnJheS5mcm9tKHNvdXJjZSwgcmVuZGVySXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcclxuICAgICAgICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcclxuICAgICAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oc291cmNlW2tleV0sIGtleSwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXQgPSBbXTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cblxuLyoqXHJcbiAqIEZvciBwcmVmaXhpbmcga2V5cyBpbiB2LW9uPVwib2JqXCIgd2l0aCBcIm9uXCJcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHRvSGFuZGxlcnMob2JqKSB7XHJcbiAgICBjb25zdCByZXQgPSB7fTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzT2JqZWN0KG9iaikpIHtcclxuICAgICAgICB3YXJuKGB2LW9uIHdpdGggbm8gYXJndW1lbnQgZXhwZWN0cyBhbiBvYmplY3QgdmFsdWUuYCk7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgICAgIHJldFt0b0hhbmRsZXJLZXkoa2V5KV0gPSBvYmpba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cblxuLyoqXHJcbiAqIENvbXBpbGVyIHJ1bnRpbWUgaGVscGVyIGZvciBjcmVhdGluZyBkeW5hbWljIHNsb3RzIG9iamVjdFxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlU2xvdHMoc2xvdHMsIGR5bmFtaWNTbG90cykge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkeW5hbWljU2xvdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBzbG90ID0gZHluYW1pY1Nsb3RzW2ldO1xyXG4gICAgICAgIC8vIGFycmF5IG9mIGR5bmFtaWMgc2xvdCBnZW5lcmF0ZWQgYnkgPHRlbXBsYXRlIHYtZm9yPVwiLi4uXCIgI1suLi5dPlxyXG4gICAgICAgIGlmIChpc0FycmF5KHNsb3QpKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2xvdC5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgc2xvdHNbc2xvdFtqXS5uYW1lXSA9IHNsb3Rbal0uZm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoc2xvdCkge1xyXG4gICAgICAgICAgICAvLyBjb25kaXRpb25hbCBzaW5nbGUgc2xvdCBnZW5lcmF0ZWQgYnkgPHRlbXBsYXRlIHYtaWY9XCIuLi5cIiAjZm9vPlxyXG4gICAgICAgICAgICBzbG90c1tzbG90Lm5hbWVdID0gc2xvdC5mbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2xvdHM7XHJcbn1cblxuLy8gQ29yZSBBUEkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmNvbnN0IHZlcnNpb24gPSBcIjMuMC4yXCI7XHJcbi8qKlxyXG4gKiBTU1IgdXRpbHMgZm9yIFxcQHZ1ZS9zZXJ2ZXItcmVuZGVyZXIuIE9ubHkgZXhwb3NlZCBpbiBjanMgYnVpbGRzLlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmNvbnN0IHNzclV0aWxzID0gKCBudWxsKTtcblxuZXhwb3J0IHsgQmFzZVRyYW5zaXRpb24sIENvbW1lbnQsIEZyYWdtZW50LCBLZWVwQWxpdmUsIFN0YXRpYywgU3VzcGVuc2UsIFRlbGVwb3J0LCBUZXh0LCBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZywgY2FsbFdpdGhFcnJvckhhbmRsaW5nLCBjbG9uZVZOb2RlLCBjb21wdXRlZCwgY3JlYXRlQmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSwgY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIsIGNyZWF0ZVJlbmRlcmVyLCBjcmVhdGVTbG90cywgY3JlYXRlU3RhdGljVk5vZGUsIGNyZWF0ZVRleHRWTm9kZSwgY3JlYXRlVk5vZGUsIGRlZmluZUFzeW5jQ29tcG9uZW50LCBkZWZpbmVDb21wb25lbnQsIGRldnRvb2xzLCBnZXRDdXJyZW50SW5zdGFuY2UsIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiwgaCwgaGFuZGxlRXJyb3IsIGluaXRDdXN0b21Gb3JtYXR0ZXIsIGluamVjdCwgaXNWTm9kZSwgbWVyZ2VQcm9wcywgbmV4dFRpY2ssIG9uQWN0aXZhdGVkLCBvbkJlZm9yZU1vdW50LCBvbkJlZm9yZVVubW91bnQsIG9uQmVmb3JlVXBkYXRlLCBvbkRlYWN0aXZhdGVkLCBvbkVycm9yQ2FwdHVyZWQsIG9uTW91bnRlZCwgb25SZW5kZXJUcmFja2VkLCBvblJlbmRlclRyaWdnZXJlZCwgb25Vbm1vdW50ZWQsIG9uVXBkYXRlZCwgb3BlbkJsb2NrLCBwb3BTY29wZUlkLCBwcm92aWRlLCBwdXNoU2NvcGVJZCwgcXVldWVQb3N0Rmx1c2hDYiwgcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIsIHJlbmRlckxpc3QsIHJlbmRlclNsb3QsIHJlc29sdmVDb21wb25lbnQsIHJlc29sdmVEaXJlY3RpdmUsIHJlc29sdmVEeW5hbWljQ29tcG9uZW50LCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzLCBzZXRCbG9ja1RyYWNraW5nLCBzZXREZXZ0b29sc0hvb2ssIHNldFRyYW5zaXRpb25Ib29rcywgc3NyQ29udGV4dEtleSwgc3NyVXRpbHMsIHRvSGFuZGxlcnMsIHRyYW5zZm9ybVZOb2RlQXJncywgdXNlU1NSQ29udGV4dCwgdXNlVHJhbnNpdGlvblN0YXRlLCB2ZXJzaW9uLCB3YXJuLCB3YXRjaCwgd2F0Y2hFZmZlY3QsIHdpdGhDdHgsIHdpdGhEaXJlY3RpdmVzLCB3aXRoU2NvcGVJZCB9O1xuIiwiaW1wb3J0IHsgY2FtZWxpemUsIHdhcm4sIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nLCBnZXRDdXJyZW50SW5zdGFuY2UsIG9uTW91bnRlZCwgd2F0Y2hFZmZlY3QsIG9uVXBkYXRlZCwgdW5yZWYsIEZyYWdtZW50LCBoLCBCYXNlVHJhbnNpdGlvbiwgdXNlVHJhbnNpdGlvblN0YXRlLCBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4sIHNldFRyYW5zaXRpb25Ib29rcywgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcywgY3JlYXRlVk5vZGUsIGNyZWF0ZVJlbmRlcmVyLCBjcmVhdGVIeWRyYXRpb25SZW5kZXJlciB9IGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmV4cG9ydCAqIGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmltcG9ydCB7IGlzU3RyaW5nLCBpc0FycmF5LCBoeXBoZW5hdGUsIGNhcGl0YWxpemUsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpc09uLCBpc01vZGVsTGlzdGVuZXIsIGlzRnVuY3Rpb24sIEVNUFRZX09CSiwgZXh0ZW5kLCBpc09iamVjdCwgdG9OdW1iZXIsIGludm9rZUFycmF5Rm5zLCBsb29zZUluZGV4T2YsIGlzU2V0LCBsb29zZUVxdWFsLCBpc0hUTUxUYWcsIGlzU1ZHVGFnIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCBzdmdOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XHJcbmNvbnN0IGRvYyA9ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiBudWxsKTtcclxubGV0IHRlbXBDb250YWluZXI7XHJcbmxldCB0ZW1wU1ZHQ29udGFpbmVyO1xyXG5jb25zdCBub2RlT3BzID0ge1xyXG4gICAgaW5zZXJ0OiAoY2hpbGQsIHBhcmVudCwgYW5jaG9yKSA9PiB7XHJcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgYW5jaG9yIHx8IG51bGwpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZTogY2hpbGQgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudCA9IGNoaWxkLnBhcmVudE5vZGU7XHJcbiAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGVFbGVtZW50OiAodGFnLCBpc1NWRywgaXMpID0+IGlzU1ZHXHJcbiAgICAgICAgPyBkb2MuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCB0YWcpXHJcbiAgICAgICAgOiBkb2MuY3JlYXRlRWxlbWVudCh0YWcsIGlzID8geyBpcyB9IDogdW5kZWZpbmVkKSxcclxuICAgIGNyZWF0ZVRleHQ6IHRleHQgPT4gZG9jLmNyZWF0ZVRleHROb2RlKHRleHQpLFxyXG4gICAgY3JlYXRlQ29tbWVudDogdGV4dCA9PiBkb2MuY3JlYXRlQ29tbWVudCh0ZXh0KSxcclxuICAgIHNldFRleHQ6IChub2RlLCB0ZXh0KSA9PiB7XHJcbiAgICAgICAgbm9kZS5ub2RlVmFsdWUgPSB0ZXh0O1xyXG4gICAgfSxcclxuICAgIHNldEVsZW1lbnRUZXh0OiAoZWwsIHRleHQpID0+IHtcclxuICAgICAgICBlbC50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgICB9LFxyXG4gICAgcGFyZW50Tm9kZTogbm9kZSA9PiBub2RlLnBhcmVudE5vZGUsXHJcbiAgICBuZXh0U2libGluZzogbm9kZSA9PiBub2RlLm5leHRTaWJsaW5nLFxyXG4gICAgcXVlcnlTZWxlY3Rvcjogc2VsZWN0b3IgPT4gZG9jLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLFxyXG4gICAgc2V0U2NvcGVJZChlbCwgaWQpIHtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoaWQsICcnKTtcclxuICAgIH0sXHJcbiAgICBjbG9uZU5vZGUoZWwpIHtcclxuICAgICAgICByZXR1cm4gZWwuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgfSxcclxuICAgIC8vIF9fVU5TQUZFX19cclxuICAgIC8vIFJlYXNvbjogaW5uZXJIVE1MLlxyXG4gICAgLy8gU3RhdGljIGNvbnRlbnQgaGVyZSBjYW4gb25seSBjb21lIGZyb20gY29tcGlsZWQgdGVtcGxhdGVzLlxyXG4gICAgLy8gQXMgbG9uZyBhcyB0aGUgdXNlciBvbmx5IHVzZXMgdHJ1c3RlZCB0ZW1wbGF0ZXMsIHRoaXMgaXMgc2FmZS5cclxuICAgIGluc2VydFN0YXRpY0NvbnRlbnQoY29udGVudCwgcGFyZW50LCBhbmNob3IsIGlzU1ZHKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcCA9IGlzU1ZHXHJcbiAgICAgICAgICAgID8gdGVtcFNWR0NvbnRhaW5lciB8fFxyXG4gICAgICAgICAgICAgICAgKHRlbXBTVkdDb250YWluZXIgPSBkb2MuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCAnc3ZnJykpXHJcbiAgICAgICAgICAgIDogdGVtcENvbnRhaW5lciB8fCAodGVtcENvbnRhaW5lciA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XHJcbiAgICAgICAgdGVtcC5pbm5lckhUTUwgPSBjb250ZW50O1xyXG4gICAgICAgIGNvbnN0IGZpcnN0ID0gdGVtcC5maXJzdENoaWxkO1xyXG4gICAgICAgIGxldCBub2RlID0gZmlyc3Q7XHJcbiAgICAgICAgbGV0IGxhc3QgPSBub2RlO1xyXG4gICAgICAgIHdoaWxlIChub2RlKSB7XHJcbiAgICAgICAgICAgIGxhc3QgPSBub2RlO1xyXG4gICAgICAgICAgICBub2RlT3BzLmluc2VydChub2RlLCBwYXJlbnQsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIG5vZGUgPSB0ZW1wLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbZmlyc3QsIGxhc3RdO1xyXG4gICAgfVxyXG59O1xuXG4vLyBjb21waWxlciBzaG91bGQgbm9ybWFsaXplIGNsYXNzICsgOmNsYXNzIGJpbmRpbmdzIG9uIHRoZSBzYW1lIGVsZW1lbnRcclxuLy8gaW50byBhIHNpbmdsZSBiaW5kaW5nIFsnc3RhdGljQ2xhc3MnLCBkeW5hbWljXVxyXG5mdW5jdGlvbiBwYXRjaENsYXNzKGVsLCB2YWx1ZSwgaXNTVkcpIHtcclxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgdmFsdWUgPSAnJztcclxuICAgIH1cclxuICAgIGlmIChpc1NWRykge1xyXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBkaXJlY3RseSBzZXR0aW5nIGNsYXNzTmFtZSBzaG91bGQgYmUgZmFzdGVyIHRoYW4gc2V0QXR0cmlidXRlIGluIHRoZW9yeVxyXG4gICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gZWxlbWVudCBkdXJpbmcgYSB0cmFuc2l0aW9uLCB0YWtlIHRoZSB0ZW1wb3JhcnkgdHJhbnNpdGlvblxyXG4gICAgICAgIC8vIGNsYXNzZXMgaW50byBhY2NvdW50LlxyXG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3Z0YztcclxuICAgICAgICBpZiAodHJhbnNpdGlvbkNsYXNzZXMpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSAodmFsdWVcclxuICAgICAgICAgICAgICAgID8gW3ZhbHVlLCAuLi50cmFuc2l0aW9uQ2xhc3Nlc11cclxuICAgICAgICAgICAgICAgIDogWy4uLnRyYW5zaXRpb25DbGFzc2VzXSkuam9pbignICcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbC5jbGFzc05hbWUgPSB2YWx1ZTtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBwYXRjaFN0eWxlKGVsLCBwcmV2LCBuZXh0KSB7XHJcbiAgICBjb25zdCBzdHlsZSA9IGVsLnN0eWxlO1xyXG4gICAgaWYgKCFuZXh0KSB7XHJcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTdHJpbmcobmV4dCkpIHtcclxuICAgICAgICBpZiAocHJldiAhPT0gbmV4dCkge1xyXG4gICAgICAgICAgICBzdHlsZS5jc3NUZXh0ID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuZXh0KSB7XHJcbiAgICAgICAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksIG5leHRba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcmV2ICYmICFpc1N0cmluZyhwcmV2KSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcmV2KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dFtrZXldID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRTdHlsZShzdHlsZSwga2V5LCAnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuY29uc3QgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcclxuZnVuY3Rpb24gc2V0U3R5bGUoc3R5bGUsIG5hbWUsIHZhbCkge1xyXG4gICAgaWYgKGlzQXJyYXkodmFsKSkge1xyXG4gICAgICAgIHZhbC5mb3JFYWNoKHYgPT4gc2V0U3R5bGUoc3R5bGUsIG5hbWUsIHYpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoJy0tJykpIHtcclxuICAgICAgICAgICAgLy8gY3VzdG9tIHByb3BlcnR5IGRlZmluaXRpb25cclxuICAgICAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZWZpeGVkID0gYXV0b1ByZWZpeChzdHlsZSwgbmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcclxuICAgICAgICAgICAgICAgIC8vICFpbXBvcnRhbnRcclxuICAgICAgICAgICAgICAgIHN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShwcmVmaXhlZCksIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0eWxlW3ByZWZpeGVkXSA9IHZhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xyXG5jb25zdCBwcmVmaXhDYWNoZSA9IHt9O1xyXG5mdW5jdGlvbiBhdXRvUHJlZml4KHN0eWxlLCByYXdOYW1lKSB7XHJcbiAgICBjb25zdCBjYWNoZWQgPSBwcmVmaXhDYWNoZVtyYXdOYW1lXTtcclxuICAgIGlmIChjYWNoZWQpIHtcclxuICAgICAgICByZXR1cm4gY2FjaGVkO1xyXG4gICAgfVxyXG4gICAgbGV0IG5hbWUgPSBjYW1lbGl6ZShyYXdOYW1lKTtcclxuICAgIGlmIChuYW1lICE9PSAnZmlsdGVyJyAmJiBuYW1lIGluIHN0eWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIChwcmVmaXhDYWNoZVtyYXdOYW1lXSA9IG5hbWUpO1xyXG4gICAgfVxyXG4gICAgbmFtZSA9IGNhcGl0YWxpemUobmFtZSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgcHJlZml4ZWQgPSBwcmVmaXhlc1tpXSArIG5hbWU7XHJcbiAgICAgICAgaWYgKHByZWZpeGVkIGluIHN0eWxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAocHJlZml4Q2FjaGVbcmF3TmFtZV0gPSBwcmVmaXhlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJhd05hbWU7XHJcbn1cblxuY29uc3QgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcclxuZnVuY3Rpb24gcGF0Y2hBdHRyKGVsLCBrZXksIHZhbHVlLCBpc1NWRykge1xyXG4gICAgaWYgKGlzU1ZHICYmIGtleS5zdGFydHNXaXRoKCd4bGluazonKSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleS5zbGljZSg2LCBrZXkubGVuZ3RoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBub3RlIHdlIGFyZSBvbmx5IGNoZWNraW5nIGJvb2xlYW4gYXR0cmlidXRlcyB0aGF0IGRvbid0IGhhdmUgYVxyXG4gICAgICAgIC8vIGNvcnJlc3BvbmRpbmcgZG9tIHByb3Agb2YgdGhlIHNhbWUgbmFtZSBoZXJlLlxyXG4gICAgICAgIGNvbnN0IGlzQm9vbGVhbiA9IGlzU3BlY2lhbEJvb2xlYW5BdHRyKGtleSk7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgKGlzQm9vbGVhbiAmJiB2YWx1ZSA9PT0gZmFsc2UpKSB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgaXNCb29sZWFuID8gJycgOiB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8vIF9fVU5TQUZFX19cclxuLy8gZnVuY3Rpb25zLiBUaGUgdXNlciBpcyByZXNwb25zaWJsZSBmb3IgdXNpbmcgdGhlbSB3aXRoIG9ubHkgdHJ1c3RlZCBjb250ZW50LlxyXG5mdW5jdGlvbiBwYXRjaERPTVByb3AoZWwsIGtleSwgdmFsdWUsIFxyXG4vLyB0aGUgZm9sbG93aW5nIGFyZ3MgYXJlIHBhc3NlZCBvbmx5IGR1ZSB0byBwb3RlbnRpYWwgaW5uZXJIVE1ML3RleHRDb250ZW50XHJcbi8vIG92ZXJyaWRpbmcgZXhpc3RpbmcgVk5vZGVzLCBpbiB3aGljaCBjYXNlIHRoZSBvbGQgdHJlZSBtdXN0IGJlIHByb3Blcmx5XHJcbi8vIHVubW91bnRlZC5cclxucHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pIHtcclxuICAgIGlmIChrZXkgPT09ICdpbm5lckhUTUwnIHx8IGtleSA9PT0gJ3RleHRDb250ZW50Jykge1xyXG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsW2tleV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsLnRhZ05hbWUgIT09ICdQUk9HUkVTUycpIHtcclxuICAgICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxyXG4gICAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWQuXHJcbiAgICAgICAgZWwuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcclxuICAgICAgICBpZiAoZWwudmFsdWUgIT09IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh2YWx1ZSA9PT0gJycgJiYgdHlwZW9mIGVsW2tleV0gPT09ICdib29sZWFuJykge1xyXG4gICAgICAgIC8vIGUuZy4gPHNlbGVjdCBtdWx0aXBsZT4gY29tcGlsZXMgdG8geyBtdWx0aXBsZTogJycgfVxyXG4gICAgICAgIGVsW2tleV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodmFsdWUgPT0gbnVsbCAmJiB0eXBlb2YgZWxba2V5XSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAvLyBlLmcuIDxkaXYgOmlkPVwibnVsbFwiPlxyXG4gICAgICAgIGVsW2tleV0gPSAnJztcclxuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIHNvbWUgcHJvcGVydGllcyBwZXJmb3JtIHZhbHVlIHZhbGlkYXRpb24gYW5kIHRocm93XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZWxba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBGYWlsZWQgc2V0dGluZyBwcm9wIFwiJHtrZXl9XCIgb24gPCR7ZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpfT46IGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGB2YWx1ZSAke3ZhbHVlfSBpcyBpbnZhbGlkLmAsIGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXHJcbmxldCBfZ2V0Tm93ID0gRGF0ZS5ub3c7XHJcbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXHJcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXHJcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxyXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXHJcbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICBfZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXApIHtcclxuICAgIC8vIGlmIHRoZSBsb3ctcmVzIHRpbWVzdGFtcCB3aGljaCBpcyBiaWdnZXIgdGhhbiB0aGUgZXZlbnQgdGltZXN0YW1wXHJcbiAgICAvLyAod2hpY2ggaXMgZXZhbHVhdGVkIEFGVEVSKSBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxyXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXJzIGFzIHdlbGwuXHJcbiAgICBfZ2V0Tm93ID0gKCkgPT4gcGVyZm9ybWFuY2Uubm93KCk7XHJcbn1cclxuLy8gVG8gYXZvaWQgdGhlIG92ZXJoZWFkIG9mIHJlcGVhdGVkbHkgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSwgd2UgY2FjaGVcclxuLy8gYW5kIHVzZSB0aGUgc2FtZSB0aW1lc3RhbXAgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnMgYXR0YWNoZWQgaW4gdGhlIHNhbWUgdGljay5cclxubGV0IGNhY2hlZE5vdyA9IDA7XHJcbmNvbnN0IHAgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuY29uc3QgcmVzZXQgPSAoKSA9PiB7XHJcbiAgICBjYWNoZWROb3cgPSAwO1xyXG59O1xyXG5jb25zdCBnZXROb3cgPSAoKSA9PiBjYWNoZWROb3cgfHwgKHAudGhlbihyZXNldCksIChjYWNoZWROb3cgPSBfZ2V0Tm93KCkpKTtcclxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWwsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XHJcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcclxufVxyXG5mdW5jdGlvbiBwYXRjaEV2ZW50KGVsLCByYXdOYW1lLCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaW5zdGFuY2UgPSBudWxsKSB7XHJcbiAgICAvLyB2ZWkgPSB2dWUgZXZlbnQgaW52b2tlcnNcclxuICAgIGNvbnN0IGludm9rZXJzID0gZWwuX3ZlaSB8fCAoZWwuX3ZlaSA9IHt9KTtcclxuICAgIGNvbnN0IGV4aXN0aW5nSW52b2tlciA9IGludm9rZXJzW3Jhd05hbWVdO1xyXG4gICAgaWYgKG5leHRWYWx1ZSAmJiBleGlzdGluZ0ludm9rZXIpIHtcclxuICAgICAgICAvLyBwYXRjaFxyXG4gICAgICAgIGV4aXN0aW5nSW52b2tlci52YWx1ZSA9IG5leHRWYWx1ZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IFtuYW1lLCBvcHRpb25zXSA9IHBhcnNlTmFtZShyYXdOYW1lKTtcclxuICAgICAgICBpZiAobmV4dFZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIGFkZFxyXG4gICAgICAgICAgICBjb25zdCBpbnZva2VyID0gKGludm9rZXJzW3Jhd05hbWVdID0gY3JlYXRlSW52b2tlcihuZXh0VmFsdWUsIGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGludm9rZXIsIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChleGlzdGluZ0ludm9rZXIpIHtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlXHJcbiAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGV4aXN0aW5nSW52b2tlciwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIGludm9rZXJzW3Jhd05hbWVdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBvcHRpb25zTW9kaWZpZXJSRSA9IC8oPzpPbmNlfFBhc3NpdmV8Q2FwdHVyZSkkLztcclxuZnVuY3Rpb24gcGFyc2VOYW1lKG5hbWUpIHtcclxuICAgIGxldCBvcHRpb25zO1xyXG4gICAgaWYgKG9wdGlvbnNNb2RpZmllclJFLnRlc3QobmFtZSkpIHtcclxuICAgICAgICBvcHRpb25zID0ge307XHJcbiAgICAgICAgbGV0IG07XHJcbiAgICAgICAgd2hpbGUgKChtID0gbmFtZS5tYXRjaChvcHRpb25zTW9kaWZpZXJSRSkpKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIG5hbWUubGVuZ3RoIC0gbVswXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICBvcHRpb25zW21bMF0udG9Mb3dlckNhc2UoKV0gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBbbmFtZS5zbGljZSgyKS50b0xvd2VyQ2FzZSgpLCBvcHRpb25zXTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbnZva2VyKGluaXRpYWxWYWx1ZSwgaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IGludm9rZXIgPSAoZSkgPT4ge1xyXG4gICAgICAgIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcclxuICAgICAgICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xyXG4gICAgICAgIC8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxyXG4gICAgICAgIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcclxuICAgICAgICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXHJcbiAgICAgICAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxyXG4gICAgICAgIGNvbnN0IHRpbWVTdGFtcCA9IGUudGltZVN0YW1wIHx8IF9nZXROb3coKTtcclxuICAgICAgICBpZiAodGltZVN0YW1wID49IGludm9rZXIuYXR0YWNoZWQgLSAxKSB7XHJcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKHBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKGUsIGludm9rZXIudmFsdWUpLCBpbnN0YW5jZSwgNSAvKiBOQVRJVkVfRVZFTlRfSEFORExFUiAqLywgW2VdKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaW52b2tlci52YWx1ZSA9IGluaXRpYWxWYWx1ZTtcclxuICAgIGludm9rZXIuYXR0YWNoZWQgPSBnZXROb3coKTtcclxuICAgIHJldHVybiBpbnZva2VyO1xyXG59XHJcbmZ1bmN0aW9uIHBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKGUsIHZhbHVlKSB7XHJcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBjb25zdCBvcmlnaW5hbFN0b3AgPSBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtcclxuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgb3JpZ2luYWxTdG9wLmNhbGwoZSk7XHJcbiAgICAgICAgICAgIGUuX3N0b3BwZWQgPSB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcChmbiA9PiAoZSkgPT4gIWUuX3N0b3BwZWQgJiYgZm4oZSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IG5hdGl2ZU9uUkUgPSAvXm9uW2Etel0vO1xyXG5jb25zdCBmb3JjZVBhdGNoUHJvcCA9IChfLCBrZXkpID0+IGtleSA9PT0gJ3ZhbHVlJztcclxuY29uc3QgcGF0Y2hQcm9wID0gKGVsLCBrZXksIHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBpc1NWRyA9IGZhbHNlLCBwcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbikgPT4ge1xyXG4gICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICAvLyBzcGVjaWFsXHJcbiAgICAgICAgY2FzZSAnY2xhc3MnOlxyXG4gICAgICAgICAgICBwYXRjaENsYXNzKGVsLCBuZXh0VmFsdWUsIGlzU1ZHKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnc3R5bGUnOlxyXG4gICAgICAgICAgICBwYXRjaFN0eWxlKGVsLCBwcmV2VmFsdWUsIG5leHRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGlmIChpc09uKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlnbm9yZSB2LW1vZGVsIGxpc3RlbmVyc1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoRXZlbnQoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIHBhcmVudENvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2hvdWxkU2V0QXNQcm9wKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRjaERPTVByb3AoZWwsIGtleSwgbmV4dFZhbHVlLCBwcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIDxpbnB1dCB2LW1vZGVsIHR5cGU9XCJjaGVja2JveFwiPiB3aXRoXHJcbiAgICAgICAgICAgICAgICAvLyA6dHJ1ZS12YWx1ZSAmIDpmYWxzZS12YWx1ZVxyXG4gICAgICAgICAgICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgZG9tIHByb3BlcnRpZXMgc2luY2Ugbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZVxyXG4gICAgICAgICAgICAgICAgLy8gc3RyaW5naWZpZWQuXHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAndHJ1ZS12YWx1ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbC5fdHJ1ZVZhbHVlID0gbmV4dFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5ID09PSAnZmFsc2UtdmFsdWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuX2ZhbHNlVmFsdWUgPSBuZXh0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwYXRjaEF0dHIoZWwsIGtleSwgbmV4dFZhbHVlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHNob3VsZFNldEFzUHJvcChlbCwga2V5LCB2YWx1ZSwgaXNTVkcpIHtcclxuICAgIGlmIChpc1NWRykge1xyXG4gICAgICAgIC8vIG1vc3Qga2V5cyBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGUgb24gc3ZnIGVsZW1lbnRzIHRvIHdvcmtcclxuICAgICAgICAvLyAuLi5leGNlcHQgaW5uZXJIVE1MXHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG9yIG5hdGl2ZSBvbmNsaWNrIHdpdGggZnVuY3Rpb24gdmFsdWVzXHJcbiAgICAgICAgaWYgKGtleSBpbiBlbCAmJiBuYXRpdmVPblJFLnRlc3Qoa2V5KSAmJiBpc0Z1bmN0aW9uKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gc3BlbGxjaGVjayBhbmQgZHJhZ2dhYmxlIGFyZSBudW1lcmF0ZWQgYXR0cnMsIGhvd2V2ZXIgdGhlaXJcclxuICAgIC8vIGNvcnJlc3BvbmRpbmcgRE9NIHByb3BlcnRpZXMgYXJlIGFjdHVhbGx5IGJvb2xlYW5zIC0gdGhpcyBsZWFkcyB0b1xyXG4gICAgLy8gc2V0dGluZyBpdCB3aXRoIGEgc3RyaW5nIFwiZmFsc2VcIiB2YWx1ZSBsZWFkaW5nIGl0IHRvIGJlIGNvZXJjZWQgdG9cclxuICAgIC8vIGB0cnVlYCwgc28gd2UgbmVlZCB0byBhbHdheXMgdHJlYXQgdGhlbSBhcyBhdHRyaWJ1dGVzLlxyXG4gICAgLy8gTm90ZSB0aGF0IGBjb250ZW50RWRpdGFibGVgIGRvZXNuJ3QgaGF2ZSB0aGlzIHByb2JsZW06IGl0cyBET01cclxuICAgIC8vIHByb3BlcnR5IGlzIGFsc28gZW51bWVyYXRlZCBzdHJpbmcgdmFsdWVzLlxyXG4gICAgaWYgKGtleSA9PT0gJ3NwZWxsY2hlY2snIHx8IGtleSA9PT0gJ2RyYWdnYWJsZScpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyAjMTc4NyBmb3JtIGFzIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGEgc3RyaW5nLCB3aGlsZSBpdCBhY2NlcHRzIGFuIEVsZW1lbnQgYXNcclxuICAgIC8vIGEgcHJvcFxyXG4gICAgaWYgKGtleSA9PT0gJ2Zvcm0nICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyAjMTUyNiA8aW5wdXQgbGlzdD4gbXVzdCBiZSBzZXQgYXMgYXR0cmlidXRlXHJcbiAgICBpZiAoa2V5ID09PSAnbGlzdCcgJiYgZWwudGFnTmFtZSA9PT0gJ0lOUFVUJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIG5hdGl2ZSBvbmNsaWNrIHdpdGggc3RyaW5nIHZhbHVlLCBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGVcclxuICAgIGlmIChuYXRpdmVPblJFLnRlc3Qoa2V5KSAmJiBpc1N0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ga2V5IGluIGVsO1xyXG59XG5cbmZ1bmN0aW9uIHVzZUNzc01vZHVsZShuYW1lID0gJyRzdHlsZScpIHtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGB1c2VDc3NNb2R1bGUgbXVzdCBiZSBjYWxsZWQgaW5zaWRlIHNldHVwKClgKTtcclxuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbW9kdWxlcyA9IGluc3RhbmNlLnR5cGUuX19jc3NNb2R1bGVzO1xyXG4gICAgICAgIGlmICghbW9kdWxlcykge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybihgQ3VycmVudCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIENTUyBtb2R1bGVzIGluamVjdGVkLmApO1xyXG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfT0JKO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtb2QgPSBtb2R1bGVzW25hbWVdO1xyXG4gICAgICAgIGlmICghbW9kKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQ3VycmVudCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIENTUyBtb2R1bGUgbmFtZWQgXCIke25hbWV9XCIuYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9PQko7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtb2Q7XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gdXNlQ3NzVmFycyhnZXR0ZXIsIHNjb3BlZCA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIGlmICghaW5zdGFuY2UpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2FybihgdXNlQ3NzVmFycyBpcyBjYWxsZWQgd2l0aG91dCBjdXJyZW50IGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UuYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcHJlZml4ID0gc2NvcGVkICYmIGluc3RhbmNlLnR5cGUuX19zY29wZUlkXHJcbiAgICAgICAgPyBgJHtpbnN0YW5jZS50eXBlLl9fc2NvcGVJZC5yZXBsYWNlKC9eZGF0YS12LS8sICcnKX0tYFxyXG4gICAgICAgIDogYGA7XHJcbiAgICBjb25zdCBzZXRWYXJzID0gKCkgPT4gc2V0VmFyc09uVk5vZGUoaW5zdGFuY2Uuc3ViVHJlZSwgZ2V0dGVyKGluc3RhbmNlLnByb3h5KSwgcHJlZml4KTtcclxuICAgIG9uTW91bnRlZCgoKSA9PiB3YXRjaEVmZmVjdChzZXRWYXJzKSk7XHJcbiAgICBvblVwZGF0ZWQoc2V0VmFycyk7XHJcbn1cclxuZnVuY3Rpb24gc2V0VmFyc09uVk5vZGUodm5vZGUsIHZhcnMsIHByZWZpeCkge1xyXG4gICAgaWYgKCB2bm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICBjb25zdCBzdXNwZW5zZSA9IHZub2RlLnN1c3BlbnNlO1xyXG4gICAgICAgIHZub2RlID0gc3VzcGVuc2UuYWN0aXZlQnJhbmNoO1xyXG4gICAgICAgIGlmIChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoICYmICFzdXNwZW5zZS5pc0h5ZHJhdGluZykge1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0VmFyc09uVk5vZGUoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCB2YXJzLCBwcmVmaXgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBkcmlsbCBkb3duIEhPQ3MgdW50aWwgaXQncyBhIG5vbi1jb21wb25lbnQgdm5vZGVcclxuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnQpIHtcclxuICAgICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudC5zdWJUcmVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyAmJiB2bm9kZS5lbCkge1xyXG4gICAgICAgIGNvbnN0IHN0eWxlID0gdm5vZGUuZWwuc3R5bGU7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFycykge1xyXG4gICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShgLS0ke3ByZWZpeH0ke2tleX1gLCB1bnJlZih2YXJzW2tleV0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh2bm9kZS50eXBlID09PSBGcmFnbWVudCkge1xyXG4gICAgICAgIHZub2RlLmNoaWxkcmVuLmZvckVhY2goYyA9PiBzZXRWYXJzT25WTm9kZShjLCB2YXJzLCBwcmVmaXgpKTtcclxuICAgIH1cclxufVxuXG5jb25zdCBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xyXG5jb25zdCBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcclxuLy8gRE9NIFRyYW5zaXRpb24gaXMgYSBoaWdoZXItb3JkZXItY29tcG9uZW50IGJhc2VkIG9uIHRoZSBwbGF0Zm9ybS1hZ25vc3RpY1xyXG4vLyBiYXNlIFRyYW5zaXRpb24gY29tcG9uZW50LCB3aXRoIERPTS1zcGVjaWZpYyBsb2dpYy5cclxuY29uc3QgVHJhbnNpdGlvbiA9IChwcm9wcywgeyBzbG90cyB9KSA9PiBoKEJhc2VUcmFuc2l0aW9uLCByZXNvbHZlVHJhbnNpdGlvblByb3BzKHByb3BzKSwgc2xvdHMpO1xyXG5UcmFuc2l0aW9uLmRpc3BsYXlOYW1lID0gJ1RyYW5zaXRpb24nO1xyXG5jb25zdCBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzID0ge1xyXG4gICAgbmFtZTogU3RyaW5nLFxyXG4gICAgdHlwZTogU3RyaW5nLFxyXG4gICAgY3NzOiB7XHJcbiAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICBkZWZhdWx0OiB0cnVlXHJcbiAgICB9LFxyXG4gICAgZHVyYXRpb246IFtTdHJpbmcsIE51bWJlciwgT2JqZWN0XSxcclxuICAgIGVudGVyRnJvbUNsYXNzOiBTdHJpbmcsXHJcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcclxuICAgIGFwcGVhckZyb21DbGFzczogU3RyaW5nLFxyXG4gICAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcclxuICAgIGxlYXZlRnJvbUNsYXNzOiBTdHJpbmcsXHJcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICBsZWF2ZVRvQ2xhc3M6IFN0cmluZ1xyXG59O1xyXG5jb25zdCBUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzID0gKFRyYW5zaXRpb24ucHJvcHMgPSAvKiNfX1BVUkVfXyovIGV4dGVuZCh7fSwgQmFzZVRyYW5zaXRpb24ucHJvcHMsIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMpKTtcclxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhyYXdQcm9wcykge1xyXG4gICAgbGV0IHsgbmFtZSA9ICd2JywgdHlwZSwgY3NzID0gdHJ1ZSwgZHVyYXRpb24sIGVudGVyRnJvbUNsYXNzID0gYCR7bmFtZX0tZW50ZXItZnJvbWAsIGVudGVyQWN0aXZlQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci1hY3RpdmVgLCBlbnRlclRvQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci10b2AsIGFwcGVhckZyb21DbGFzcyA9IGVudGVyRnJvbUNsYXNzLCBhcHBlYXJBY3RpdmVDbGFzcyA9IGVudGVyQWN0aXZlQ2xhc3MsIGFwcGVhclRvQ2xhc3MgPSBlbnRlclRvQ2xhc3MsIGxlYXZlRnJvbUNsYXNzID0gYCR7bmFtZX0tbGVhdmUtZnJvbWAsIGxlYXZlQWN0aXZlQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS1hY3RpdmVgLCBsZWF2ZVRvQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS10b2AgfSA9IHJhd1Byb3BzO1xyXG4gICAgY29uc3QgYmFzZVByb3BzID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdQcm9wcykge1xyXG4gICAgICAgIGlmICghKGtleSBpbiBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzKSkge1xyXG4gICAgICAgICAgICBiYXNlUHJvcHNba2V5XSA9IHJhd1Byb3BzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFjc3MpIHtcclxuICAgICAgICByZXR1cm4gYmFzZVByb3BzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZHVyYXRpb25zID0gbm9ybWFsaXplRHVyYXRpb24oZHVyYXRpb24pO1xyXG4gICAgY29uc3QgZW50ZXJEdXJhdGlvbiA9IGR1cmF0aW9ucyAmJiBkdXJhdGlvbnNbMF07XHJcbiAgICBjb25zdCBsZWF2ZUR1cmF0aW9uID0gZHVyYXRpb25zICYmIGR1cmF0aW9uc1sxXTtcclxuICAgIGNvbnN0IHsgb25CZWZvcmVFbnRlciwgb25FbnRlciwgb25FbnRlckNhbmNlbGxlZCwgb25MZWF2ZSwgb25MZWF2ZUNhbmNlbGxlZCwgb25CZWZvcmVBcHBlYXIgPSBvbkJlZm9yZUVudGVyLCBvbkFwcGVhciA9IG9uRW50ZXIsIG9uQXBwZWFyQ2FuY2VsbGVkID0gb25FbnRlckNhbmNlbGxlZCB9ID0gYmFzZVByb3BzO1xyXG4gICAgY29uc3QgZmluaXNoRW50ZXIgPSAoZWwsIGlzQXBwZWFyLCBkb25lKSA9PiB7XHJcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhclRvQ2xhc3MgOiBlbnRlclRvQ2xhc3MpO1xyXG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJBY3RpdmVDbGFzcyA6IGVudGVyQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgIGRvbmUgJiYgZG9uZSgpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGZpbmlzaExlYXZlID0gKGVsLCBkb25lKSA9PiB7XHJcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xyXG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgZG9uZSAmJiBkb25lKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbWFrZUVudGVySG9vayA9IChpc0FwcGVhcikgPT4ge1xyXG4gICAgICAgIHJldHVybiAoZWwsIGRvbmUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaG9vayA9IGlzQXBwZWFyID8gb25BcHBlYXIgOiBvbkVudGVyO1xyXG4gICAgICAgICAgICBjb25zdCByZXNvbHZlID0gKCkgPT4gZmluaXNoRW50ZXIoZWwsIGlzQXBwZWFyLCBkb25lKTtcclxuICAgICAgICAgICAgaG9vayAmJiBob29rKGVsLCByZXNvbHZlKTtcclxuICAgICAgICAgICAgbmV4dEZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJGcm9tQ2xhc3MgOiBlbnRlckZyb21DbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShob29rICYmIGhvb2subGVuZ3RoID4gMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW50ZXJEdXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIGVudGVyRHVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCByZXNvbHZlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZChiYXNlUHJvcHMsIHtcclxuICAgICAgICBvbkJlZm9yZUVudGVyKGVsKSB7XHJcbiAgICAgICAgICAgIG9uQmVmb3JlRW50ZXIgJiYgb25CZWZvcmVFbnRlcihlbCk7XHJcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgZW50ZXJBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgZW50ZXJGcm9tQ2xhc3MpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25CZWZvcmVBcHBlYXIoZWwpIHtcclxuICAgICAgICAgICAgb25CZWZvcmVBcHBlYXIgJiYgb25CZWZvcmVBcHBlYXIoZWwpO1xyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFwcGVhckFjdGl2ZUNsYXNzKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJGcm9tQ2xhc3MpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25FbnRlcjogbWFrZUVudGVySG9vayhmYWxzZSksXHJcbiAgICAgICAgb25BcHBlYXI6IG1ha2VFbnRlckhvb2sodHJ1ZSksXHJcbiAgICAgICAgb25MZWF2ZShlbCwgZG9uZSkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNvbHZlID0gKCkgPT4gZmluaXNoTGVhdmUoZWwsIGRvbmUpO1xyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcclxuICAgICAgICAgICAgbmV4dEZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEob25MZWF2ZSAmJiBvbkxlYXZlLmxlbmd0aCA+IDEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlYXZlRHVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBsZWF2ZUR1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgcmVzb2x2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgb25MZWF2ZSAmJiBvbkxlYXZlKGVsLCByZXNvbHZlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRW50ZXJDYW5jZWxsZWQoZWwpIHtcclxuICAgICAgICAgICAgZmluaXNoRW50ZXIoZWwsIGZhbHNlKTtcclxuICAgICAgICAgICAgb25FbnRlckNhbmNlbGxlZCAmJiBvbkVudGVyQ2FuY2VsbGVkKGVsKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQXBwZWFyQ2FuY2VsbGVkKGVsKSB7XHJcbiAgICAgICAgICAgIGZpbmlzaEVudGVyKGVsLCB0cnVlKTtcclxuICAgICAgICAgICAgb25BcHBlYXJDYW5jZWxsZWQgJiYgb25BcHBlYXJDYW5jZWxsZWQoZWwpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25MZWF2ZUNhbmNlbGxlZChlbCkge1xyXG4gICAgICAgICAgICBmaW5pc2hMZWF2ZShlbCk7XHJcbiAgICAgICAgICAgIG9uTGVhdmVDYW5jZWxsZWQgJiYgb25MZWF2ZUNhbmNlbGxlZChlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplRHVyYXRpb24oZHVyYXRpb24pIHtcclxuICAgIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdChkdXJhdGlvbikpIHtcclxuICAgICAgICByZXR1cm4gW051bWJlck9mKGR1cmF0aW9uLmVudGVyKSwgTnVtYmVyT2YoZHVyYXRpb24ubGVhdmUpXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG4gPSBOdW1iZXJPZihkdXJhdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIFtuLCBuXTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBOdW1iZXJPZih2YWwpIHtcclxuICAgIGNvbnN0IHJlcyA9IHRvTnVtYmVyKHZhbCk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKVxyXG4gICAgICAgIHZhbGlkYXRlRHVyYXRpb24ocmVzKTtcclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVEdXJhdGlvbih2YWwpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgIHdhcm4oYDx0cmFuc2l0aW9uPiBleHBsaWNpdCBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBgICtcclxuICAgICAgICAgICAgYGdvdCAke0pTT04uc3RyaW5naWZ5KHZhbCl9LmApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNOYU4odmFsKSkge1xyXG4gICAgICAgIHdhcm4oYDx0cmFuc2l0aW9uPiBleHBsaWNpdCBkdXJhdGlvbiBpcyBOYU4gLSBgICtcclxuICAgICAgICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGNscykge1xyXG4gICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgZWwuY2xhc3NMaXN0LmFkZChjKSk7XHJcbiAgICAoZWwuX3Z0YyB8fFxyXG4gICAgICAgIChlbC5fdnRjID0gbmV3IFNldCgpKSkuYWRkKGNscyk7XHJcbn1cclxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBjbHMpIHtcclxuICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGVsLmNsYXNzTGlzdC5yZW1vdmUoYykpO1xyXG4gICAgY29uc3QgeyBfdnRjIH0gPSBlbDtcclxuICAgIGlmIChfdnRjKSB7XHJcbiAgICAgICAgX3Z0Yy5kZWxldGUoY2xzKTtcclxuICAgICAgICBpZiAoIV92dGMuc2l6ZSkge1xyXG4gICAgICAgICAgICBlbC5fdnRjID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBuZXh0RnJhbWUoY2IpIHtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgZXhwZWN0ZWRUeXBlLCBjYikge1xyXG4gICAgY29uc3QgeyB0eXBlLCB0aW1lb3V0LCBwcm9wQ291bnQgfSA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xyXG4gICAgaWYgKCF0eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGNiKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBlbmRFdmVudCA9IHR5cGUgKyAnZW5kJztcclxuICAgIGxldCBlbmRlZCA9IDA7XHJcbiAgICBjb25zdCBlbmQgPSAoKSA9PiB7XHJcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgb25FbmQpO1xyXG4gICAgICAgIGNiKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3Qgb25FbmQgPSAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcclxuICAgICAgICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBlbmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcclxuICAgICAgICAgICAgZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgdGltZW91dCArIDEpO1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgb25FbmQpO1xyXG59XHJcbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpIHtcclxuICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcclxuICAgIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcclxuICAgIGNvbnN0IGdldFN0eWxlUHJvcGVydGllcyA9IChrZXkpID0+IChzdHlsZXNba2V5XSB8fCAnJykuc3BsaXQoJywgJyk7XHJcbiAgICBjb25zdCB0cmFuc2l0aW9uRGVsYXlzID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKFRSQU5TSVRJT04gKyAnRGVsYXknKTtcclxuICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbnMgPSBnZXRTdHlsZVByb3BlcnRpZXMoVFJBTlNJVElPTiArICdEdXJhdGlvbicpO1xyXG4gICAgY29uc3QgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uRGVsYXlzID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKEFOSU1BVElPTiArICdEZWxheScpO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uRHVyYXRpb25zID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKEFOSU1BVElPTiArICdEdXJhdGlvbicpO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xyXG4gICAgbGV0IHR5cGUgPSBudWxsO1xyXG4gICAgbGV0IHRpbWVvdXQgPSAwO1xyXG4gICAgbGV0IHByb3BDb3VudCA9IDA7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcclxuICAgICAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xyXG4gICAgICAgICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XHJcbiAgICAgICAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XHJcbiAgICAgICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBBTklNQVRJT047XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xyXG4gICAgICAgICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XHJcbiAgICAgICAgdHlwZSA9XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPiAwXHJcbiAgICAgICAgICAgICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxyXG4gICAgICAgICAgICAgICAgICAgID8gVFJBTlNJVElPTlxyXG4gICAgICAgICAgICAgICAgICAgIDogQU5JTUFUSU9OXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgcHJvcENvdW50ID0gdHlwZVxyXG4gICAgICAgICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cclxuICAgICAgICAgICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcclxuICAgICAgICAgICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxyXG4gICAgICAgICAgICA6IDA7XHJcbiAgICB9XHJcbiAgICBjb25zdCBoYXNUcmFuc2Zvcm0gPSB0eXBlID09PSBUUkFOU0lUSU9OICYmXHJcbiAgICAgICAgL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLy50ZXN0KHN0eWxlc1tUUkFOU0lUSU9OICsgJ1Byb3BlcnR5J10pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIHRpbWVvdXQsXHJcbiAgICAgICAgcHJvcENvdW50LFxyXG4gICAgICAgIGhhc1RyYW5zZm9ybVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBnZXRUaW1lb3V0KGRlbGF5cywgZHVyYXRpb25zKSB7XHJcbiAgICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoLi4uZHVyYXRpb25zLm1hcCgoZCwgaSkgPT4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKSkpO1xyXG59XHJcbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyXHJcbi8vIG51bWJlcnMgaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxyXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duXHJcbi8vIChpLmUuIGFjdGluZyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXHJcbmZ1bmN0aW9uIHRvTXMocykge1xyXG4gICAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwO1xyXG59XG5cbmZ1bmN0aW9uIHRvUmF3KG9ic2VydmVkKSB7XHJcbiAgICByZXR1cm4gKChvYnNlcnZlZCAmJiB0b1JhdyhvYnNlcnZlZFtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dKSkgfHwgb2JzZXJ2ZWQpO1xyXG59XG5cbmNvbnN0IHBvc2l0aW9uTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgbmV3UG9zaXRpb25NYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCBUcmFuc2l0aW9uR3JvdXBJbXBsID0ge1xyXG4gICAgbmFtZTogJ1RyYW5zaXRpb25Hcm91cCcsXHJcbiAgICBwcm9wczogLyojX19QVVJFX18qLyBleHRlbmQoe30sIFRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMsIHtcclxuICAgICAgICB0YWc6IFN0cmluZyxcclxuICAgICAgICBtb3ZlQ2xhc3M6IFN0cmluZ1xyXG4gICAgfSksXHJcbiAgICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IHVzZVRyYW5zaXRpb25TdGF0ZSgpO1xyXG4gICAgICAgIGxldCBwcmV2Q2hpbGRyZW47XHJcbiAgICAgICAgbGV0IGNoaWxkcmVuO1xyXG4gICAgICAgIG9uVXBkYXRlZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuIGlzIGd1YXJhbnRlZWQgdG8gZXhpc3QgYWZ0ZXIgaW5pdGlhbCByZW5kZXJcclxuICAgICAgICAgICAgaWYgKCFwcmV2Q2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbW92ZUNsYXNzID0gcHJvcHMubW92ZUNsYXNzIHx8IGAke3Byb3BzLm5hbWUgfHwgJ3YnfS1tb3ZlYDtcclxuICAgICAgICAgICAgaWYgKCFoYXNDU1NUcmFuc2Zvcm0ocHJldkNoaWxkcmVuWzBdLmVsLCBpbnN0YW5jZS52bm9kZS5lbCwgbW92ZUNsYXNzKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xyXG4gICAgICAgICAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cclxuICAgICAgICAgICAgcHJldkNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xyXG4gICAgICAgICAgICBwcmV2Q2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vdmVkQ2hpbGRyZW4gPSBwcmV2Q2hpbGRyZW4uZmlsdGVyKGFwcGx5VHJhbnNsYXRpb24pO1xyXG4gICAgICAgICAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cclxuICAgICAgICAgICAgZm9yY2VSZWZsb3coKTtcclxuICAgICAgICAgICAgbW92ZWRDaGlsZHJlbi5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSBjLmVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBlbC5zdHlsZTtcclxuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcclxuICAgICAgICAgICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2IgPSAoZWwuX21vdmVDYiA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgY2IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmF3UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNzc1RyYW5zaXRpb25Qcm9wcyA9IHJlc29sdmVUcmFuc2l0aW9uUHJvcHMocmF3UHJvcHMpO1xyXG4gICAgICAgICAgICBjb25zdCB0YWcgPSByYXdQcm9wcy50YWcgfHwgRnJhZ21lbnQ7XHJcbiAgICAgICAgICAgIHByZXZDaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgICAgICAgICBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQgPyBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oc2xvdHMuZGVmYXVsdCgpKSA6IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmtleSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKGNoaWxkLCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKGNoaWxkLCBjc3NUcmFuc2l0aW9uUHJvcHMsIHN0YXRlLCBpbnN0YW5jZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgPFRyYW5zaXRpb25Hcm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJldkNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gcHJldkNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhjaGlsZCwgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhjaGlsZCwgY3NzVHJhbnNpdGlvblByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbk1hcC5zZXQoY2hpbGQsIGNoaWxkLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodGFnLCBudWxsLCBjaGlsZHJlbik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufTtcclxuY29uc3QgVHJhbnNpdGlvbkdyb3VwID0gVHJhbnNpdGlvbkdyb3VwSW1wbDtcclxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMoYykge1xyXG4gICAgY29uc3QgZWwgPSBjLmVsO1xyXG4gICAgaWYgKGVsLl9tb3ZlQ2IpIHtcclxuICAgICAgICBlbC5fbW92ZUNiKCk7XHJcbiAgICB9XHJcbiAgICBpZiAoZWwuX2VudGVyQ2IpIHtcclxuICAgICAgICBlbC5fZW50ZXJDYigpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uKGMpIHtcclxuICAgIG5ld1Bvc2l0aW9uTWFwLnNldChjLCBjLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcclxufVxyXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uKGMpIHtcclxuICAgIGNvbnN0IG9sZFBvcyA9IHBvc2l0aW9uTWFwLmdldChjKTtcclxuICAgIGNvbnN0IG5ld1BvcyA9IG5ld1Bvc2l0aW9uTWFwLmdldChjKTtcclxuICAgIGNvbnN0IGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcclxuICAgIGNvbnN0IGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XHJcbiAgICBpZiAoZHggfHwgZHkpIHtcclxuICAgICAgICBjb25zdCBzID0gYy5lbC5zdHlsZTtcclxuICAgICAgICBzLnRyYW5zZm9ybSA9IHMud2Via2l0VHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke2R4fXB4LCR7ZHl9cHgpYDtcclxuICAgICAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XHJcbiAgICAgICAgcmV0dXJuIGM7XHJcbiAgICB9XHJcbn1cclxuLy8gdGhpcyBpcyBwdXQgaW4gYSBkZWRpY2F0ZWQgZnVuY3Rpb24gdG8gYXZvaWQgdGhlIGxpbmUgZnJvbSBiZWluZyB0cmVlc2hha2VuXHJcbmZ1bmN0aW9uIGZvcmNlUmVmbG93KCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xyXG59XHJcbmZ1bmN0aW9uIGhhc0NTU1RyYW5zZm9ybShlbCwgcm9vdCwgbW92ZUNsYXNzKSB7XHJcbiAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcclxuICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xyXG4gICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxyXG4gICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXHJcbiAgICAvLyBpcyBhcHBsaWVkLlxyXG4gICAgY29uc3QgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcclxuICAgIGlmIChlbC5fdnRjKSB7XHJcbiAgICAgICAgZWwuX3Z0Yy5mb3JFYWNoKGNscyA9PiB7XHJcbiAgICAgICAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGNsb25lLmNsYXNzTGlzdC5yZW1vdmUoYykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbW92ZUNsYXNzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgY2xvbmUuY2xhc3NMaXN0LmFkZChjKSk7XHJcbiAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgY29uc3QgY29udGFpbmVyID0gKHJvb3Qubm9kZVR5cGUgPT09IDFcclxuICAgICAgICA/IHJvb3RcclxuICAgICAgICA6IHJvb3QucGFyZW50Tm9kZSk7XHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvbmUpO1xyXG4gICAgY29uc3QgeyBoYXNUcmFuc2Zvcm0gfSA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcclxuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjbG9uZSk7XHJcbiAgICByZXR1cm4gaGFzVHJhbnNmb3JtO1xyXG59XG5cbmNvbnN0IGdldE1vZGVsQXNzaWduZXIgPSAodm5vZGUpID0+IHtcclxuICAgIGNvbnN0IGZuID0gdm5vZGUucHJvcHNbJ29uVXBkYXRlOm1vZGVsVmFsdWUnXTtcclxuICAgIHJldHVybiBpc0FycmF5KGZuKSA/IHZhbHVlID0+IGludm9rZUFycmF5Rm5zKGZuLCB2YWx1ZSkgOiBmbjtcclxufTtcclxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0KGUpIHtcclxuICAgIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZChlKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgIGlmICh0YXJnZXQuY29tcG9zaW5nKSB7XHJcbiAgICAgICAgdGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCAnaW5wdXQnKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0cmlnZ2VyKGVsLCB0eXBlKSB7XHJcbiAgICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcclxuICAgIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xyXG4gICAgZWwuZGlzcGF0Y2hFdmVudChlKTtcclxufVxyXG4vLyBXZSBhcmUgZXhwb3J0aW5nIHRoZSB2LW1vZGVsIHJ1bnRpbWUgZGlyZWN0bHkgYXMgdm5vZGUgaG9va3Mgc28gdGhhdCBpdCBjYW5cclxuLy8gYmUgdHJlZS1zaGFrZW4gaW4gY2FzZSB2LW1vZGVsIGlzIG5ldmVyIHVzZWQuXHJcbmNvbnN0IHZNb2RlbFRleHQgPSB7XHJcbiAgICBjcmVhdGVkKGVsLCB7IG1vZGlmaWVyczogeyBsYXp5LCB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgICAgICBjb25zdCBjYXN0VG9OdW1iZXIgPSBudW1iZXIgfHwgZWwudHlwZSA9PT0gJ251bWJlcic7XHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgbGF6eSA/ICdjaGFuZ2UnIDogJ2lucHV0JywgZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5jb21wb3NpbmcpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGxldCBkb21WYWx1ZSA9IGVsLnZhbHVlO1xyXG4gICAgICAgICAgICBpZiAodHJpbSkge1xyXG4gICAgICAgICAgICAgICAgZG9tVmFsdWUgPSBkb21WYWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2FzdFRvTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBkb21WYWx1ZSA9IHRvTnVtYmVyKGRvbVZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbC5fYXNzaWduKGRvbVZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodHJpbSkge1xyXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZWwudmFsdWUgPSBlbC52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWxhenkpIHtcclxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xyXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcclxuICAgICAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxyXG4gICAgICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXHJcbiAgICAgICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcclxuICAgICAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXHJcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgLy8gc2V0IHZhbHVlIG9uIG1vdW50ZWQgc28gaXQncyBhZnRlciBtaW4vbWF4IGZvciB0eXBlPVwicmFuZ2VcIlxyXG4gICAgbW91bnRlZChlbCwgeyB2YWx1ZSB9KSB7XHJcbiAgICAgICAgZWwudmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcclxuICAgIH0sXHJcbiAgICBiZWZvcmVVcGRhdGUoZWwsIHsgdmFsdWUsIG1vZGlmaWVyczogeyB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgICAgICAvLyBhdm9pZCBjbGVhcmluZyB1bnJlc29sdmVkIHRleHQuICMyMzAyXHJcbiAgICAgICAgaWYgKGVsLmNvbXBvc2luZylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCkge1xyXG4gICAgICAgICAgICBpZiAodHJpbSAmJiBlbC52YWx1ZS50cmltKCkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChudW1iZXIgfHwgZWwudHlwZSA9PT0gJ251bWJlcicpICYmIHRvTnVtYmVyKGVsLnZhbHVlKSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xyXG4gICAgICAgIGlmIChlbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgZWwudmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IHZNb2RlbENoZWNrYm94ID0ge1xyXG4gICAgY3JlYXRlZChlbCwgYmluZGluZywgdm5vZGUpIHtcclxuICAgICAgICBzZXRDaGVja2VkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsVmFsdWUgPSBlbC5fbW9kZWxWYWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudFZhbHVlID0gZ2V0VmFsdWUoZWwpO1xyXG4gICAgICAgICAgICBjb25zdCBjaGVja2VkID0gZWwuY2hlY2tlZDtcclxuICAgICAgICAgICAgY29uc3QgYXNzaWduID0gZWwuX2Fzc2lnbjtcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkobW9kZWxWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbG9vc2VJbmRleE9mKG1vZGVsVmFsdWUsIGVsZW1lbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZCA9IGluZGV4ICE9PSAtMTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkICYmICFmb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbihtb2RlbFZhbHVlLmNvbmNhdChlbGVtZW50VmFsdWUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFjaGVja2VkICYmIGZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBbLi4ubW9kZWxWYWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBhc3NpZ24oZmlsdGVyZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzU2V0KG1vZGVsVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVmFsdWUuYWRkKGVsZW1lbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbFZhbHVlLmRlbGV0ZShlbGVtZW50VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXNzaWduKGdldENoZWNrYm94VmFsdWUoZWwsIGNoZWNrZWQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZywgdm5vZGUpIHtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICAgICAgc2V0Q2hlY2tlZChlbCwgYmluZGluZywgdm5vZGUpO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBzZXRDaGVja2VkKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB2bm9kZSkge1xyXG4gICAgZWwuX21vZGVsVmFsdWUgPSB2YWx1ZTtcclxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKSA+IC0xO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTZXQodmFsdWUpKSB7XHJcbiAgICAgICAgZWwuY2hlY2tlZCA9IHZhbHVlLmhhcyh2bm9kZS5wcm9wcy52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcclxuICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgZ2V0Q2hlY2tib3hWYWx1ZShlbCwgdHJ1ZSkpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IHZNb2RlbFJhZGlvID0ge1xyXG4gICAgY3JlYXRlZChlbCwgeyB2YWx1ZSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSk7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGVsLl9hc3NpZ24oZ2V0VmFsdWUoZWwpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBiZWZvcmVVcGRhdGUoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0sIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcclxuICAgICAgICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IHZNb2RlbFNlbGVjdCA9IHtcclxuICAgIGNyZWF0ZWQoZWwsIHsgbW9kaWZpZXJzOiB7IG51bWJlciB9IH0sIHZub2RlKSB7XHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyXHJcbiAgICAgICAgICAgICAgICAuY2FsbChlbC5vcHRpb25zLCAobykgPT4gby5zZWxlY3RlZClcclxuICAgICAgICAgICAgICAgIC5tYXAoKG8pID0+IG51bWJlciA/IHRvTnVtYmVyKGdldFZhbHVlKG8pKSA6IGdldFZhbHVlKG8pKTtcclxuICAgICAgICAgICAgZWwuX2Fzc2lnbihlbC5tdWx0aXBsZSA/IHNlbGVjdGVkVmFsIDogc2VsZWN0ZWRWYWxbMF0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgIH0sXHJcbiAgICAvLyBzZXQgdmFsdWUgaW4gbW91bnRlZCAmIHVwZGF0ZWQgYmVjYXVzZSA8c2VsZWN0PiByZWxpZXMgb24gaXRzIGNoaWxkcmVuXHJcbiAgICAvLyA8b3B0aW9uPnMuXHJcbiAgICBtb3VudGVkKGVsLCB7IHZhbHVlIH0pIHtcclxuICAgICAgICBzZXRTZWxlY3RlZChlbCwgdmFsdWUpO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZVVwZGF0ZShlbCwgX2JpbmRpbmcsIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZWQoZWwsIHsgdmFsdWUgfSkge1xyXG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSk7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSkge1xyXG4gICAgY29uc3QgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xyXG4gICAgaWYgKGlzTXVsdGlwbGUgJiYgIWlzQXJyYXkodmFsdWUpICYmICFpc1NldCh2YWx1ZSkpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2FybihgPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPiBleHBlY3RzIGFuIEFycmF5IG9yIFNldCB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGAgK1xyXG4gICAgICAgICAgICAgICAgYGJ1dCBnb3QgJHtPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKX0uYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uVmFsdWUgPSBnZXRWYWx1ZShvcHRpb24pO1xyXG4gICAgICAgIGlmIChpc011bHRpcGxlKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBvcHRpb25WYWx1ZSkgPiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlLmhhcyhvcHRpb25WYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzTXVsdGlwbGUpIHtcclxuICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XHJcbiAgICB9XHJcbn1cclxuLy8gcmV0cmlldmUgcmF3IHZhbHVlIHNldCB2aWEgOnZhbHVlIGJpbmRpbmdzXHJcbmZ1bmN0aW9uIGdldFZhbHVlKGVsKSB7XHJcbiAgICByZXR1cm4gJ192YWx1ZScgaW4gZWwgPyBlbC5fdmFsdWUgOiBlbC52YWx1ZTtcclxufVxyXG4vLyByZXRyaWV2ZSByYXcgdmFsdWUgZm9yIHRydWUtdmFsdWUgYW5kIGZhbHNlLXZhbHVlIHNldCB2aWEgOnRydWUtdmFsdWUgb3IgOmZhbHNlLXZhbHVlIGJpbmRpbmdzXHJcbmZ1bmN0aW9uIGdldENoZWNrYm94VmFsdWUoZWwsIGNoZWNrZWQpIHtcclxuICAgIGNvbnN0IGtleSA9IGNoZWNrZWQgPyAnX3RydWVWYWx1ZScgOiAnX2ZhbHNlVmFsdWUnO1xyXG4gICAgcmV0dXJuIGtleSBpbiBlbCA/IGVsW2tleV0gOiBjaGVja2VkO1xyXG59XHJcbmNvbnN0IHZNb2RlbER5bmFtaWMgPSB7XHJcbiAgICBjcmVhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xyXG4gICAgICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBudWxsLCAnY3JlYXRlZCcpO1xyXG4gICAgfSxcclxuICAgIG1vdW50ZWQoZWwsIGJpbmRpbmcsIHZub2RlKSB7XHJcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIG51bGwsICdtb3VudGVkJyk7XHJcbiAgICB9LFxyXG4gICAgYmVmb3JlVXBkYXRlKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKSB7XHJcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSwgJ2JlZm9yZVVwZGF0ZScpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUpIHtcclxuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCAndXBkYXRlZCcpO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCBob29rKSB7XHJcbiAgICBsZXQgbW9kZWxUb1VzZTtcclxuICAgIHN3aXRjaCAoZWwudGFnTmFtZSkge1xyXG4gICAgICAgIGNhc2UgJ1NFTEVDVCc6XHJcbiAgICAgICAgICAgIG1vZGVsVG9Vc2UgPSB2TW9kZWxTZWxlY3Q7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ1RFWFRBUkVBJzpcclxuICAgICAgICAgICAgbW9kZWxUb1VzZSA9IHZNb2RlbFRleHQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHN3aXRjaCAodm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVG9Vc2UgPSB2TW9kZWxDaGVja2JveDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JhZGlvJzpcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbFRvVXNlID0gdk1vZGVsUmFkaW87XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVG9Vc2UgPSB2TW9kZWxUZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBmbiA9IG1vZGVsVG9Vc2VbaG9va107XHJcbiAgICBmbiAmJiBmbihlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSk7XHJcbn1cblxuY29uc3Qgc3lzdGVtTW9kaWZpZXJzID0gWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ107XHJcbmNvbnN0IG1vZGlmaWVyR3VhcmRzID0ge1xyXG4gICAgc3RvcDogZSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpLFxyXG4gICAgcHJldmVudDogZSA9PiBlLnByZXZlbnREZWZhdWx0KCksXHJcbiAgICBzZWxmOiBlID0+IGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQsXHJcbiAgICBjdHJsOiBlID0+ICFlLmN0cmxLZXksXHJcbiAgICBzaGlmdDogZSA9PiAhZS5zaGlmdEtleSxcclxuICAgIGFsdDogZSA9PiAhZS5hbHRLZXksXHJcbiAgICBtZXRhOiBlID0+ICFlLm1ldGFLZXksXHJcbiAgICBsZWZ0OiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDAsXHJcbiAgICBtaWRkbGU6IGUgPT4gJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMSxcclxuICAgIHJpZ2h0OiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDIsXHJcbiAgICBleGFjdDogKGUsIG1vZGlmaWVycykgPT4gc3lzdGVtTW9kaWZpZXJzLnNvbWUobSA9PiBlW2Ake219S2V5YF0gJiYgIW1vZGlmaWVycy5pbmNsdWRlcyhtKSlcclxufTtcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCB3aXRoTW9kaWZpZXJzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcclxuICAgIHJldHVybiAoZXZlbnQsIC4uLmFyZ3MpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZGlmaWVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBndWFyZCA9IG1vZGlmaWVyR3VhcmRzW21vZGlmaWVyc1tpXV07XHJcbiAgICAgICAgICAgIGlmIChndWFyZCAmJiBndWFyZChldmVudCwgbW9kaWZpZXJzKSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZuKGV2ZW50LCAuLi5hcmdzKTtcclxuICAgIH07XHJcbn07XHJcbi8vIEtlcHQgZm9yIDIueCBjb21wYXQuXHJcbi8vIE5vdGU6IElFMTEgY29tcGF0IGZvciBgc3BhY2ViYXJgIGFuZCBgZGVsYCBpcyByZW1vdmVkIGZvciBub3cuXHJcbmNvbnN0IGtleU5hbWVzID0ge1xyXG4gICAgZXNjOiAnZXNjYXBlJyxcclxuICAgIHNwYWNlOiAnICcsXHJcbiAgICB1cDogJ2Fycm93LXVwJyxcclxuICAgIGxlZnQ6ICdhcnJvdy1sZWZ0JyxcclxuICAgIHJpZ2h0OiAnYXJyb3ctcmlnaHQnLFxyXG4gICAgZG93bjogJ2Fycm93LWRvd24nLFxyXG4gICAgZGVsZXRlOiAnYmFja3NwYWNlJ1xyXG59O1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IHdpdGhLZXlzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcclxuICAgIHJldHVybiAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoISgna2V5JyBpbiBldmVudCkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBjb25zdCBldmVudEtleSA9IGh5cGhlbmF0ZShldmVudC5rZXkpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAvLyBOb25lIG9mIHRoZSBwcm92aWRlZCBrZXkgbW9kaWZpZXJzIG1hdGNoIHRoZSBjdXJyZW50IGV2ZW50IGtleVxyXG4gICAgICAgICFtb2RpZmllcnMuc29tZShrID0+IGsgPT09IGV2ZW50S2V5IHx8IGtleU5hbWVzW2tdID09PSBldmVudEtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZm4oZXZlbnQpO1xyXG4gICAgfTtcclxufTtcblxuY29uc3QgdlNob3cgPSB7XHJcbiAgICBiZWZvcmVNb3VudChlbCwgeyB2YWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xyXG4gICAgICAgIGVsLl92b2QgPSBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XHJcbiAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1vdW50ZWQoZWwsIHsgdmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcclxuICAgICAgICBpZiAodHJhbnNpdGlvbiAmJiB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLmVudGVyKGVsKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlZChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcclxuICAgICAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAodHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xyXG4gICAgICAgICAgICAgICAgc2V0RGlzcGxheShlbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmVudGVyKGVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24ubGVhdmUoZWwsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZXREaXNwbGF5KGVsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2V0RGlzcGxheShlbCwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBiZWZvcmVVbm1vdW50KGVsLCB7IHZhbHVlIH0pIHtcclxuICAgICAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHNldERpc3BsYXkoZWwsIHZhbHVlKSB7XHJcbiAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fdm9kIDogJ25vbmUnO1xyXG59XG5cbmNvbnN0IHJlbmRlcmVyT3B0aW9ucyA9IGV4dGVuZCh7IHBhdGNoUHJvcCwgZm9yY2VQYXRjaFByb3AgfSwgbm9kZU9wcyk7XHJcbi8vIGxhenkgY3JlYXRlIHRoZSByZW5kZXJlciAtIHRoaXMgbWFrZXMgY29yZSByZW5kZXJlciBsb2dpYyB0cmVlLXNoYWthYmxlXHJcbi8vIGluIGNhc2UgdGhlIHVzZXIgb25seSBpbXBvcnRzIHJlYWN0aXZpdHkgdXRpbGl0aWVzIGZyb20gVnVlLlxyXG5sZXQgcmVuZGVyZXI7XHJcbmxldCBlbmFibGVkSHlkcmF0aW9uID0gZmFsc2U7XHJcbmZ1bmN0aW9uIGVuc3VyZVJlbmRlcmVyKCkge1xyXG4gICAgcmV0dXJuIHJlbmRlcmVyIHx8IChyZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyKHJlbmRlcmVyT3B0aW9ucykpO1xyXG59XHJcbmZ1bmN0aW9uIGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkge1xyXG4gICAgcmVuZGVyZXIgPSBlbmFibGVkSHlkcmF0aW9uXHJcbiAgICAgICAgPyByZW5kZXJlclxyXG4gICAgICAgIDogY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIocmVuZGVyZXJPcHRpb25zKTtcclxuICAgIGVuYWJsZWRIeWRyYXRpb24gPSB0cnVlO1xyXG4gICAgcmV0dXJuIHJlbmRlcmVyO1xyXG59XHJcbi8vIHVzZSBleHBsaWNpdCB0eXBlIGNhc3RzIGhlcmUgdG8gYXZvaWQgaW1wb3J0KCkgY2FsbHMgaW4gcm9sbGVkLXVwIGQudHNcclxuY29uc3QgcmVuZGVyID0gKCguLi5hcmdzKSA9PiB7XHJcbiAgICBlbnN1cmVSZW5kZXJlcigpLnJlbmRlciguLi5hcmdzKTtcclxufSk7XHJcbmNvbnN0IGh5ZHJhdGUgPSAoKC4uLmFyZ3MpID0+IHtcclxuICAgIGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkuaHlkcmF0ZSguLi5hcmdzKTtcclxufSk7XHJcbmNvbnN0IGNyZWF0ZUFwcCA9ICgoLi4uYXJncykgPT4ge1xyXG4gICAgY29uc3QgYXBwID0gZW5zdXJlUmVuZGVyZXIoKS5jcmVhdGVBcHAoLi4uYXJncyk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgaW5qZWN0TmF0aXZlVGFnQ2hlY2soYXBwKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgbW91bnQgfSA9IGFwcDtcclxuICAgIGFwcC5tb3VudCA9IChjb250YWluZXJPclNlbGVjdG9yKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lck9yU2VsZWN0b3IpO1xyXG4gICAgICAgIGlmICghY29udGFpbmVyKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gYXBwLl9jb21wb25lbnQ7XHJcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGNvbXBvbmVudCkgJiYgIWNvbXBvbmVudC5yZW5kZXIgJiYgIWNvbXBvbmVudC50ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICBjb21wb25lbnQudGVtcGxhdGUgPSBjb250YWluZXIuaW5uZXJIVE1MO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjbGVhciBjb250ZW50IGJlZm9yZSBtb3VudGluZ1xyXG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBjb25zdCBwcm94eSA9IG1vdW50KGNvbnRhaW5lcik7XHJcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgndi1jbG9haycpO1xyXG4gICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtdi1hcHAnLCAnJyk7XHJcbiAgICAgICAgcmV0dXJuIHByb3h5O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBhcHA7XHJcbn0pO1xyXG5jb25zdCBjcmVhdGVTU1JBcHAgPSAoKC4uLmFyZ3MpID0+IHtcclxuICAgIGNvbnN0IGFwcCA9IGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkuY3JlYXRlQXBwKC4uLmFyZ3MpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGluamVjdE5hdGl2ZVRhZ0NoZWNrKGFwcCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IG1vdW50IH0gPSBhcHA7XHJcbiAgICBhcHAubW91bnQgPSAoY29udGFpbmVyT3JTZWxlY3RvcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXJPclNlbGVjdG9yKTtcclxuICAgICAgICBpZiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtb3VudChjb250YWluZXIsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gYXBwO1xyXG59KTtcclxuZnVuY3Rpb24gaW5qZWN0TmF0aXZlVGFnQ2hlY2soYXBwKSB7XHJcbiAgICAvLyBJbmplY3QgYGlzTmF0aXZlVGFnYFxyXG4gICAgLy8gdGhpcyBpcyB1c2VkIGZvciBjb21wb25lbnQgbmFtZSB2YWxpZGF0aW9uIChkZXYgb25seSlcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLCAnaXNOYXRpdmVUYWcnLCB7XHJcbiAgICAgICAgdmFsdWU6ICh0YWcpID0+IGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHVGFnKHRhZyksXHJcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlXHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyKSB7XHJcbiAgICBpZiAoaXNTdHJpbmcoY29udGFpbmVyKSkge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFyZXMpIHtcclxuICAgICAgICAgICAgd2FybihgRmFpbGVkIHRvIG1vdW50IGFwcDogbW91bnQgdGFyZ2V0IHNlbGVjdG9yIHJldHVybmVkIG51bGwuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29udGFpbmVyO1xyXG59XG5cbmV4cG9ydCB7IFRyYW5zaXRpb24sIFRyYW5zaXRpb25Hcm91cCwgY3JlYXRlQXBwLCBjcmVhdGVTU1JBcHAsIGh5ZHJhdGUsIHJlbmRlciwgdXNlQ3NzTW9kdWxlLCB1c2VDc3NWYXJzLCB2TW9kZWxDaGVja2JveCwgdk1vZGVsRHluYW1pYywgdk1vZGVsUmFkaW8sIHZNb2RlbFNlbGVjdCwgdk1vZGVsVGV4dCwgdlNob3csIHdpdGhLZXlzLCB3aXRoTW9kaWZpZXJzIH07XG4iLCIvKipcclxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XHJcbiAqIGlzIGluIHRoYXQgbWFwLlxyXG4gKiBJTVBPUlRBTlQ6IGFsbCBjYWxscyBvZiB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgcHJlZml4ZWQgd2l0aFxyXG4gKiBcXC9cXCojXFxfXFxfUFVSRVxcX1xcX1xcKlxcL1xyXG4gKiBTbyB0aGF0IHJvbGx1cCBjYW4gdHJlZS1zaGFrZSB0aGVtIGlmIG5lY2Vzc2FyeS5cclxuICovXHJcbmZ1bmN0aW9uIG1ha2VNYXAoc3RyLCBleHBlY3RzTG93ZXJDYXNlKSB7XHJcbiAgICBjb25zdCBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgY29uc3QgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBleHBlY3RzTG93ZXJDYXNlID8gdmFsID0+ICEhbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXSA6IHZhbCA9PiAhIW1hcFt2YWxdO1xyXG59XG5cbi8vIFBhdGNoIGZsYWdzIGFyZSBvcHRpbWl6YXRpb24gaGludHMgZ2VuZXJhdGVkIGJ5IHRoZSBjb21waWxlci5cclxuLy8gd2hlbiBhIGJsb2NrIHdpdGggZHluYW1pY0NoaWxkcmVuIGlzIGVuY291bnRlcmVkIGR1cmluZyBkaWZmLCB0aGUgYWxnb3JpdGhtXHJcbi8vIGVudGVycyBcIm9wdGltaXplZCBtb2RlXCIuIEluIHRoaXMgbW9kZSwgd2Uga25vdyB0aGF0IHRoZSB2ZG9tIGlzIHByb2R1Y2VkIGJ5XHJcbi8vIGEgcmVuZGVyIGZ1bmN0aW9uIGdlbmVyYXRlZCBieSB0aGUgY29tcGlsZXIsIHNvIHRoZSBhbGdvcml0aG0gb25seSBuZWVkcyB0b1xyXG4vLyBoYW5kbGUgdXBkYXRlcyBleHBsaWNpdGx5IG1hcmtlZCBieSB0aGVzZSBwYXRjaCBmbGFncy5cclxuLy8gZGV2IG9ubHkgZmxhZyAtPiBuYW1lIG1hcHBpbmdcclxuY29uc3QgUGF0Y2hGbGFnTmFtZXMgPSB7XHJcbiAgICBbMSAvKiBURVhUICovXTogYFRFWFRgLFxyXG4gICAgWzIgLyogQ0xBU1MgKi9dOiBgQ0xBU1NgLFxyXG4gICAgWzQgLyogU1RZTEUgKi9dOiBgU1RZTEVgLFxyXG4gICAgWzggLyogUFJPUFMgKi9dOiBgUFJPUFNgLFxyXG4gICAgWzE2IC8qIEZVTExfUFJPUFMgKi9dOiBgRlVMTF9QUk9QU2AsXHJcbiAgICBbMzIgLyogSFlEUkFURV9FVkVOVFMgKi9dOiBgSFlEUkFURV9FVkVOVFNgLFxyXG4gICAgWzY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqL106IGBTVEFCTEVfRlJBR01FTlRgLFxyXG4gICAgWzEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqL106IGBLRVlFRF9GUkFHTUVOVGAsXHJcbiAgICBbMjU2IC8qIFVOS0VZRURfRlJBR01FTlQgKi9dOiBgVU5LRVlFRF9GUkFHTUVOVGAsXHJcbiAgICBbMTAyNCAvKiBEWU5BTUlDX1NMT1RTICovXTogYERZTkFNSUNfU0xPVFNgLFxyXG4gICAgWzUxMiAvKiBORUVEX1BBVENIICovXTogYE5FRURfUEFUQ0hgLFxyXG4gICAgWy0xIC8qIEhPSVNURUQgKi9dOiBgSE9JU1RFRGAsXHJcbiAgICBbLTIgLyogQkFJTCAqL106IGBCQUlMYFxyXG59O1xuXG5jb25zdCBHTE9CQUxTX1dISVRFX0xJU1RFRCA9ICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLHBhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLCcgK1xyXG4gICAgJ2RlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LE1hdGgsTnVtYmVyLERhdGUsQXJyYXksJyArXHJcbiAgICAnT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCc7XHJcbmNvbnN0IGlzR2xvYmFsbHlXaGl0ZWxpc3RlZCA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChHTE9CQUxTX1dISVRFX0xJU1RFRCk7XG5cbmNvbnN0IHJhbmdlID0gMjtcclxuZnVuY3Rpb24gZ2VuZXJhdGVDb2RlRnJhbWUoc291cmNlLCBzdGFydCA9IDAsIGVuZCA9IHNvdXJjZS5sZW5ndGgpIHtcclxuICAgIGNvbnN0IGxpbmVzID0gc291cmNlLnNwbGl0KC9cXHI/XFxuLyk7XHJcbiAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgY29uc3QgcmVzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY291bnQgKz0gbGluZXNbaV0ubGVuZ3RoICsgMTtcclxuICAgICAgICBpZiAoY291bnQgPj0gc3RhcnQpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgLSByYW5nZTsgaiA8PSBpICsgcmFuZ2UgfHwgZW5kID4gY291bnQ7IGorKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGogPCAwIHx8IGogPj0gbGluZXMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IGogKyAxO1xyXG4gICAgICAgICAgICAgICAgcmVzLnB1c2goYCR7bGluZX0keycgJy5yZXBlYXQoTWF0aC5tYXgoMyAtIFN0cmluZyhsaW5lKS5sZW5ndGgsIDApKX18ICAke2xpbmVzW2pdfWApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGluZUxlbmd0aCA9IGxpbmVzW2pdLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGlmIChqID09PSBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHVzaCB1bmRlcmxpbmVcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWQgPSBzdGFydCAtIChjb3VudCAtIGxpbmVMZW5ndGgpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heCgxLCBlbmQgPiBjb3VudCA/IGxpbmVMZW5ndGggLSBwYWQgOiBlbmQgLSBzdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goYCAgIHwgIGAgKyAnICcucmVwZWF0KHBhZCkgKyAnXicucmVwZWF0KGxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaiA+IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kID4gY291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goYCAgIHwgIGAgKyAnXicucmVwZWF0KGxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb3VudCArPSBsaW5lTGVuZ3RoICsgMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzLmpvaW4oJ1xcbicpO1xyXG59XG5cbi8qKlxyXG4gKiBPbiB0aGUgY2xpZW50IHdlIG9ubHkgbmVlZCB0byBvZmZlciBzcGVjaWFsIGNhc2VzIGZvciBib29sZWFuIGF0dHJpYnV0ZXMgdGhhdFxyXG4gKiBoYXZlIGRpZmZlcmVudCBuYW1lcyBmcm9tIHRoZWlyIGNvcnJlc3BvbmRpbmcgZG9tIHByb3BlcnRpZXM6XHJcbiAqIC0gaXRlbXNjb3BlIC0+IE4vQVxyXG4gKiAtIGFsbG93ZnVsbHNjcmVlbiAtPiBhbGxvd0Z1bGxzY3JlZW5cclxuICogLSBmb3Jtbm92YWxpZGF0ZSAtPiBmb3JtTm9WYWxpZGF0ZVxyXG4gKiAtIGlzbWFwIC0+IGlzTWFwXHJcbiAqIC0gbm9tb2R1bGUgLT4gbm9Nb2R1bGVcclxuICogLSBub3ZhbGlkYXRlIC0+IG5vVmFsaWRhdGVcclxuICogLSByZWFkb25seSAtPiByZWFkT25seVxyXG4gKi9cclxuY29uc3Qgc3BlY2lhbEJvb2xlYW5BdHRycyA9IGBpdGVtc2NvcGUsYWxsb3dmdWxsc2NyZWVuLGZvcm1ub3ZhbGlkYXRlLGlzbWFwLG5vbW9kdWxlLG5vdmFsaWRhdGUscmVhZG9ubHlgO1xyXG5jb25zdCBpc1NwZWNpYWxCb29sZWFuQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzKTtcclxuLyoqXHJcbiAqIFRoZSBmdWxsIGxpc3QgaXMgbmVlZGVkIGR1cmluZyBTU1IgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBpbml0aWFsIG1hcmt1cC5cclxuICovXHJcbmNvbnN0IGlzQm9vbGVhbkF0dHIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoc3BlY2lhbEJvb2xlYW5BdHRycyArXHJcbiAgICBgLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjb250cm9scyxkZWZhdWx0LGRlZmVyLGRpc2FibGVkLGhpZGRlbixgICtcclxuICAgIGBsb29wLG9wZW4scmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLGAgK1xyXG4gICAgYGNoZWNrZWQsbXV0ZWQsbXVsdGlwbGUsc2VsZWN0ZWRgKTtcclxuY29uc3QgdW5zYWZlQXR0ckNoYXJSRSA9IC9bPi89XCInXFx1MDAwOVxcdTAwMGFcXHUwMDBjXFx1MDAyMF0vO1xyXG5jb25zdCBhdHRyVmFsaWRhdGlvbkNhY2hlID0ge307XHJcbmZ1bmN0aW9uIGlzU1NSU2FmZUF0dHJOYW1lKG5hbWUpIHtcclxuICAgIGlmIChhdHRyVmFsaWRhdGlvbkNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGF0dHJWYWxpZGF0aW9uQ2FjaGVbbmFtZV07XHJcbiAgICB9XHJcbiAgICBjb25zdCBpc1Vuc2FmZSA9IHVuc2FmZUF0dHJDaGFyUkUudGVzdChuYW1lKTtcclxuICAgIGlmIChpc1Vuc2FmZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYHVuc2FmZSBhdHRyaWJ1dGUgbmFtZTogJHtuYW1lfWApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChhdHRyVmFsaWRhdGlvbkNhY2hlW25hbWVdID0gIWlzVW5zYWZlKTtcclxufVxyXG5jb25zdCBwcm9wc1RvQXR0ck1hcCA9IHtcclxuICAgIGFjY2VwdENoYXJzZXQ6ICdhY2NlcHQtY2hhcnNldCcsXHJcbiAgICBjbGFzc05hbWU6ICdjbGFzcycsXHJcbiAgICBodG1sRm9yOiAnZm9yJyxcclxuICAgIGh0dHBFcXVpdjogJ2h0dHAtZXF1aXYnXHJcbn07XHJcbi8qKlxyXG4gKiBDU1MgcHJvcGVydGllcyB0aGF0IGFjY2VwdCBwbGFpbiBudW1iZXJzXHJcbiAqL1xyXG5jb25zdCBpc05vVW5pdE51bWVyaWNTdHlsZVByb3AgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsYm9yZGVyLWltYWdlLW91dHNldCxib3JkZXItaW1hZ2Utc2xpY2UsYCArXHJcbiAgICBgYm9yZGVyLWltYWdlLXdpZHRoLGJveC1mbGV4LGJveC1mbGV4LWdyb3VwLGJveC1vcmRpbmFsLWdyb3VwLGNvbHVtbi1jb3VudCxgICtcclxuICAgIGBjb2x1bW5zLGZsZXgsZmxleC1ncm93LGZsZXgtcG9zaXRpdmUsZmxleC1zaHJpbmssZmxleC1uZWdhdGl2ZSxmbGV4LW9yZGVyLGAgK1xyXG4gICAgYGdyaWQtcm93LGdyaWQtcm93LWVuZCxncmlkLXJvdy1zcGFuLGdyaWQtcm93LXN0YXJ0LGdyaWQtY29sdW1uLGAgK1xyXG4gICAgYGdyaWQtY29sdW1uLWVuZCxncmlkLWNvbHVtbi1zcGFuLGdyaWQtY29sdW1uLXN0YXJ0LGZvbnQtd2VpZ2h0LGxpbmUtY2xhbXAsYCArXHJcbiAgICBgbGluZS1oZWlnaHQsb3BhY2l0eSxvcmRlcixvcnBoYW5zLHRhYi1zaXplLHdpZG93cyx6LWluZGV4LHpvb20sYCArXHJcbiAgICAvLyBTVkdcclxuICAgIGBmaWxsLW9wYWNpdHksZmxvb2Qtb3BhY2l0eSxzdG9wLW9wYWNpdHksc3Ryb2tlLWRhc2hhcnJheSxzdHJva2UtZGFzaG9mZnNldCxgICtcclxuICAgIGBzdHJva2UtbWl0ZXJsaW1pdCxzdHJva2Utb3BhY2l0eSxzdHJva2Utd2lkdGhgKTtcclxuLyoqXHJcbiAqIEtub3duIGF0dHJpYnV0ZXMsIHRoaXMgaXMgdXNlZCBmb3Igc3RyaW5naWZpY2F0aW9uIG9mIHJ1bnRpbWUgc3RhdGljIG5vZGVzXHJcbiAqIHNvIHRoYXQgd2UgZG9uJ3Qgc3RyaW5naWZ5IGJpbmRpbmdzIHRoYXQgY2Fubm90IGJlIHNldCBmcm9tIEhUTUwuXHJcbiAqIERvbid0IGFsc28gZm9yZ2V0IHRvIGFsbG93IGBkYXRhLSpgIGFuZCBgYXJpYS0qYCFcclxuICogR2VuZXJhdGVkIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9BdHRyaWJ1dGVzXHJcbiAqL1xyXG5jb25zdCBpc0tub3duQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChgYWNjZXB0LGFjY2VwdC1jaGFyc2V0LGFjY2Vzc2tleSxhY3Rpb24sYWxpZ24sYWxsb3csYWx0LGFzeW5jLGAgK1xyXG4gICAgYGF1dG9jYXBpdGFsaXplLGF1dG9jb21wbGV0ZSxhdXRvZm9jdXMsYXV0b3BsYXksYmFja2dyb3VuZCxiZ2NvbG9yLGAgK1xyXG4gICAgYGJvcmRlcixidWZmZXJlZCxjYXB0dXJlLGNoYWxsZW5nZSxjaGFyc2V0LGNoZWNrZWQsY2l0ZSxjbGFzcyxjb2RlLGAgK1xyXG4gICAgYGNvZGViYXNlLGNvbG9yLGNvbHMsY29sc3Bhbixjb250ZW50LGNvbnRlbnRlZGl0YWJsZSxjb250ZXh0bWVudSxjb250cm9scyxgICtcclxuICAgIGBjb29yZHMsY3Jvc3NvcmlnaW4sY3NwLGRhdGEsZGF0ZXRpbWUsZGVjb2RpbmcsZGVmYXVsdCxkZWZlcixkaXIsZGlybmFtZSxgICtcclxuICAgIGBkaXNhYmxlZCxkb3dubG9hZCxkcmFnZ2FibGUsZHJvcHpvbmUsZW5jdHlwZSxlbnRlcmtleWhpbnQsZm9yLGZvcm0sYCArXHJcbiAgICBgZm9ybWFjdGlvbixmb3JtZW5jdHlwZSxmb3JtbWV0aG9kLGZvcm1ub3ZhbGlkYXRlLGZvcm10YXJnZXQsaGVhZGVycyxgICtcclxuICAgIGBoZWlnaHQsaGlkZGVuLGhpZ2gsaHJlZixocmVmbGFuZyxodHRwLWVxdWl2LGljb24saWQsaW1wb3J0YW5jZSxpbnRlZ3JpdHksYCArXHJcbiAgICBgaXNtYXAsaXRlbXByb3Asa2V5dHlwZSxraW5kLGxhYmVsLGxhbmcsbGFuZ3VhZ2UsbG9hZGluZyxsaXN0LGxvb3AsbG93LGAgK1xyXG4gICAgYG1hbmlmZXN0LG1heCxtYXhsZW5ndGgsbWlubGVuZ3RoLG1lZGlhLG1pbixtdWx0aXBsZSxtdXRlZCxuYW1lLG5vdmFsaWRhdGUsYCArXHJcbiAgICBgb3BlbixvcHRpbXVtLHBhdHRlcm4scGluZyxwbGFjZWhvbGRlcixwb3N0ZXIscHJlbG9hZCxyYWRpb2dyb3VwLHJlYWRvbmx5LGAgK1xyXG4gICAgYHJlZmVycmVycG9saWN5LHJlbCxyZXF1aXJlZCxyZXZlcnNlZCxyb3dzLHJvd3NwYW4sc2FuZGJveCxzY29wZSxzY29wZWQsYCArXHJcbiAgICBgc2VsZWN0ZWQsc2hhcGUsc2l6ZSxzaXplcyxzbG90LHNwYW4sc3BlbGxjaGVjayxzcmMsc3JjZG9jLHNyY2xhbmcsc3Jjc2V0LGAgK1xyXG4gICAgYHN0YXJ0LHN0ZXAsc3R5bGUsc3VtbWFyeSx0YWJpbmRleCx0YXJnZXQsdGl0bGUsdHJhbnNsYXRlLHR5cGUsdXNlbWFwLGAgK1xyXG4gICAgYHZhbHVlLHdpZHRoLHdyYXBgKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGUodmFsdWUpIHtcclxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHZhbHVlW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU3R5bGUoaXNTdHJpbmcoaXRlbSkgPyBwYXJzZVN0cmluZ1N0eWxlKGl0ZW0pIDogaXRlbSk7XHJcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBub3JtYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSBub3JtYWxpemVkW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5jb25zdCBsaXN0RGVsaW1pdGVyUkUgPSAvOyg/IVteKF0qXFwpKS9nO1xyXG5jb25zdCBwcm9wZXJ0eURlbGltaXRlclJFID0gLzooLispLztcclxuZnVuY3Rpb24gcGFyc2VTdHJpbmdTdHlsZShjc3NUZXh0KSB7XHJcbiAgICBjb25zdCByZXQgPSB7fTtcclxuICAgIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlclJFKS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGlmIChpdGVtKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXJSRSk7XHJcbiAgICAgICAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXRbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuZnVuY3Rpb24gc3RyaW5naWZ5U3R5bGUoc3R5bGVzKSB7XHJcbiAgICBsZXQgcmV0ID0gJyc7XHJcbiAgICBpZiAoIXN0eWxlcykge1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzdHlsZXMpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHN0eWxlc1trZXldO1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBrZXkuc3RhcnRzV2l0aChgLS1gKSA/IGtleSA6IGh5cGhlbmF0ZShrZXkpO1xyXG4gICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkgfHxcclxuICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOb1VuaXROdW1lcmljU3R5bGVQcm9wKG5vcm1hbGl6ZWRLZXkpKSkge1xyXG4gICAgICAgICAgICAvLyBvbmx5IHJlbmRlciB2YWxpZCB2YWx1ZXNcclxuICAgICAgICAgICAgcmV0ICs9IGAke25vcm1hbGl6ZWRLZXl9OiR7dmFsdWV9O2A7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVDbGFzcyh2YWx1ZSkge1xyXG4gICAgbGV0IHJlcyA9ICcnO1xyXG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgIHJlcyA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlcyArPSBub3JtYWxpemVDbGFzcyh2YWx1ZVtpXSkgKyAnICc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZVtuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgcmVzICs9IG5hbWUgKyAnICc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzLnRyaW0oKTtcclxufVxuXG4vLyBUaGVzZSB0YWcgY29uZmlncyBhcmUgc2hhcmVkIGJldHdlZW4gY29tcGlsZXItZG9tIGFuZCBydW50aW1lLWRvbSwgc28gdGhleVxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnRcclxuY29uc3QgSFRNTF9UQUdTID0gJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLGFkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsJyArXHJcbiAgICAnaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbixkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbiwnICtcclxuICAgICdmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCxhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSwnICtcclxuICAgICdkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnkscyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsJyArXHJcbiAgICAndGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSwnICtcclxuICAgICdjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsJyArXHJcbiAgICAndGgsdHIsYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLCcgK1xyXG4gICAgJ29wdGlvbixvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLGRldGFpbHMsZGlhbG9nLG1lbnUsJyArXHJcbiAgICAnc3VtbWFyeSx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCc7XHJcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9FbGVtZW50XHJcbmNvbnN0IFNWR19UQUdTID0gJ3N2ZyxhbmltYXRlLGFuaW1hdGVNb3Rpb24sYW5pbWF0ZVRyYW5zZm9ybSxjaXJjbGUsY2xpcFBhdGgsY29sb3ItcHJvZmlsZSwnICtcclxuICAgICdkZWZzLGRlc2MsZGlzY2FyZCxlbGxpcHNlLGZlQmxlbmQsZmVDb2xvck1hdHJpeCxmZUNvbXBvbmVudFRyYW5zZmVyLCcgK1xyXG4gICAgJ2ZlQ29tcG9zaXRlLGZlQ29udm9sdmVNYXRyaXgsZmVEaWZmdXNlTGlnaHRpbmcsZmVEaXNwbGFjZW1lbnRNYXAsJyArXHJcbiAgICAnZmVEaXN0YW5jZUxpZ2h0LGZlRHJvcFNoYWRvdyxmZUZsb29kLGZlRnVuY0EsZmVGdW5jQixmZUZ1bmNHLGZlRnVuY1IsJyArXHJcbiAgICAnZmVHYXVzc2lhbkJsdXIsZmVJbWFnZSxmZU1lcmdlLGZlTWVyZ2VOb2RlLGZlTW9ycGhvbG9neSxmZU9mZnNldCwnICtcclxuICAgICdmZVBvaW50TGlnaHQsZmVTcGVjdWxhckxpZ2h0aW5nLGZlU3BvdExpZ2h0LGZlVGlsZSxmZVR1cmJ1bGVuY2UsZmlsdGVyLCcgK1xyXG4gICAgJ2ZvcmVpZ25PYmplY3QsZyxoYXRjaCxoYXRjaHBhdGgsaW1hZ2UsbGluZSxsaW5lYXJHcmFkaWVudCxtYXJrZXIsbWFzaywnICtcclxuICAgICdtZXNoLG1lc2hncmFkaWVudCxtZXNocGF0Y2gsbWVzaHJvdyxtZXRhZGF0YSxtcGF0aCxwYXRoLHBhdHRlcm4sJyArXHJcbiAgICAncG9seWdvbixwb2x5bGluZSxyYWRpYWxHcmFkaWVudCxyZWN0LHNldCxzb2xpZGNvbG9yLHN0b3Asc3dpdGNoLHN5bWJvbCwnICtcclxuICAgICd0ZXh0LHRleHRQYXRoLHRpdGxlLHRzcGFuLHVua25vd24sdXNlLHZpZXcnO1xyXG5jb25zdCBWT0lEX1RBR1MgPSAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxocixpbWcsaW5wdXQsbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnInO1xyXG5jb25zdCBpc0hUTUxUYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoSFRNTF9UQUdTKTtcclxuY29uc3QgaXNTVkdUYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoU1ZHX1RBR1MpO1xyXG5jb25zdCBpc1ZvaWRUYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoVk9JRF9UQUdTKTtcblxuY29uc3QgZXNjYXBlUkUgPSAvW1wiJyY8Pl0vO1xyXG5mdW5jdGlvbiBlc2NhcGVIdG1sKHN0cmluZykge1xyXG4gICAgY29uc3Qgc3RyID0gJycgKyBzdHJpbmc7XHJcbiAgICBjb25zdCBtYXRjaCA9IGVzY2FwZVJFLmV4ZWMoc3RyKTtcclxuICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG4gICAgbGV0IGh0bWwgPSAnJztcclxuICAgIGxldCBlc2NhcGVkO1xyXG4gICAgbGV0IGluZGV4O1xyXG4gICAgbGV0IGxhc3RJbmRleCA9IDA7XHJcbiAgICBmb3IgKGluZGV4ID0gbWF0Y2guaW5kZXg7IGluZGV4IDwgc3RyLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgIHN3aXRjaCAoc3RyLmNoYXJDb2RlQXQoaW5kZXgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMzQ6IC8vIFwiXHJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZxdW90Oyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzODogLy8gJlxyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmYW1wOyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzOTogLy8gJ1xyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmIzM5Oyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA2MDogLy8gPFxyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmbHQ7JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDYyOiAvLyA+XHJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZndDsnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhc3RJbmRleCAhPT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgaHRtbCArPSBzdHIuc3Vic3RyaW5nKGxhc3RJbmRleCwgaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsYXN0SW5kZXggPSBpbmRleCArIDE7XHJcbiAgICAgICAgaHRtbCArPSBlc2NhcGVkO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxhc3RJbmRleCAhPT0gaW5kZXggPyBodG1sICsgc3RyLnN1YnN0cmluZyhsYXN0SW5kZXgsIGluZGV4KSA6IGh0bWw7XHJcbn1cclxuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1Mi9zeW50YXguaHRtbCNjb21tZW50c1xyXG5jb25zdCBjb21tZW50U3RyaXBSRSA9IC9eLT8+fDwhLS18LS0+fC0tIT58PCEtJC9nO1xyXG5mdW5jdGlvbiBlc2NhcGVIdG1sQ29tbWVudChzcmMpIHtcclxuICAgIHJldHVybiBzcmMucmVwbGFjZShjb21tZW50U3RyaXBSRSwgJycpO1xyXG59XG5cbmZ1bmN0aW9uIGxvb3NlQ29tcGFyZUFycmF5cyhhLCBiKSB7XHJcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGxldCBlcXVhbCA9IHRydWU7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgZXF1YWwgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBlcXVhbCA9IGxvb3NlRXF1YWwoYVtpXSwgYltpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZXF1YWw7XHJcbn1cclxuZnVuY3Rpb24gbG9vc2VFcXVhbChhLCBiKSB7XHJcbiAgICBpZiAoYSA9PT0gYilcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGxldCBhVmFsaWRUeXBlID0gaXNEYXRlKGEpO1xyXG4gICAgbGV0IGJWYWxpZFR5cGUgPSBpc0RhdGUoYik7XHJcbiAgICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGFWYWxpZFR5cGUgJiYgYlZhbGlkVHlwZSA/IGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKSA6IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgYVZhbGlkVHlwZSA9IGlzQXJyYXkoYSk7XHJcbiAgICBiVmFsaWRUeXBlID0gaXNBcnJheShiKTtcclxuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcclxuICAgICAgICByZXR1cm4gYVZhbGlkVHlwZSAmJiBiVmFsaWRUeXBlID8gbG9vc2VDb21wYXJlQXJyYXlzKGEsIGIpIDogZmFsc2U7XHJcbiAgICB9XHJcbiAgICBhVmFsaWRUeXBlID0gaXNPYmplY3QoYSk7XHJcbiAgICBiVmFsaWRUeXBlID0gaXNPYmplY3QoYik7XHJcbiAgICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmOiB0aGlzIGlmIHdpbGwgcHJvYmFibHkgbmV2ZXIgYmUgY2FsbGVkICovXHJcbiAgICAgICAgaWYgKCFhVmFsaWRUeXBlIHx8ICFiVmFsaWRUeXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYUtleXNDb3VudCA9IE9iamVjdC5rZXlzKGEpLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBiS2V5c0NvdW50ID0gT2JqZWN0LmtleXMoYikubGVuZ3RoO1xyXG4gICAgICAgIGlmIChhS2V5c0NvdW50ICE9PSBiS2V5c0NvdW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xyXG4gICAgICAgICAgICBjb25zdCBhSGFzS2V5ID0gYS5oYXNPd25Qcm9wZXJ0eShrZXkpO1xyXG4gICAgICAgICAgICBjb25zdCBiSGFzS2V5ID0gYi5oYXNPd25Qcm9wZXJ0eShrZXkpO1xyXG4gICAgICAgICAgICBpZiAoKGFIYXNLZXkgJiYgIWJIYXNLZXkpIHx8XHJcbiAgICAgICAgICAgICAgICAoIWFIYXNLZXkgJiYgYkhhc0tleSkgfHxcclxuICAgICAgICAgICAgICAgICFsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpO1xyXG59XHJcbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZihhcnIsIHZhbCkge1xyXG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoaXRlbSA9PiBsb29zZUVxdWFsKGl0ZW0sIHZhbCkpO1xyXG59XG5cbi8qKlxyXG4gKiBGb3IgY29udmVydGluZyB7eyBpbnRlcnBvbGF0aW9uIH19IHZhbHVlcyB0byBkaXNwbGF5ZWQgc3RyaW5ncy5cclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IHRvRGlzcGxheVN0cmluZyA9ICh2YWwpID0+IHtcclxuICAgIHJldHVybiB2YWwgPT0gbnVsbFxyXG4gICAgICAgID8gJydcclxuICAgICAgICA6IGlzT2JqZWN0KHZhbClcclxuICAgICAgICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIHJlcGxhY2VyLCAyKVxyXG4gICAgICAgICAgICA6IFN0cmluZyh2YWwpO1xyXG59O1xyXG5jb25zdCByZXBsYWNlciA9IChfa2V5LCB2YWwpID0+IHtcclxuICAgIGlmIChpc01hcCh2YWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgW2BNYXAoJHt2YWwuc2l6ZX0pYF06IFsuLi52YWwuZW50cmllcygpXS5yZWR1Y2UoKGVudHJpZXMsIFtrZXksIHZhbF0pID0+IHtcclxuICAgICAgICAgICAgICAgIGVudHJpZXNbYCR7a2V5fSA9PmBdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJpZXM7XHJcbiAgICAgICAgICAgIH0sIHt9KVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1NldCh2YWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgW2BTZXQoJHt2YWwuc2l6ZX0pYF06IFsuLi52YWwudmFsdWVzKCldXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkgJiYgIWlzQXJyYXkodmFsKSAmJiAhaXNQbGFpbk9iamVjdCh2YWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZyh2YWwpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbDtcclxufTtcblxuLyoqXHJcbiAqIExpc3Qgb2YgQGJhYmVsL3BhcnNlciBwbHVnaW5zIHRoYXQgYXJlIHVzZWQgZm9yIHRlbXBsYXRlIGV4cHJlc3Npb25cclxuICogdHJhbnNmb3JtcyBhbmQgU0ZDIHNjcmlwdCB0cmFuc2Zvcm1zLiBCeSBkZWZhdWx0IHdlIGVuYWJsZSBwcm9wb3NhbHMgc2xhdGVkXHJcbiAqIGZvciBFUzIwMjAuIFRoaXMgd2lsbCBuZWVkIHRvIGJlIHVwZGF0ZWQgYXMgdGhlIHNwZWMgbW92ZXMgZm9yd2FyZC5cclxuICogRnVsbCBsaXN0IGF0IGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL25leHQvYmFiZWwtcGFyc2VyI3BsdWdpbnNcclxuICovXHJcbmNvbnN0IGJhYmVsUGFyc2VyRGVmYXVsdFBsdWdpbnMgPSBbXHJcbiAgICAnYmlnSW50JyxcclxuICAgICdvcHRpb25hbENoYWluaW5nJyxcclxuICAgICdudWxsaXNoQ29hbGVzY2luZ09wZXJhdG9yJ1xyXG5dO1xyXG5jb25zdCBFTVBUWV9PQkogPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgID8gT2JqZWN0LmZyZWV6ZSh7fSlcclxuICAgIDoge307XHJcbmNvbnN0IEVNUFRZX0FSUiA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IE9iamVjdC5mcmVlemUoW10pIDogW107XHJcbmNvbnN0IE5PT1AgPSAoKSA9PiB7IH07XHJcbi8qKlxyXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxyXG4gKi9cclxuY29uc3QgTk8gPSAoKSA9PiBmYWxzZTtcclxuY29uc3Qgb25SRSA9IC9eb25bXmEtel0vO1xyXG5jb25zdCBpc09uID0gKGtleSkgPT4gb25SRS50ZXN0KGtleSk7XHJcbmNvbnN0IGlzTW9kZWxMaXN0ZW5lciA9IChrZXkpID0+IGtleS5zdGFydHNXaXRoKCdvblVwZGF0ZTonKTtcclxuY29uc3QgZXh0ZW5kID0gT2JqZWN0LmFzc2lnbjtcclxuY29uc3QgcmVtb3ZlID0gKGFyciwgZWwpID0+IHtcclxuICAgIGNvbnN0IGkgPSBhcnIuaW5kZXhPZihlbCk7XHJcbiAgICBpZiAoaSA+IC0xKSB7XHJcbiAgICAgICAgYXJyLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxufTtcclxuY29uc3QgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG5jb25zdCBoYXNPd24gPSAodmFsLCBrZXkpID0+IGhhc093blByb3BlcnR5LmNhbGwodmFsLCBrZXkpO1xyXG5jb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcclxuY29uc3QgaXNNYXAgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgTWFwXSc7XHJcbmNvbnN0IGlzU2V0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IFNldF0nO1xyXG5jb25zdCBpc0RhdGUgPSAodmFsKSA9PiB2YWwgaW5zdGFuY2VvZiBEYXRlO1xyXG5jb25zdCBpc0Z1bmN0aW9uID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJztcclxuY29uc3QgaXNTdHJpbmcgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcclxuY29uc3QgaXNTeW1ib2wgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnc3ltYm9sJztcclxuY29uc3QgaXNPYmplY3QgPSAodmFsKSA9PiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XHJcbmNvbnN0IGlzUHJvbWlzZSA9ICh2YWwpID0+IHtcclxuICAgIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnRoZW4pICYmIGlzRnVuY3Rpb24odmFsLmNhdGNoKTtcclxufTtcclxuY29uc3Qgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xyXG5jb25zdCB0b1R5cGVTdHJpbmcgPSAodmFsdWUpID0+IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xyXG5jb25zdCB0b1Jhd1R5cGUgPSAodmFsdWUpID0+IHtcclxuICAgIC8vIGV4dHJhY3QgXCJSYXdUeXBlXCIgZnJvbSBzdHJpbmdzIGxpa2UgXCJbb2JqZWN0IFJhd1R5cGVdXCJcclxuICAgIHJldHVybiB0b1R5cGVTdHJpbmcodmFsdWUpLnNsaWNlKDgsIC0xKTtcclxufTtcclxuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSAnW29iamVjdCBPYmplY3RdJztcclxuY29uc3QgaXNJbnRlZ2VyS2V5ID0gKGtleSkgPT4gaXNTdHJpbmcoa2V5KSAmJlxyXG4gICAga2V5ICE9PSAnTmFOJyAmJlxyXG4gICAga2V5WzBdICE9PSAnLScgJiZcclxuICAgICcnICsgcGFyc2VJbnQoa2V5LCAxMCkgPT09IGtleTtcclxuY29uc3QgaXNSZXNlcnZlZFByb3AgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoXHJcbi8vIHRoZSBsZWFkaW5nIGNvbW1hIGlzIGludGVudGlvbmFsIHNvIGVtcHR5IHN0cmluZyBcIlwiIGlzIGFsc28gaW5jbHVkZWRcclxuJyxrZXkscmVmLCcgK1xyXG4gICAgJ29uVm5vZGVCZWZvcmVNb3VudCxvblZub2RlTW91bnRlZCwnICtcclxuICAgICdvblZub2RlQmVmb3JlVXBkYXRlLG9uVm5vZGVVcGRhdGVkLCcgK1xyXG4gICAgJ29uVm5vZGVCZWZvcmVVbm1vdW50LG9uVm5vZGVVbm1vdW50ZWQnKTtcclxuY29uc3QgY2FjaGVTdHJpbmdGdW5jdGlvbiA9IChmbikgPT4ge1xyXG4gICAgY29uc3QgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgcmV0dXJuICgoc3RyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaGl0ID0gY2FjaGVbc3RyXTtcclxuICAgICAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSk7XHJcbiAgICB9KTtcclxufTtcclxuY29uc3QgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCBjYW1lbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4ge1xyXG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIChfLCBjKSA9PiAoYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnKSk7XHJcbn0pO1xyXG5jb25zdCBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgaHlwaGVuYXRlID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKCkpO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IGNhcGl0YWxpemUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKSk7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgdG9IYW5kbGVyS2V5ID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiAoc3RyID8gYG9uJHtjYXBpdGFsaXplKHN0cil9YCA6IGBgKSk7XHJcbi8vIGNvbXBhcmUgd2hldGhlciBhIHZhbHVlIGhhcyBjaGFuZ2VkLCBhY2NvdW50aW5nIGZvciBOYU4uXHJcbmNvbnN0IGhhc0NoYW5nZWQgPSAodmFsdWUsIG9sZFZhbHVlKSA9PiB2YWx1ZSAhPT0gb2xkVmFsdWUgJiYgKHZhbHVlID09PSB2YWx1ZSB8fCBvbGRWYWx1ZSA9PT0gb2xkVmFsdWUpO1xyXG5jb25zdCBpbnZva2VBcnJheUZucyA9IChmbnMsIGFyZykgPT4ge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBmbnNbaV0oYXJnKTtcclxuICAgIH1cclxufTtcclxuY29uc3QgZGVmID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHZhbHVlXHJcbiAgICB9KTtcclxufTtcclxuY29uc3QgdG9OdW1iZXIgPSAodmFsKSA9PiB7XHJcbiAgICBjb25zdCBuID0gcGFyc2VGbG9hdCh2YWwpO1xyXG4gICAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogbjtcclxufTtcclxubGV0IF9nbG9iYWxUaGlzO1xyXG5jb25zdCBnZXRHbG9iYWxUaGlzID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChfZ2xvYmFsVGhpcyB8fFxyXG4gICAgICAgIChfZ2xvYmFsVGhpcyA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgPyBnbG9iYWxUaGlzXHJcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gc2VsZlxyXG4gICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB3aW5kb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBnbG9iYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoge30pKTtcclxufTtcblxuZXhwb3J0IHsgRU1QVFlfQVJSLCBFTVBUWV9PQkosIE5PLCBOT09QLCBQYXRjaEZsYWdOYW1lcywgYmFiZWxQYXJzZXJEZWZhdWx0UGx1Z2lucywgY2FtZWxpemUsIGNhcGl0YWxpemUsIGRlZiwgZXNjYXBlSHRtbCwgZXNjYXBlSHRtbENvbW1lbnQsIGV4dGVuZCwgZ2VuZXJhdGVDb2RlRnJhbWUsIGdldEdsb2JhbFRoaXMsIGhhc0NoYW5nZWQsIGhhc093biwgaHlwaGVuYXRlLCBpbnZva2VBcnJheUZucywgaXNBcnJheSwgaXNCb29sZWFuQXR0ciwgaXNEYXRlLCBpc0Z1bmN0aW9uLCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQsIGlzSFRNTFRhZywgaXNJbnRlZ2VyS2V5LCBpc0tub3duQXR0ciwgaXNNYXAsIGlzTW9kZWxMaXN0ZW5lciwgaXNOb1VuaXROdW1lcmljU3R5bGVQcm9wLCBpc09iamVjdCwgaXNPbiwgaXNQbGFpbk9iamVjdCwgaXNQcm9taXNlLCBpc1Jlc2VydmVkUHJvcCwgaXNTU1JTYWZlQXR0ck5hbWUsIGlzU1ZHVGFnLCBpc1NldCwgaXNTcGVjaWFsQm9vbGVhbkF0dHIsIGlzU3RyaW5nLCBpc1N5bWJvbCwgaXNWb2lkVGFnLCBsb29zZUVxdWFsLCBsb29zZUluZGV4T2YsIG1ha2VNYXAsIG5vcm1hbGl6ZUNsYXNzLCBub3JtYWxpemVTdHlsZSwgb2JqZWN0VG9TdHJpbmcsIHBhcnNlU3RyaW5nU3R5bGUsIHByb3BzVG9BdHRyTWFwLCByZW1vdmUsIHN0cmluZ2lmeVN0eWxlLCB0b0Rpc3BsYXlTdHJpbmcsIHRvSGFuZGxlcktleSwgdG9OdW1iZXIsIHRvUmF3VHlwZSwgdG9UeXBlU3RyaW5nIH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAodHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn07IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBpZD1cImFwcFwiPlxyXG4gICAgICAgIDxyb3V0ZXItdmlldyAvPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHR7XHJcbiAgICAgICAgZGF0YSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG5cclxuPHN0eWxlPlxyXG48L3N0eWxlPiIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJpbmRleFwiPlxyXG4gICAgICAgIDxpbnB1dCB0eXBlPVwiZmlsZVwiIGNsYXNzPVwidXBsb2FkX2ZpbGVcIj5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0e1xyXG4gICAgICAgIGRhdGEoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JlYXRlZCgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cod2luZG93LmxvY2F0aW9uKVxyXG4gICAgICAgICAgICB2YXIgb3JpZ2luICA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XHJcbiAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgdHlwZToncG9zdCcsXHJcbiAgICAgICAgICAgICAgIHVybDpvcmlnaW4rXCJ1cGxvYWRcIixcclxuICAgICAgICAgICAgICAgc3VjY2VzczpmdW5jdGlvbihyZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKVxyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcblxyXG48c3R5bGUgc2NvcGVkPlxyXG4gICAgLnVwbG9hZF9maWxle1xyXG4gICAgICAgYmFja2dyb3VuZDpub25lOyBvdXRsaW5lOm5vbmU7IGJvcmRlcjpub25lOyBcclxuICAgIH1cclxuPC9zdHlsZT4iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwidGVzdFwiPlxyXG4gICAgICAgIGFhYWFkc2FkYXNkXHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcblxyXG48L3NjcmlwdD5cclxuXHJcblxyXG48c3R5bGU+XHJcbjwvc3R5bGU+IiwiLyohXG4gICogdnVlLXJvdXRlciB2NC4wLjAtcmMuM1xuICAqIChjKSAyMDIwIEVkdWFyZG8gU2FuIE1hcnRpbiBNb3JvdGVcbiAgKiBAbGljZW5zZSBNSVRcbiAgKi9cbmltcG9ydCB7IGdldEN1cnJlbnRJbnN0YW5jZSwgaW5qZWN0LCBvblVubW91bnRlZCwgb25EZWFjdGl2YXRlZCwgb25BY3RpdmF0ZWQsIGNvbXB1dGVkLCB1bnJlZiwgZGVmaW5lQ29tcG9uZW50LCByZWFjdGl2ZSwgaCwgcHJvdmlkZSwgcmVmLCB3YXRjaCwgc2hhbGxvd1JlZiwgbmV4dFRpY2sgfSBmcm9tICd2dWUnO1xuXG5jb25zdCBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xyXG5jb25zdCBQb2x5U3ltYm9sID0gKG5hbWUpID0+IFxyXG4vLyB2ciA9IHZ1ZSByb3V0ZXJcclxuaGFzU3ltYm9sXHJcbiAgICA/IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnW3Z1ZS1yb3V0ZXJdOiAnICsgbmFtZSA6IG5hbWUpXHJcbiAgICA6ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnW3Z1ZS1yb3V0ZXJdOiAnIDogJ192cl8nKSArIG5hbWU7XHJcbi8vIHJ2bG0gPSBSb3V0ZXIgVmlldyBMb2NhdGlvbiBNYXRjaGVkXHJcbmNvbnN0IG1hdGNoZWRSb3V0ZUtleSA9IC8qI19fUFVSRV9fKi8gUG9seVN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAncm91dGVyIHZpZXcgbG9jYXRpb24gbWF0Y2hlZCcgOiAncnZsbScpO1xyXG4vLyBydmQgPSBSb3V0ZXIgVmlldyBEZXB0aFxyXG5jb25zdCB2aWV3RGVwdGhLZXkgPSAvKiNfX1BVUkVfXyovIFBvbHlTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ3JvdXRlciB2aWV3IGRlcHRoJyA6ICdydmQnKTtcclxuLyoqXHJcbiAqIEFsbG93cyBvdmVycmlkaW5nIHRoZSByb3V0ZXIgaW5zdGFuY2UgcmV0dXJuZWQgYnkgYHVzZVJvdXRlcmAgaW4gdGVzdHMuIHIgc3RhbmRzIGZvciByb3V0ZXJcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCByb3V0ZXJLZXkgPSAvKiNfX1BVUkVfXyovIFBvbHlTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ3JvdXRlcicgOiAncicpO1xyXG4vKipcclxuICogQWxsb3dzIG92ZXJyaWRpbmcgdGhlIGN1cnJlbnQgcm91dGUgcmV0dXJuZWQgYnkgYHVzZVJvdXRlYCBpbiB0ZXN0cy4gcmwgc3RhbmRzIGZvciByb3V0ZSBsb2NhdGlvblxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmNvbnN0IHJvdXRlTG9jYXRpb25LZXkgPSAvKiNfX1BVUkVfXyovIFBvbHlTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ3JvdXRlIGxvY2F0aW9uJyA6ICdybCcpO1xuXG5jb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuZnVuY3Rpb24gaXNFU01vZHVsZShvYmopIHtcclxuICAgIHJldHVybiBvYmouX19lc01vZHVsZSB8fCAoaGFzU3ltYm9sICYmIG9ialtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJyk7XHJcbn1cclxuY29uc3QgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcclxuZnVuY3Rpb24gYXBwbHlUb1BhcmFtcyhmbiwgcGFyYW1zKSB7XHJcbiAgICBjb25zdCBuZXdQYXJhbXMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1zW2tleV07XHJcbiAgICAgICAgbmV3UGFyYW1zW2tleV0gPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChmbikgOiBmbih2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3UGFyYW1zO1xyXG59XHJcbmxldCBub29wID0gKCkgPT4geyB9O1xuXG5mdW5jdGlvbiB3YXJuKG1zZykge1xyXG4gICAgLy8gYXZvaWQgdXNpbmcgLi4uYXJncyBhcyBpdCBicmVha3MgaW4gb2xkZXIgRWRnZSBidWlsZHNcclxuICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cykuc2xpY2UoMSk7XHJcbiAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgWydbVnVlIFJvdXRlciB3YXJuXTogJyArIG1zZ10uY29uY2F0KGFyZ3MpKTtcclxufVxuXG5jb25zdCBUUkFJTElOR19TTEFTSF9SRSA9IC9cXC8kLztcclxuY29uc3QgcmVtb3ZlVHJhaWxpbmdTbGFzaCA9IChwYXRoKSA9PiBwYXRoLnJlcGxhY2UoVFJBSUxJTkdfU0xBU0hfUkUsICcnKTtcclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgYW4gVVJJIGludG8gYSBub3JtYWxpemVkIGhpc3RvcnkgbG9jYXRpb25cclxuICpcclxuICogQHBhcmFtIHBhcnNlUXVlcnlcclxuICogQHBhcmFtIGxvY2F0aW9uIC0gVVJJIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcGFyYW0gY3VycmVudExvY2F0aW9uIC0gY3VycmVudCBhYnNvbHV0ZSBsb2NhdGlvbi4gQWxsb3dzIHJlc29sdmluZyByZWxhdGl2ZVxyXG4gKiBwYXRocy4gTXVzdCBzdGFydCB3aXRoIGAvYC4gRGVmYXVsdHMgdG8gYC9gXHJcbiAqIEByZXR1cm5zIGEgbm9ybWFsaXplZCBoaXN0b3J5IGxvY2F0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZVVSTChwYXJzZVF1ZXJ5LCBsb2NhdGlvbiwgY3VycmVudExvY2F0aW9uID0gJy8nKSB7XHJcbiAgICBsZXQgcGF0aCwgcXVlcnkgPSB7fSwgc2VhcmNoU3RyaW5nID0gJycsIGhhc2ggPSAnJztcclxuICAgIC8vIENvdWxkIHVzZSBVUkwgYW5kIFVSTFNlYXJjaFBhcmFtcyBidXQgSUUgMTEgZG9lc24ndCBzdXBwb3J0IGl0XHJcbiAgICBjb25zdCBzZWFyY2hQb3MgPSBsb2NhdGlvbi5pbmRleE9mKCc/Jyk7XHJcbiAgICBjb25zdCBoYXNoUG9zID0gbG9jYXRpb24uaW5kZXhPZignIycsIHNlYXJjaFBvcyA+IC0xID8gc2VhcmNoUG9zIDogMCk7XHJcbiAgICBpZiAoc2VhcmNoUG9zID4gLTEpIHtcclxuICAgICAgICBwYXRoID0gbG9jYXRpb24uc2xpY2UoMCwgc2VhcmNoUG9zKTtcclxuICAgICAgICBzZWFyY2hTdHJpbmcgPSBsb2NhdGlvbi5zbGljZShzZWFyY2hQb3MgKyAxLCBoYXNoUG9zID4gLTEgPyBoYXNoUG9zIDogbG9jYXRpb24ubGVuZ3RoKTtcclxuICAgICAgICBxdWVyeSA9IHBhcnNlUXVlcnkoc2VhcmNoU3RyaW5nKTtcclxuICAgIH1cclxuICAgIGlmIChoYXNoUG9zID4gLTEpIHtcclxuICAgICAgICBwYXRoID0gcGF0aCB8fCBsb2NhdGlvbi5zbGljZSgwLCBoYXNoUG9zKTtcclxuICAgICAgICAvLyBrZWVwIHRoZSAjIGNoYXJhY3RlclxyXG4gICAgICAgIGhhc2ggPSBsb2NhdGlvbi5zbGljZShoYXNoUG9zLCBsb2NhdGlvbi5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgLy8gbm8gc2VhcmNoIGFuZCBubyBxdWVyeVxyXG4gICAgcGF0aCA9IHJlc29sdmVSZWxhdGl2ZVBhdGgocGF0aCAhPSBudWxsID8gcGF0aCA6IGxvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24pO1xyXG4gICAgLy8gZW1wdHkgcGF0aCBtZWFucyBhIHJlbGF0aXZlIHF1ZXJ5IG9yIGhhc2ggYD9mb289ZmAsIGAjdGhpbmdgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGZ1bGxQYXRoOiBwYXRoICsgKHNlYXJjaFN0cmluZyAmJiAnPycpICsgc2VhcmNoU3RyaW5nICsgaGFzaCxcclxuICAgICAgICBwYXRoLFxyXG4gICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgIGhhc2gsXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBTdHJpbmdpZmllcyBhIFVSTCBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHN0cmluZ2lmeVF1ZXJ5XHJcbiAqIEBwYXJhbSBsb2NhdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaW5naWZ5VVJMKHN0cmluZ2lmeVF1ZXJ5LCBsb2NhdGlvbikge1xyXG4gICAgbGV0IHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnkgPyBzdHJpbmdpZnlRdWVyeShsb2NhdGlvbi5xdWVyeSkgOiAnJztcclxuICAgIHJldHVybiBsb2NhdGlvbi5wYXRoICsgKHF1ZXJ5ICYmICc/JykgKyBxdWVyeSArIChsb2NhdGlvbi5oYXNoIHx8ICcnKTtcclxufVxyXG4vKipcclxuICogU3RyaXBzIG9mZiB0aGUgYmFzZSBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgYSBsb2NhdGlvbi5wYXRobmFtZSBpbiBhIG5vblxyXG4gKiBjYXNlLXNlbnNpdGl2ZSB3YXkuXHJcbiAqXHJcbiAqIEBwYXJhbSBwYXRobmFtZSAtIGxvY2F0aW9uLnBhdGhuYW1lXHJcbiAqIEBwYXJhbSBiYXNlIC0gYmFzZSB0byBzdHJpcCBvZmZcclxuICovXHJcbmZ1bmN0aW9uIHN0cmlwQmFzZShwYXRobmFtZSwgYmFzZSkge1xyXG4gICAgLy8gbm8gYmFzZSBvciBiYXNlIGlzIG5vdCBmb3VuZCBhdCB0aGUgYmVnaW5uaW5nXHJcbiAgICBpZiAoIWJhc2UgfHwgcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKGJhc2UudG9Mb3dlckNhc2UoKSkpXHJcbiAgICAgICAgcmV0dXJuIHBhdGhuYW1lO1xyXG4gICAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKGJhc2UubGVuZ3RoKSB8fCAnLyc7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrcyBpZiB0d28gUm91dGVMb2NhdGlvbiBhcmUgZXF1YWwuIFRoaXMgbWVhbnMgdGhhdCBib3RoIGxvY2F0aW9ucyBhcmVcclxuICogcG9pbnRpbmcgdG93YXJkcyB0aGUgc2FtZSB7QGxpbmsgUm91dGVSZWNvcmR9IGFuZCB0aGF0IGFsbCBgcGFyYW1zYCwgYHF1ZXJ5YFxyXG4gKiBwYXJhbWV0ZXJzIGFuZCBgaGFzaGAgYXJlIHRoZSBzYW1lXHJcbiAqXHJcbiAqIEBwYXJhbSBhIC0gZmlyc3Qge0BsaW5rIFJvdXRlTG9jYXRpb259XHJcbiAqIEBwYXJhbSBiIC0gc2Vjb25kIHtAbGluayBSb3V0ZUxvY2F0aW9ufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVMb2NhdGlvbihzdHJpbmdpZnlRdWVyeSwgYSwgYikge1xyXG4gICAgbGV0IGFMYXN0SW5kZXggPSBhLm1hdGNoZWQubGVuZ3RoIC0gMTtcclxuICAgIGxldCBiTGFzdEluZGV4ID0gYi5tYXRjaGVkLmxlbmd0aCAtIDE7XHJcbiAgICByZXR1cm4gKGFMYXN0SW5kZXggPiAtMSAmJlxyXG4gICAgICAgIGFMYXN0SW5kZXggPT09IGJMYXN0SW5kZXggJiZcclxuICAgICAgICBpc1NhbWVSb3V0ZVJlY29yZChhLm1hdGNoZWRbYUxhc3RJbmRleF0sIGIubWF0Y2hlZFtiTGFzdEluZGV4XSkgJiZcclxuICAgICAgICBpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zKGEucGFyYW1zLCBiLnBhcmFtcykgJiZcclxuICAgICAgICBzdHJpbmdpZnlRdWVyeShhLnF1ZXJ5KSA9PT0gc3RyaW5naWZ5UXVlcnkoYi5xdWVyeSkgJiZcclxuICAgICAgICBhLmhhc2ggPT09IGIuaGFzaCk7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrIGlmIHR3byBgUm91dGVSZWNvcmRzYCBhcmUgZXF1YWwuIFRha2VzIGludG8gYWNjb3VudCBhbGlhc2VzOiB0aGV5IGFyZVxyXG4gKiBjb25zaWRlcmVkIGVxdWFsIHRvIHRoZSBgUm91dGVSZWNvcmRgIHRoZXkgYXJlIGFsaWFzaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0gYSAtIGZpcnN0IHtAbGluayBSb3V0ZVJlY29yZH1cclxuICogQHBhcmFtIGIgLSBzZWNvbmQge0BsaW5rIFJvdXRlUmVjb3JkfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVSZWNvcmQoYSwgYikge1xyXG4gICAgLy8gc2luY2UgdGhlIG9yaWdpbmFsIHJlY29yZCBoYXMgYW4gdW5kZWZpbmVkIHZhbHVlIGZvciBhbGlhc09mXHJcbiAgICAvLyBidXQgYWxsIGFsaWFzZXMgcG9pbnQgdG8gdGhlIG9yaWdpbmFsIHJlY29yZCwgdGhpcyB3aWxsIGFsd2F5cyBjb21wYXJlXHJcbiAgICAvLyB0aGUgb3JpZ2luYWwgcmVjb3JkXHJcbiAgICByZXR1cm4gKGEuYWxpYXNPZiB8fCBhKSA9PT0gKGIuYWxpYXNPZiB8fCBiKTtcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zKGEsIGIpIHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhhKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gYSkge1xyXG4gICAgICAgIGlmICghaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtc1ZhbHVlKGFba2V5XSwgYltrZXldKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtc1ZhbHVlKGEsIGIpIHtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGEpXHJcbiAgICAgICAgPyBpc0VxdWl2YWxlbnRBcnJheShhLCBiKVxyXG4gICAgICAgIDogQXJyYXkuaXNBcnJheShiKVxyXG4gICAgICAgICAgICA/IGlzRXF1aXZhbGVudEFycmF5KGIsIGEpXHJcbiAgICAgICAgICAgIDogYSA9PT0gYjtcclxufVxyXG4vKipcclxuICogQ2hlY2sgaWYgdHdvIGFycmF5cyBhcmUgdGhlIHNhbWUgb3IgaWYgYW4gYXJyYXkgd2l0aCBvbmUgc2luZ2xlIGVudHJ5IGlzIHRoZVxyXG4gKiBzYW1lIGFzIGFub3RoZXIgcHJpbWl0aXZlIHZhbHVlLiBVc2VkIHRvIGNoZWNrIHF1ZXJ5IGFuZCBwYXJhbWV0ZXJzXHJcbiAqXHJcbiAqIEBwYXJhbSBhIC0gYXJyYXkgb2YgdmFsdWVzXHJcbiAqIEBwYXJhbSBiIC0gYXJyYXkgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIHZhbHVlXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0VxdWl2YWxlbnRBcnJheShhLCBiKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKVxyXG4gICAgICAgID8gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoKHZhbHVlLCBpKSA9PiB2YWx1ZSA9PT0gYltpXSlcclxuICAgICAgICA6IGEubGVuZ3RoID09PSAxICYmIGFbMF0gPT09IGI7XHJcbn1cclxuLyoqXHJcbiAqIFJlc29sdmVzIGEgcmVsYXRpdmUgcGF0aCB0aGF0IHN0YXJ0cyB3aXRoIGAuYC5cclxuICpcclxuICogQHBhcmFtIHRvIC0gcGF0aCBsb2NhdGlvbiB3ZSBhcmUgcmVzb2x2aW5nXHJcbiAqIEBwYXJhbSBmcm9tIC0gY3VycmVudExvY2F0aW9uLnBhdGgsIHNob3VsZCBzdGFydCB3aXRoIGAvYFxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZVJlbGF0aXZlUGF0aCh0bywgZnJvbSkge1xyXG4gICAgaWYgKHRvLnN0YXJ0c1dpdGgoJy8nKSlcclxuICAgICAgICByZXR1cm4gdG87XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFmcm9tLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG4gICAgICAgIHdhcm4oYENhbm5vdCByZXNvbHZlIGEgcmVsYXRpdmUgbG9jYXRpb24gd2l0aG91dCBhbiBhYnNvbHV0ZSBwYXRoLiBUcnlpbmcgdG8gcmVzb2x2ZSBcIiR7dG99XCIgZnJvbSBcIiR7ZnJvbX1cIi4gSXQgc2hvdWxkIGxvb2sgbGlrZSBcIi8ke2Zyb219XCIuYCk7XHJcbiAgICAgICAgcmV0dXJuIHRvO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0bylcclxuICAgICAgICByZXR1cm4gZnJvbTtcclxuICAgIGNvbnN0IGZyb21TZWdtZW50cyA9IGZyb20uc3BsaXQoJy8nKTtcclxuICAgIGNvbnN0IHRvU2VnbWVudHMgPSB0by5zcGxpdCgnLycpO1xyXG4gICAgbGV0IHBvc2l0aW9uID0gZnJvbVNlZ21lbnRzLmxlbmd0aCAtIDE7XHJcbiAgICBsZXQgdG9Qb3NpdGlvbjtcclxuICAgIGxldCBzZWdtZW50O1xyXG4gICAgZm9yICh0b1Bvc2l0aW9uID0gMDsgdG9Qb3NpdGlvbiA8IHRvU2VnbWVudHMubGVuZ3RoOyB0b1Bvc2l0aW9uKyspIHtcclxuICAgICAgICBzZWdtZW50ID0gdG9TZWdtZW50c1t0b1Bvc2l0aW9uXTtcclxuICAgICAgICAvLyBjYW4ndCBnbyBiZWxvdyB6ZXJvXHJcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAxIHx8IHNlZ21lbnQgPT09ICcuJylcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgaWYgKHNlZ21lbnQgPT09ICcuLicpXHJcbiAgICAgICAgICAgIHBvc2l0aW9uLS07XHJcbiAgICAgICAgLy8gZm91bmQgc29tZXRoaW5nIHRoYXQgaXMgbm90IHJlbGF0aXZlIHBhdGhcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChmcm9tU2VnbWVudHMuc2xpY2UoMCwgcG9zaXRpb24pLmpvaW4oJy8nKSArXHJcbiAgICAgICAgJy8nICtcclxuICAgICAgICB0b1NlZ21lbnRzXHJcbiAgICAgICAgICAgIC5zbGljZSh0b1Bvc2l0aW9uIC0gKHRvUG9zaXRpb24gPT09IHRvU2VnbWVudHMubGVuZ3RoID8gMSA6IDApKVxyXG4gICAgICAgICAgICAuam9pbignLycpKTtcclxufVxuXG52YXIgTmF2aWdhdGlvblR5cGU7XHJcbihmdW5jdGlvbiAoTmF2aWdhdGlvblR5cGUpIHtcclxuICAgIE5hdmlnYXRpb25UeXBlW1wicG9wXCJdID0gXCJwb3BcIjtcclxuICAgIE5hdmlnYXRpb25UeXBlW1wicHVzaFwiXSA9IFwicHVzaFwiO1xyXG59KShOYXZpZ2F0aW9uVHlwZSB8fCAoTmF2aWdhdGlvblR5cGUgPSB7fSkpO1xyXG52YXIgTmF2aWdhdGlvbkRpcmVjdGlvbjtcclxuKGZ1bmN0aW9uIChOYXZpZ2F0aW9uRGlyZWN0aW9uKSB7XHJcbiAgICBOYXZpZ2F0aW9uRGlyZWN0aW9uW1wiYmFja1wiXSA9IFwiYmFja1wiO1xyXG4gICAgTmF2aWdhdGlvbkRpcmVjdGlvbltcImZvcndhcmRcIl0gPSBcImZvcndhcmRcIjtcclxuICAgIE5hdmlnYXRpb25EaXJlY3Rpb25bXCJ1bmtub3duXCJdID0gXCJcIjtcclxufSkoTmF2aWdhdGlvbkRpcmVjdGlvbiB8fCAoTmF2aWdhdGlvbkRpcmVjdGlvbiA9IHt9KSk7XHJcbi8qKlxyXG4gKiBTdGFydGluZyBsb2NhdGlvbiBmb3IgSGlzdG9yaWVzXHJcbiAqL1xyXG5jb25zdCBTVEFSVCA9ICcnO1xyXG4vLyBHZW5lcmljIHV0aWxzXHJcbi8qKlxyXG4gKiBOb3JtYWxpemVzIGEgYmFzZSBieSByZW1vdmluZyBhbnkgdHJhaWxpbmcgc2xhc2ggYW5kIHJlYWRpbmcgdGhlIGJhc2UgdGFnIGlmXHJcbiAqIHByZXNlbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSBiYXNlIC0gYmFzZSB0byBub3JtYWxpemVcclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2UoYmFzZSkge1xyXG4gICAgaWYgKCFiYXNlKSB7XHJcbiAgICAgICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICAvLyByZXNwZWN0IDxiYXNlPiB0YWdcclxuICAgICAgICAgICAgY29uc3QgYmFzZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xyXG4gICAgICAgICAgICBiYXNlID0gKGJhc2VFbCAmJiBiYXNlRWwuZ2V0QXR0cmlidXRlKCdocmVmJykpIHx8ICcvJztcclxuICAgICAgICAgICAgLy8gc3RyaXAgZnVsbCBVUkwgb3JpZ2luXHJcbiAgICAgICAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UoL15cXHcrOlxcL1xcL1teXFwvXSsvLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBiYXNlID0gJy8nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGVuc3VyZSBsZWFkaW5nIHNsYXNoIHdoZW4gaXQgd2FzIHJlbW92ZWQgYnkgdGhlIHJlZ2V4IGFib3ZlIGF2b2lkIGxlYWRpbmdcclxuICAgIC8vIHNsYXNoIHdpdGggaGFzaCBiZWNhdXNlIHRoZSBmaWxlIGNvdWxkIGJlIHJlYWQgZnJvbSB0aGUgZGlzayBsaWtlIGZpbGU6Ly9cclxuICAgIC8vIGFuZCB0aGUgbGVhZGluZyBzbGFzaCB3b3VsZCBjYXVzZSBwcm9ibGVtc1xyXG4gICAgaWYgKGJhc2VbMF0gIT09ICcvJyAmJiBiYXNlWzBdICE9PSAnIycpXHJcbiAgICAgICAgYmFzZSA9ICcvJyArIGJhc2U7XHJcbiAgICAvLyByZW1vdmUgdGhlIHRyYWlsaW5nIHNsYXNoIHNvIGFsbCBvdGhlciBtZXRob2QgY2FuIGp1c3QgZG8gYGJhc2UgKyBmdWxsUGF0aGBcclxuICAgIC8vIHRvIGJ1aWxkIGFuIGhyZWZcclxuICAgIHJldHVybiByZW1vdmVUcmFpbGluZ1NsYXNoKGJhc2UpO1xyXG59XHJcbi8vIHJlbW92ZSBhbnkgY2hhcmFjdGVyIGJlZm9yZSB0aGUgaGFzaFxyXG5jb25zdCBCRUZPUkVfSEFTSF9SRSA9IC9eW14jXSsjLztcclxuZnVuY3Rpb24gY3JlYXRlSHJlZihiYXNlLCBsb2NhdGlvbikge1xyXG4gICAgcmV0dXJuIGJhc2UucmVwbGFjZShCRUZPUkVfSEFTSF9SRSwgJyMnKSArIGxvY2F0aW9uO1xyXG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRQb3NpdGlvbihlbCwgb2Zmc2V0KSB7XHJcbiAgICBjb25zdCBkb2NSZWN0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgY29uc3QgZWxSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJlaGF2aW9yOiBvZmZzZXQuYmVoYXZpb3IsXHJcbiAgICAgICAgbGVmdDogZWxSZWN0LmxlZnQgLSBkb2NSZWN0LmxlZnQgLSAob2Zmc2V0LmxlZnQgfHwgMCksXHJcbiAgICAgICAgdG9wOiBlbFJlY3QudG9wIC0gZG9jUmVjdC50b3AgLSAob2Zmc2V0LnRvcCB8fCAwKSxcclxuICAgIH07XHJcbn1cclxuY29uc3QgY29tcHV0ZVNjcm9sbFBvc2l0aW9uID0gKCkgPT4gKHtcclxuICAgIGxlZnQ6IHdpbmRvdy5wYWdlWE9mZnNldCxcclxuICAgIHRvcDogd2luZG93LnBhZ2VZT2Zmc2V0LFxyXG59KTtcclxuZnVuY3Rpb24gc2Nyb2xsVG9Qb3NpdGlvbihwb3NpdGlvbikge1xyXG4gICAgbGV0IHNjcm9sbFRvT3B0aW9ucztcclxuICAgIGlmICgnZWwnIGluIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgbGV0IHBvc2l0aW9uRWwgPSBwb3NpdGlvbi5lbDtcclxuICAgICAgICBjb25zdCBpc0lkU2VsZWN0b3IgPSB0eXBlb2YgcG9zaXRpb25FbCA9PT0gJ3N0cmluZycgJiYgcG9zaXRpb25FbC5zdGFydHNXaXRoKCcjJyk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogYGlkYHMgY2FuIGFjY2VwdCBwcmV0dHkgbXVjaCBhbnkgY2hhcmFjdGVycywgaW5jbHVkaW5nIENTUyBjb21iaW5hdG9yc1xyXG4gICAgICAgICAqIGxpa2UgYD5gIG9yIGB+YC4gSXQncyBzdGlsbCBwb3NzaWJsZSB0byByZXRyaWV2ZSBlbGVtZW50cyB1c2luZ1xyXG4gICAgICAgICAqIGBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnficpYCBidXQgaXQgbmVlZHMgdG8gYmUgZXNjYXBlZCB3aGVuIHVzaW5nXHJcbiAgICAgICAgICogYGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNcXFxcficpYCBmb3IgaXQgdG8gYmUgdmFsaWQuIFRoZSBvbmx5XHJcbiAgICAgICAgICogcmVxdWlyZW1lbnRzIGZvciBgaWRgcyBhcmUgdGhlbSB0byBiZSB1bmlxdWUgb24gdGhlIHBhZ2UgYW5kIHRvIG5vdCBiZVxyXG4gICAgICAgICAqIGVtcHR5IChgaWQ9XCJcImApLiBCZWNhdXNlIG9mIHRoYXQsIHdoZW4gcGFzc2luZyBhbiBpZCBzZWxlY3RvciwgaXQgc2hvdWxkXHJcbiAgICAgICAgICogYmUgcHJvcGVybHkgZXNjYXBlZCBmb3IgaXQgdG8gd29yayB3aXRoIGBxdWVyeVNlbGVjdG9yYC4gV2UgY291bGQgY2hlY2tcclxuICAgICAgICAgKiBmb3IgdGhlIGlkIHNlbGVjdG9yIHRvIGJlIHNpbXBsZSAobm8gQ1NTIGNvbWJpbmF0b3JzIGArID5+YCkgYnV0IHRoYXRcclxuICAgICAgICAgKiB3b3VsZCBtYWtlIHRoaW5ncyBpbmNvbnNpc3RlbnQgc2luY2UgdGhleSBhcmUgdmFsaWQgY2hhcmFjdGVycyBmb3IgYW5cclxuICAgICAgICAgKiBgaWRgIGJ1dCB3b3VsZCBuZWVkIHRvIGJlIGVzY2FwZWQgd2hlbiB1c2luZyBgcXVlcnlTZWxlY3RvcmAsIGJyZWFraW5nXHJcbiAgICAgICAgICogdGhlaXIgdXNhZ2UgYW5kIGVuZGluZyB1cCBpbiBubyBzZWxlY3RvciByZXR1cm5lZC4gU2VsZWN0b3JzIG5lZWQgdG8gYmVcclxuICAgICAgICAgKiBlc2NhcGVkOlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogLSBgIzEtdGhpbmdgIGJlY29tZXMgYCNcXDMxIC10aGluZ2BcclxuICAgICAgICAgKiAtIGAjd2l0aH5zeW1ib2xzYCBiZWNvbWVzIGAjd2l0aFxcXFx+c3ltYm9sc2BcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIC0gTW9yZSBpbmZvcm1hdGlvbiBhYm91dCAgdGhlIHRvcGljIGNhbiBiZSBmb3VuZCBhdFxyXG4gICAgICAgICAqICAgaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2h0bWw1LWlkLWNsYXNzLlxyXG4gICAgICAgICAqIC0gUHJhY3RpY2FsIGV4YW1wbGU6IGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9kZW1vL2h0bWw1LWlkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB0eXBlb2YgcG9zaXRpb24uZWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNJZFNlbGVjdG9yIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwb3NpdGlvbi5lbC5zbGljZSgxKSkpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZvdW5kRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvc2l0aW9uLmVsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNJZFNlbGVjdG9yICYmIGZvdW5kRWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgVGhlIHNlbGVjdG9yIFwiJHtwb3NpdGlvbi5lbH1cIiBzaG91bGQgYmUgcGFzc2VkIGFzIFwiZWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyR7cG9zaXRpb24uZWx9JylcIiBiZWNhdXNlIGl0IHN0YXJ0cyB3aXRoIFwiI1wiLmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gdG8gYXZvaWQgb3RoZXIgd2FybmluZ3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBUaGUgc2VsZWN0b3IgXCIke3Bvc2l0aW9uLmVsfVwiIGlzIGludmFsaWQuIElmIHlvdSBhcmUgdXNpbmcgYW4gaWQgc2VsZWN0b3IsIG1ha2Ugc3VyZSB0byBlc2NhcGUgaXQuIFlvdSBjYW4gZmluZCBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGVzY2FwaW5nIGNoYXJhY3RlcnMgaW4gc2VsZWN0b3JzIGF0IGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9jc3MtZXNjYXBlcyBvciB1c2UgQ1NTLmVzY2FwZSAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NTUy9lc2NhcGUpLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiB0byBhdm9pZCBvdGhlciB3YXJuaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBlbCA9IHR5cGVvZiBwb3NpdGlvbkVsID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICA/IGlzSWRTZWxlY3RvclxyXG4gICAgICAgICAgICAgICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwb3NpdGlvbkVsLnNsaWNlKDEpKVxyXG4gICAgICAgICAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvc2l0aW9uRWwpXHJcbiAgICAgICAgICAgIDogcG9zaXRpb25FbDtcclxuICAgICAgICBpZiAoIWVsKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQ291bGRuJ3QgZmluZCBlbGVtZW50IHVzaW5nIHNlbGVjdG9yIFwiJHtwb3NpdGlvbi5lbH1cIiByZXR1cm5lZCBieSBzY3JvbGxCZWhhdmlvci5gKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY3JvbGxUb09wdGlvbnMgPSBnZXRFbGVtZW50UG9zaXRpb24oZWwsIHBvc2l0aW9uKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHNjcm9sbFRvT3B0aW9ucyA9IHBvc2l0aW9uO1xyXG4gICAgfVxyXG4gICAgaWYgKCdzY3JvbGxCZWhhdmlvcicgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKVxyXG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyhzY3JvbGxUb09wdGlvbnMpO1xyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKHNjcm9sbFRvT3B0aW9ucy5sZWZ0ICE9IG51bGwgPyBzY3JvbGxUb09wdGlvbnMubGVmdCA6IHdpbmRvdy5wYWdlWE9mZnNldCwgc2Nyb2xsVG9PcHRpb25zLnRvcCAhPSBudWxsID8gc2Nyb2xsVG9PcHRpb25zLnRvcCA6IHdpbmRvdy5wYWdlWU9mZnNldCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2Nyb2xsS2V5KHBhdGgsIGRlbHRhKSB7XHJcbiAgICBjb25zdCBwb3NpdGlvbiA9IGhpc3Rvcnkuc3RhdGUgPyBoaXN0b3J5LnN0YXRlLnBvc2l0aW9uIC0gZGVsdGEgOiAtMTtcclxuICAgIHJldHVybiBwb3NpdGlvbiArIHBhdGg7XHJcbn1cclxuY29uc3Qgc2Nyb2xsUG9zaXRpb25zID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24oa2V5LCBzY3JvbGxQb3NpdGlvbikge1xyXG4gICAgc2Nyb2xsUG9zaXRpb25zLnNldChrZXksIHNjcm9sbFBvc2l0aW9uKTtcclxufVxyXG5mdW5jdGlvbiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGtleSkge1xyXG4gICAgY29uc3Qgc2Nyb2xsID0gc2Nyb2xsUG9zaXRpb25zLmdldChrZXkpO1xyXG4gICAgLy8gY29uc3VtZSBpdCBzbyBpdCdzIG5vdCB1c2VkIGFnYWluXHJcbiAgICBzY3JvbGxQb3NpdGlvbnMuZGVsZXRlKGtleSk7XHJcbiAgICByZXR1cm4gc2Nyb2xsO1xyXG59XHJcbi8vIFRPRE86IFJGQyBhYm91dCBob3cgdG8gc2F2ZSBzY3JvbGwgcG9zaXRpb25cclxuLyoqXHJcbiAqIFNjcm9sbEJlaGF2aW9yIGluc3RhbmNlIHVzZWQgYnkgdGhlIHJvdXRlciB0byBjb21wdXRlIGFuZCByZXN0b3JlIHRoZSBzY3JvbGxcclxuICogcG9zaXRpb24gd2hlbiBuYXZpZ2F0aW5nLlxyXG4gKi9cclxuLy8gZXhwb3J0IGludGVyZmFjZSBTY3JvbGxIYW5kbGVyPFNjcm9sbFBvc2l0aW9uRW50cnkgZXh0ZW5kcyBIaXN0b3J5U3RhdGVWYWx1ZSwgU2Nyb2xsUG9zaXRpb24gZXh0ZW5kcyBTY3JvbGxQb3NpdGlvbkVudHJ5PiB7XHJcbi8vICAgLy8gcmV0dXJucyBhIHNjcm9sbCBwb3NpdGlvbiB0aGF0IGNhbiBiZSBzYXZlZCBpbiBoaXN0b3J5XHJcbi8vICAgY29tcHV0ZSgpOiBTY3JvbGxQb3NpdGlvbkVudHJ5XHJcbi8vICAgLy8gY2FuIHRha2UgYW4gZXh0ZW5kZWQgU2Nyb2xsUG9zaXRpb25FbnRyeVxyXG4vLyAgIHNjcm9sbChwb3NpdGlvbjogU2Nyb2xsUG9zaXRpb24pOiB2b2lkXHJcbi8vIH1cclxuLy8gZXhwb3J0IGNvbnN0IHNjcm9sbEhhbmRsZXI6IFNjcm9sbEhhbmRsZXI8U2Nyb2xsUG9zaXRpb24+ID0ge1xyXG4vLyAgIGNvbXB1dGU6IGNvbXB1dGVTY3JvbGwsXHJcbi8vICAgc2Nyb2xsOiBzY3JvbGxUb1Bvc2l0aW9uLFxyXG4vLyB9XG5cbmxldCBjcmVhdGVCYXNlTG9jYXRpb24gPSAoKSA9PiBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0O1xyXG4vKipcclxuICogQ3JlYXRlcyBhIG5vcm1hbGl6ZWQgaGlzdG9yeSBsb2NhdGlvbiBmcm9tIGEgd2luZG93LmxvY2F0aW9uIG9iamVjdFxyXG4gKiBAcGFyYW0gbG9jYXRpb24gLVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQ3VycmVudExvY2F0aW9uKGJhc2UsIGxvY2F0aW9uKSB7XHJcbiAgICBjb25zdCB7IHBhdGhuYW1lLCBzZWFyY2gsIGhhc2ggfSA9IGxvY2F0aW9uO1xyXG4gICAgLy8gYWxsb3dzIGhhc2ggYmFzZWQgdXJsXHJcbiAgICBjb25zdCBoYXNoUG9zID0gYmFzZS5pbmRleE9mKCcjJyk7XHJcbiAgICBpZiAoaGFzaFBvcyA+IC0xKSB7XHJcbiAgICAgICAgLy8gcHJlcGVuZCB0aGUgc3RhcnRpbmcgc2xhc2ggdG8gaGFzaCBzbyB0aGUgdXJsIHN0YXJ0cyB3aXRoIC8jXHJcbiAgICAgICAgbGV0IHBhdGhGcm9tSGFzaCA9IGhhc2guc2xpY2UoMSk7XHJcbiAgICAgICAgaWYgKHBhdGhGcm9tSGFzaFswXSAhPT0gJy8nKVxyXG4gICAgICAgICAgICBwYXRoRnJvbUhhc2ggPSAnLycgKyBwYXRoRnJvbUhhc2g7XHJcbiAgICAgICAgcmV0dXJuIHN0cmlwQmFzZShwYXRoRnJvbUhhc2gsICcnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBhdGggPSBzdHJpcEJhc2UocGF0aG5hbWUsIGJhc2UpO1xyXG4gICAgcmV0dXJuIHBhdGggKyBzZWFyY2ggKyBoYXNoO1xyXG59XHJcbmZ1bmN0aW9uIHVzZUhpc3RvcnlMaXN0ZW5lcnMoYmFzZSwgaGlzdG9yeVN0YXRlLCBjdXJyZW50TG9jYXRpb24sIHJlcGxhY2UpIHtcclxuICAgIGxldCBsaXN0ZW5lcnMgPSBbXTtcclxuICAgIGxldCB0ZWFyZG93bnMgPSBbXTtcclxuICAgIC8vIFRPRE86IHNob3VsZCBpdCBiZSBhIHN0YWNrPyBhIERpY3QuIENoZWNrIGlmIHRoZSBwb3BzdGF0ZSBsaXN0ZW5lclxyXG4gICAgLy8gY2FuIHRyaWdnZXIgdHdpY2VcclxuICAgIGxldCBwYXVzZVN0YXRlID0gbnVsbDtcclxuICAgIGNvbnN0IHBvcFN0YXRlSGFuZGxlciA9ICh7IHN0YXRlLCB9KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdG8gPSBjcmVhdGVDdXJyZW50TG9jYXRpb24oYmFzZSwgbG9jYXRpb24pO1xyXG4gICAgICAgIGNvbnN0IGZyb20gPSBjdXJyZW50TG9jYXRpb24udmFsdWU7XHJcbiAgICAgICAgY29uc3QgZnJvbVN0YXRlID0gaGlzdG9yeVN0YXRlLnZhbHVlO1xyXG4gICAgICAgIGxldCBkZWx0YSA9IDA7XHJcbiAgICAgICAgaWYgKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbi52YWx1ZSA9IHRvO1xyXG4gICAgICAgICAgICBoaXN0b3J5U3RhdGUudmFsdWUgPSBzdGF0ZTtcclxuICAgICAgICAgICAgLy8gaWdub3JlIHRoZSBwb3BzdGF0ZSBhbmQgcmVzZXQgdGhlIHBhdXNlU3RhdGVcclxuICAgICAgICAgICAgaWYgKHBhdXNlU3RhdGUgJiYgcGF1c2VTdGF0ZSA9PT0gZnJvbSkge1xyXG4gICAgICAgICAgICAgICAgcGF1c2VTdGF0ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVsdGEgPSBmcm9tU3RhdGUgPyBzdGF0ZS5wb3NpdGlvbiAtIGZyb21TdGF0ZS5wb3NpdGlvbiA6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXBsYWNlKHRvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coeyBkZWx0YUZyb21DdXJyZW50IH0pXHJcbiAgICAgICAgLy8gSGVyZSB3ZSBjb3VsZCBhbHNvIHJldmVydCB0aGUgbmF2aWdhdGlvbiBieSBjYWxsaW5nIGhpc3RvcnkuZ28oLWRlbHRhKVxyXG4gICAgICAgIC8vIHRoaXMgbGlzdGVuZXIgd2lsbCBoYXZlIHRvIGJlIGFkYXB0ZWQgdG8gbm90IHRyaWdnZXIgYWdhaW4gYW5kIHRvIHdhaXQgZm9yIHRoZSB1cmxcclxuICAgICAgICAvLyB0byBiZSB1cGRhdGVkIGJlZm9yZSB0cmlnZ2VyaW5nIHRoZSBsaXN0ZW5lcnMuIFNvbWUga2luZCBvZiB2YWxpZGF0aW9uIGZ1bmN0aW9uIHdvdWxkIGFsc29cclxuICAgICAgICAvLyBuZWVkIHRvIGJlIHBhc3NlZCB0byB0aGUgbGlzdGVuZXJzIHNvIHRoZSBuYXZpZ2F0aW9uIGNhbiBiZSBhY2NlcHRlZFxyXG4gICAgICAgIC8vIGNhbGwgYWxsIGxpc3RlbmVyc1xyXG4gICAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IHtcclxuICAgICAgICAgICAgbGlzdGVuZXIoY3VycmVudExvY2F0aW9uLnZhbHVlLCBmcm9tLCB7XHJcbiAgICAgICAgICAgICAgICBkZWx0YSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IE5hdmlnYXRpb25UeXBlLnBvcCxcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogZGVsdGFcclxuICAgICAgICAgICAgICAgICAgICA/IGRlbHRhID4gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IE5hdmlnYXRpb25EaXJlY3Rpb24uZm9yd2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IE5hdmlnYXRpb25EaXJlY3Rpb24uYmFja1xyXG4gICAgICAgICAgICAgICAgICAgIDogTmF2aWdhdGlvbkRpcmVjdGlvbi51bmtub3duLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBwYXVzZUxpc3RlbmVycygpIHtcclxuICAgICAgICBwYXVzZVN0YXRlID0gY3VycmVudExvY2F0aW9uLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gbGlzdGVuKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgLy8gc2V0dXAgdGhlIGxpc3RlbmVyIGFuZCBwcmVwYXJlIHRlYXJkb3duIGNhbGxiYWNrc1xyXG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICBjb25zdCB0ZWFyZG93biA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKVxyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0ZWFyZG93bnMucHVzaCh0ZWFyZG93bik7XHJcbiAgICAgICAgcmV0dXJuIHRlYXJkb3duO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYmVmb3JlVW5sb2FkTGlzdGVuZXIoKSB7XHJcbiAgICAgICAgY29uc3QgeyBoaXN0b3J5IH0gPSB3aW5kb3c7XHJcbiAgICAgICAgaWYgKCFoaXN0b3J5LnN0YXRlKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoYXNzaWduKHt9LCBoaXN0b3J5LnN0YXRlLCB7IHNjcm9sbDogY29tcHV0ZVNjcm9sbFBvc2l0aW9uKCkgfSksICcnKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCB0ZWFyZG93biBvZiB0ZWFyZG93bnMpXHJcbiAgICAgICAgICAgIHRlYXJkb3duKCk7XHJcbiAgICAgICAgdGVhcmRvd25zID0gW107XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgcG9wU3RhdGVIYW5kbGVyKTtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgYmVmb3JlVW5sb2FkTGlzdGVuZXIpO1xyXG4gICAgfVxyXG4gICAgLy8gc2V0dXAgdGhlIGxpc3RlbmVycyBhbmQgcHJlcGFyZSB0ZWFyZG93biBjYWxsYmFja3NcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHBvcFN0YXRlSGFuZGxlcik7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgYmVmb3JlVW5sb2FkTGlzdGVuZXIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwYXVzZUxpc3RlbmVycyxcclxuICAgICAgICBsaXN0ZW4sXHJcbiAgICAgICAgZGVzdHJveSxcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBzdGF0ZSBvYmplY3RcclxuICovXHJcbmZ1bmN0aW9uIGJ1aWxkU3RhdGUoYmFjaywgY3VycmVudCwgZm9yd2FyZCwgcmVwbGFjZWQgPSBmYWxzZSwgY29tcHV0ZVNjcm9sbCA9IGZhbHNlKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJhY2ssXHJcbiAgICAgICAgY3VycmVudCxcclxuICAgICAgICBmb3J3YXJkLFxyXG4gICAgICAgIHJlcGxhY2VkLFxyXG4gICAgICAgIHBvc2l0aW9uOiB3aW5kb3cuaGlzdG9yeS5sZW5ndGgsXHJcbiAgICAgICAgc2Nyb2xsOiBjb21wdXRlU2Nyb2xsID8gY29tcHV0ZVNjcm9sbFBvc2l0aW9uKCkgOiBudWxsLFxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB1c2VIaXN0b3J5U3RhdGVOYXZpZ2F0aW9uKGJhc2UpIHtcclxuICAgIGNvbnN0IHsgaGlzdG9yeSwgbG9jYXRpb24gfSA9IHdpbmRvdztcclxuICAgIC8vIHByaXZhdGUgdmFyaWFibGVzXHJcbiAgICBsZXQgY3VycmVudExvY2F0aW9uID0ge1xyXG4gICAgICAgIHZhbHVlOiBjcmVhdGVDdXJyZW50TG9jYXRpb24oYmFzZSwgbG9jYXRpb24pLFxyXG4gICAgfTtcclxuICAgIGxldCBoaXN0b3J5U3RhdGUgPSB7IHZhbHVlOiBoaXN0b3J5LnN0YXRlIH07XHJcbiAgICAvLyBidWlsZCBjdXJyZW50IGhpc3RvcnkgZW50cnkgYXMgdGhpcyBpcyBhIGZyZXNoIG5hdmlnYXRpb25cclxuICAgIGlmICghaGlzdG9yeVN0YXRlLnZhbHVlKSB7XHJcbiAgICAgICAgY2hhbmdlTG9jYXRpb24oY3VycmVudExvY2F0aW9uLnZhbHVlLCB7XHJcbiAgICAgICAgICAgIGJhY2s6IG51bGwsXHJcbiAgICAgICAgICAgIGN1cnJlbnQ6IGN1cnJlbnRMb2NhdGlvbi52YWx1ZSxcclxuICAgICAgICAgICAgZm9yd2FyZDogbnVsbCxcclxuICAgICAgICAgICAgLy8gdGhlIGxlbmd0aCBpcyBvZmYgYnkgb25lLCB3ZSBuZWVkIHRvIGRlY3JlYXNlIGl0XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBoaXN0b3J5Lmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICAgIHJlcGxhY2VkOiB0cnVlLFxyXG4gICAgICAgICAgICAvLyBkb24ndCBhZGQgYSBzY3JvbGwgYXMgdGhlIHVzZXIgbWF5IGhhdmUgYW4gYW5jaG9yIGFuZCB3ZSB3YW50XHJcbiAgICAgICAgICAgIC8vIHNjcm9sbEJlaGF2aW9yIHRvIGJlIHRyaWdnZXJlZCB3aXRob3V0IGEgc2F2ZWQgcG9zaXRpb25cclxuICAgICAgICAgICAgc2Nyb2xsOiBudWxsLFxyXG4gICAgICAgIH0sIHRydWUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY2hhbmdlTG9jYXRpb24odG8sIHN0YXRlLCByZXBsYWNlKSB7XHJcbiAgICAgICAgLy8gd2hlbiB0aGUgYmFzZSBoYXMgYSBgI2AsIG9ubHkgdXNlIHRoYXQgZm9yIHRoZSBVUkxcclxuICAgICAgICBjb25zdCBoYXNoSW5kZXggPSBiYXNlLmluZGV4T2YoJyMnKTtcclxuICAgICAgICBjb25zdCB1cmwgPSBoYXNoSW5kZXggPiAtMVxyXG4gICAgICAgICAgICA/IGJhc2Uuc2xpY2UoaGFzaEluZGV4KSArIHRvXHJcbiAgICAgICAgICAgIDogY3JlYXRlQmFzZUxvY2F0aW9uKCkgKyBiYXNlICsgdG87XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gQlJPV1NFUiBRVUlSS1xyXG4gICAgICAgICAgICAvLyBOT1RFOiBTYWZhcmkgdGhyb3dzIGEgU2VjdXJpdHlFcnJvciB3aGVuIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiAxMDAgdGltZXMgaW4gMzAgc2Vjb25kc1xyXG4gICAgICAgICAgICBoaXN0b3J5W3JlcGxhY2UgPyAncmVwbGFjZVN0YXRlJyA6ICdwdXNoU3RhdGUnXShzdGF0ZSwgJycsIHVybCk7XHJcbiAgICAgICAgICAgIGhpc3RvcnlTdGF0ZS52YWx1ZSA9IHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ0Vycm9yIHdpdGggcHVzaC9yZXBsYWNlIFN0YXRlJywgZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBGb3JjZSB0aGUgbmF2aWdhdGlvbiwgdGhpcyBhbHNvIHJlc2V0cyB0aGUgY2FsbCBjb3VudFxyXG4gICAgICAgICAgICBsb2NhdGlvbltyZXBsYWNlID8gJ3JlcGxhY2UnIDogJ2Fzc2lnbiddKHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVwbGFjZSh0bywgZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gYXNzaWduKHt9LCBoaXN0b3J5LnN0YXRlLCBidWlsZFN0YXRlKGhpc3RvcnlTdGF0ZS52YWx1ZS5iYWNrLCBcclxuICAgICAgICAvLyBrZWVwIGJhY2sgYW5kIGZvcndhcmQgZW50cmllcyBidXQgb3ZlcnJpZGUgY3VycmVudCBwb3NpdGlvblxyXG4gICAgICAgIHRvLCBoaXN0b3J5U3RhdGUudmFsdWUuZm9yd2FyZCwgdHJ1ZSksIGRhdGEsIHsgcG9zaXRpb246IGhpc3RvcnlTdGF0ZS52YWx1ZS5wb3NpdGlvbiB9KTtcclxuICAgICAgICBjaGFuZ2VMb2NhdGlvbih0bywgc3RhdGUsIHRydWUpO1xyXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbi52YWx1ZSA9IHRvO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcHVzaCh0bywgZGF0YSkge1xyXG4gICAgICAgIC8vIEFkZCB0byBjdXJyZW50IGVudHJ5IHRoZSBpbmZvcm1hdGlvbiBvZiB3aGVyZSB3ZSBhcmUgZ29pbmdcclxuICAgICAgICAvLyBhcyB3ZWxsIGFzIHNhdmluZyB0aGUgY3VycmVudCBwb3NpdGlvblxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IGFzc2lnbih7fSwgXHJcbiAgICAgICAgLy8gdXNlIGN1cnJlbnQgaGlzdG9yeSBzdGF0ZSB0byBncmFjZWZ1bGx5IGhhbmRsZSBhIHdyb25nIGNhbGwgdG9cclxuICAgICAgICAvLyBoaXN0b3J5LnJlcGxhY2VTdGF0ZVxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyLW5leHQvaXNzdWVzLzM2NlxyXG4gICAgICAgIGhpc3RvcnlTdGF0ZS52YWx1ZSwgaGlzdG9yeS5zdGF0ZSwge1xyXG4gICAgICAgICAgICBmb3J3YXJkOiB0byxcclxuICAgICAgICAgICAgc2Nyb2xsOiBjb21wdXRlU2Nyb2xsUG9zaXRpb24oKSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoaXN0b3J5LnN0YXRlKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYGhpc3Rvcnkuc3RhdGUgc2VlbXMgdG8gaGF2ZSBiZWVuIG1hbnVhbGx5IHJlcGxhY2VkIHdpdGhvdXQgcHJlc2VydmluZyB0aGUgbmVjZXNzYXJ5IHZhbHVlcy4gTWFrZSBzdXJlIHRvIHByZXNlcnZlIGV4aXN0aW5nIGhpc3Rvcnkgc3RhdGUgaWYgeW91IGFyZSBtYW51YWxseSBjYWxsaW5nIGhpc3RvcnkucmVwbGFjZVN0YXRlOlxcblxcbmAgK1xyXG4gICAgICAgICAgICAgICAgYGhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3Rvcnkuc3RhdGUsICcnLCB1cmwpXFxuXFxuYCArXHJcbiAgICAgICAgICAgICAgICBgWW91IGNhbiBmaW5kIG1vcmUgaW5mb3JtYXRpb24gYXQgaHR0cHM6Ly9uZXh0LnJvdXRlci52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uLyN1c2FnZS1vZi1oaXN0b3J5LXN0YXRlLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjaGFuZ2VMb2NhdGlvbihjdXJyZW50U3RhdGUuY3VycmVudCwgY3VycmVudFN0YXRlLCB0cnVlKTtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IGFzc2lnbih7fSwgYnVpbGRTdGF0ZShjdXJyZW50TG9jYXRpb24udmFsdWUsIHRvLCBudWxsKSwgeyBwb3NpdGlvbjogY3VycmVudFN0YXRlLnBvc2l0aW9uICsgMSB9LCBkYXRhKTtcclxuICAgICAgICBjaGFuZ2VMb2NhdGlvbih0bywgc3RhdGUsIGZhbHNlKTtcclxuICAgICAgICBjdXJyZW50TG9jYXRpb24udmFsdWUgPSB0bztcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbG9jYXRpb246IGN1cnJlbnRMb2NhdGlvbixcclxuICAgICAgICBzdGF0ZTogaGlzdG9yeVN0YXRlLFxyXG4gICAgICAgIHB1c2gsXHJcbiAgICAgICAgcmVwbGFjZSxcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gSFRNTDUgaGlzdG9yeS4gTW9zdCBjb21tb24gaGlzdG9yeSBmb3Igc2luZ2xlIHBhZ2UgYXBwbGljYXRpb25zLlxyXG4gKlxyXG4gKiBAcGFyYW0gYmFzZSAtXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVXZWJIaXN0b3J5KGJhc2UpIHtcclxuICAgIGJhc2UgPSBub3JtYWxpemVCYXNlKGJhc2UpO1xyXG4gICAgY29uc3QgaGlzdG9yeU5hdmlnYXRpb24gPSB1c2VIaXN0b3J5U3RhdGVOYXZpZ2F0aW9uKGJhc2UpO1xyXG4gICAgY29uc3QgaGlzdG9yeUxpc3RlbmVycyA9IHVzZUhpc3RvcnlMaXN0ZW5lcnMoYmFzZSwgaGlzdG9yeU5hdmlnYXRpb24uc3RhdGUsIGhpc3RvcnlOYXZpZ2F0aW9uLmxvY2F0aW9uLCBoaXN0b3J5TmF2aWdhdGlvbi5yZXBsYWNlKTtcclxuICAgIGZ1bmN0aW9uIGdvKGRlbHRhLCB0cmlnZ2VyTGlzdGVuZXJzID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICghdHJpZ2dlckxpc3RlbmVycylcclxuICAgICAgICAgICAgaGlzdG9yeUxpc3RlbmVycy5wYXVzZUxpc3RlbmVycygpO1xyXG4gICAgICAgIGhpc3RvcnkuZ28oZGVsdGEpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgcm91dGVySGlzdG9yeSA9IGFzc2lnbih7XHJcbiAgICAgICAgLy8gaXQncyBvdmVycmlkZGVuIHJpZ2h0IGFmdGVyXHJcbiAgICAgICAgbG9jYXRpb246ICcnLFxyXG4gICAgICAgIGJhc2UsXHJcbiAgICAgICAgZ28sXHJcbiAgICAgICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZi5iaW5kKG51bGwsIGJhc2UpLFxyXG4gICAgfSwgaGlzdG9yeU5hdmlnYXRpb24sIGhpc3RvcnlMaXN0ZW5lcnMpO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJvdXRlckhpc3RvcnksICdsb2NhdGlvbicsIHtcclxuICAgICAgICBnZXQ6ICgpID0+IGhpc3RvcnlOYXZpZ2F0aW9uLmxvY2F0aW9uLnZhbHVlLFxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocm91dGVySGlzdG9yeSwgJ3N0YXRlJywge1xyXG4gICAgICAgIGdldDogKCkgPT4gaGlzdG9yeU5hdmlnYXRpb24uc3RhdGUudmFsdWUsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiByb3V0ZXJIaXN0b3J5O1xyXG59XG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgaW4tbWVtb3J5IGJhc2VkIGhpc3RvcnkuIFRoZSBtYWluIHB1cnBvc2Ugb2YgdGhpcyBoaXN0b3J5IGlzIHRvIGhhbmRsZSBTU1IuIEl0IHN0YXJ0cyBpbiBhIHNwZWNpYWwgbG9jYXRpb24gdGhhdCBpcyBub3doZXJlLlxyXG4gKiBJdCdzIHVwIHRvIHRoZSB1c2VyIHRvIHJlcGxhY2UgdGhhdCBsb2NhdGlvbiB3aXRoIHRoZSBzdGFydGVyIGxvY2F0aW9uIGJ5IGVpdGhlciBjYWxsaW5nIGByb3V0ZXIucHVzaGAgb3IgYHJvdXRlci5yZXBsYWNlYC5cclxuICpcclxuICogQHBhcmFtIGJhc2UgLSBCYXNlIGFwcGxpZWQgdG8gYWxsIHVybHMsIGRlZmF1bHRzIHRvICcvJ1xyXG4gKiBAcmV0dXJucyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgcm91dGVyIGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KGJhc2UgPSAnJykge1xyXG4gICAgbGV0IGxpc3RlbmVycyA9IFtdO1xyXG4gICAgbGV0IHF1ZXVlID0gW1NUQVJUXTtcclxuICAgIGxldCBwb3NpdGlvbiA9IDA7XHJcbiAgICBmdW5jdGlvbiBzZXRMb2NhdGlvbihsb2NhdGlvbikge1xyXG4gICAgICAgIHBvc2l0aW9uKys7XHJcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSBxdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gd2UgYXJlIGF0IHRoZSBlbmQsIHdlIGNhbiBzaW1wbHkgYXBwZW5kIGEgbmV3IGVudHJ5XHJcbiAgICAgICAgICAgIHF1ZXVlLnB1c2gobG9jYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gd2UgYXJlIGluIHRoZSBtaWRkbGUsIHdlIHJlbW92ZSBldmVyeXRoaW5nIGZyb20gaGVyZSBpbiB0aGUgcXVldWVcclxuICAgICAgICAgICAgcXVldWUuc3BsaWNlKHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgcXVldWUucHVzaChsb2NhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdHJpZ2dlckxpc3RlbmVycyh0bywgZnJvbSwgeyBkaXJlY3Rpb24sIGRlbHRhIH0pIHtcclxuICAgICAgICBjb25zdCBpbmZvID0ge1xyXG4gICAgICAgICAgICBkaXJlY3Rpb24sXHJcbiAgICAgICAgICAgIGRlbHRhLFxyXG4gICAgICAgICAgICB0eXBlOiBOYXZpZ2F0aW9uVHlwZS5wb3AsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGxldCBjYWxsYmFjayBvZiBsaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sodG8sIGZyb20sIGluZm8pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHJvdXRlckhpc3RvcnkgPSB7XHJcbiAgICAgICAgLy8gcmV3cml0dGVuIGJ5IE9iamVjdC5kZWZpbmVQcm9wZXJ0eVxyXG4gICAgICAgIGxvY2F0aW9uOiBTVEFSVCxcclxuICAgICAgICBzdGF0ZToge30sXHJcbiAgICAgICAgYmFzZSxcclxuICAgICAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLmJpbmQobnVsbCwgYmFzZSksXHJcbiAgICAgICAgcmVwbGFjZSh0bykge1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgY3VycmVudCBlbnRyeSBhbmQgZGVjcmVtZW50IHBvc2l0aW9uXHJcbiAgICAgICAgICAgIHF1ZXVlLnNwbGljZShwb3NpdGlvbi0tLCAxKTtcclxuICAgICAgICAgICAgc2V0TG9jYXRpb24odG8pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHVzaCh0bywgZGF0YSkge1xyXG4gICAgICAgICAgICBzZXRMb2NhdGlvbih0byk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaXN0ZW4oY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVycyA9IFtdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ28oZGVsdGEsIHNob3VsZFRyaWdnZXIgPSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZyb20gPSB0aGlzLmxvY2F0aW9uO1xyXG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBcclxuICAgICAgICAgICAgLy8gd2UgYXJlIGNvbnNpZGVyaW5nIGRlbHRhID09PSAwIGdvaW5nIGZvcndhcmQsIGJ1dCBpbiBhYnN0cmFjdCBtb2RlXHJcbiAgICAgICAgICAgIC8vIHVzaW5nIDAgZm9yIHRoZSBkZWx0YSBkb2Vzbid0IG1ha2Ugc2Vuc2UgbGlrZSBpdCBkb2VzIGluIGh0bWw1IHdoZXJlXHJcbiAgICAgICAgICAgIC8vIGl0IHJlbG9hZHMgdGhlIHBhZ2VcclxuICAgICAgICAgICAgZGVsdGEgPCAwID8gTmF2aWdhdGlvbkRpcmVjdGlvbi5iYWNrIDogTmF2aWdhdGlvbkRpcmVjdGlvbi5mb3J3YXJkO1xyXG4gICAgICAgICAgICBwb3NpdGlvbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKHBvc2l0aW9uICsgZGVsdGEsIHF1ZXVlLmxlbmd0aCAtIDEpKTtcclxuICAgICAgICAgICAgaWYgKHNob3VsZFRyaWdnZXIpIHtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXJMaXN0ZW5lcnModGhpcy5sb2NhdGlvbiwgZnJvbSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocm91dGVySGlzdG9yeSwgJ2xvY2F0aW9uJywge1xyXG4gICAgICAgIGdldDogKCkgPT4gcXVldWVbcG9zaXRpb25dLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcm91dGVySGlzdG9yeTtcclxufVxuXG4vKipcclxuICogQ3JlYXRlcyBhIGhhc2ggaGlzdG9yeS4gVXNlZnVsIGZvciB3ZWIgYXBwbGljYXRpb25zIHdpdGggbm8gaG9zdCAoZS5nLlxyXG4gKiBgZmlsZTovL2ApIG9yIHdoZW4gY29uZmlndXJpbmcgYSBzZXJ2ZXIgdG8gaGFuZGxlIGFueSBVUkwuXHJcbiAqXHJcbiAqIEBwYXJhbSBiYXNlIC0gb3B0aW9uYWwgYmFzZSB0byBwcm92aWRlLiBEZWZhdWx0cyB0byBgbG9jYXRpb24ucGF0aG5hbWVgIG9yXHJcbiAqIGAvYCBpZiBhdCByb290LiBJZiB0aGVyZSBpcyBhIGBiYXNlYCB0YWcgaW4gdGhlIGBoZWFkYCwgaXRzIHZhbHVlIHdpbGwgYmVcclxuICogKippZ25vcmVkKiouXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGpzXHJcbiAqIC8vIGF0IGh0dHBzOi8vZXhhbXBsZS5jb20vZm9sZGVyXHJcbiAqIGNyZWF0ZVdlYkhhc2hIaXN0b3J5KCkgLy8gZ2l2ZXMgYSB1cmwgb2YgYGh0dHBzOi8vZXhhbXBsZS5jb20vZm9sZGVyI2BcclxuICogY3JlYXRlV2ViSGFzaEhpc3RvcnkoJy9mb2xkZXIvJykgLy8gZ2l2ZXMgYSB1cmwgb2YgYGh0dHBzOi8vZXhhbXBsZS5jb20vZm9sZGVyLyNgXHJcbiAqIC8vIGlmIHRoZSBgI2AgaXMgcHJvdmlkZWQgaW4gdGhlIGJhc2UsIGl0IHdvbid0IGJlIGFkZGVkIGJ5IGBjcmVhdGVXZWJIYXNoSGlzdG9yeWBcclxuICogY3JlYXRlV2ViSGFzaEhpc3RvcnkoJy9mb2xkZXIvIy9hcHAvJykgLy8gZ2l2ZXMgYSB1cmwgb2YgYGh0dHBzOi8vZXhhbXBsZS5jb20vZm9sZGVyLyMvYXBwL2BcclxuICogLy8geW91IHNob3VsZCBhdm9pZCBkb2luZyB0aGlzIGJlY2F1c2UgaXQgY2hhbmdlcyB0aGUgb3JpZ2luYWwgdXJsIGFuZCBicmVha3MgY29weWluZyB1cmxzXHJcbiAqIGNyZWF0ZVdlYkhhc2hIaXN0b3J5KCcvb3RoZXItZm9sZGVyLycpIC8vIGdpdmVzIGEgdXJsIG9mIGBodHRwczovL2V4YW1wbGUuY29tL290aGVyLWZvbGRlci8jYFxyXG4gKlxyXG4gKiAvLyBhdCBmaWxlOi8vL3Vzci9ldGMvZm9sZGVyL2luZGV4Lmh0bWxcclxuICogLy8gZm9yIGxvY2F0aW9ucyB3aXRoIG5vIGBob3N0YCwgdGhlIGJhc2UgaXMgaWdub3JlZFxyXG4gKiBjcmVhdGVXZWJIYXNoSGlzdG9yeSgnL2lBbUlnbm9yZWQnKSAvLyBnaXZlcyBhIHVybCBvZiBgZmlsZTovLy91c3IvZXRjL2ZvbGRlci9pbmRleC5odG1sI2BcclxuICogYGBgXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVXZWJIYXNoSGlzdG9yeShiYXNlKSB7XHJcbiAgICAvLyBNYWtlIHN1cmUgdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBmaW5lIGluIHRlcm1zIG9mIGVuY29kaW5nLCBzcGVjaWFsbHkgZm9yIElFMTFcclxuICAgIC8vIGZvciBgZmlsZTovL2AsIGRpcmVjdGx5IHVzZSB0aGUgcGF0aG5hbWUgYW5kIGlnbm9yZSB0aGUgYmFzZVxyXG4gICAgLy8gbG9jYXRpb24ucGF0aG5hbWUgY29udGFpbnMgYW4gaW5pdGlhbCBgL2AgZXZlbiBhdCB0aGUgcm9vdDogYGh0dHBzOi8vZXhhbXBsZS5jb21gXHJcbiAgICBiYXNlID0gbG9jYXRpb24uaG9zdCA/IGJhc2UgfHwgbG9jYXRpb24ucGF0aG5hbWUgOiAnJztcclxuICAgIC8vIGFsbG93IHRoZSB1c2VyIHRvIHByb3ZpZGUgYSBgI2AgaW4gdGhlIG1pZGRsZTogYC9iYXNlLyMvYXBwYFxyXG4gICAgaWYgKGJhc2UuaW5kZXhPZignIycpIDwgMClcclxuICAgICAgICBiYXNlICs9ICcjJztcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWJhc2UuZW5kc1dpdGgoJyMvJykgJiYgIWJhc2UuZW5kc1dpdGgoJyMnKSkge1xyXG4gICAgICAgIHdhcm4oYEEgaGFzaCBiYXNlIG11c3QgZW5kIHdpdGggYSBcIiNcIjpcXG5cIiR7YmFzZX1cIiBzaG91bGQgYmUgXCIke2Jhc2UucmVwbGFjZSgvIy4qJC8sICcjJyl9XCIuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3JlYXRlV2ViSGlzdG9yeShiYXNlKTtcclxufVxuXG5mdW5jdGlvbiBpc1JvdXRlTG9jYXRpb24ocm91dGUpIHtcclxuICAgIHJldHVybiB0eXBlb2Ygcm91dGUgPT09ICdzdHJpbmcnIHx8IChyb3V0ZSAmJiB0eXBlb2Ygcm91dGUgPT09ICdvYmplY3QnKTtcclxufVxyXG5mdW5jdGlvbiBpc1JvdXRlTmFtZShuYW1lKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuYW1lID09PSAnc3ltYm9sJztcclxufVxuXG4vKipcclxuICogSW5pdGlhbCByb3V0ZSBsb2NhdGlvbiB3aGVyZSB0aGUgcm91dGVyIGlzLiBDYW4gYmUgdXNlZCBpbiBuYXZpZ2F0aW9uIGd1YXJkc1xyXG4gKiB0byBkaWZmZXJlbnRpYXRlIHRoZSBpbml0aWFsIG5hdmlnYXRpb24uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGpzXHJcbiAqIGltcG9ydCB7IFNUQVJUX0xPQ0FUSU9OIH0gZnJvbSAndnVlLXJvdXRlcidcclxuICpcclxuICogcm91dGVyLmJlZm9yZUVhY2goKHRvLCBmcm9tKSA9PiB7XHJcbiAqICAgaWYgKGZyb20gPT09IFNUQVJUX0xPQ0FUSU9OKSB7XHJcbiAqICAgICAvLyBpbml0aWFsIG5hdmlnYXRpb25cclxuICogICB9XHJcbiAqIH0pXHJcbiAqIGBgYFxyXG4gKi9cclxuY29uc3QgU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCA9IHtcclxuICAgIHBhdGg6ICcvJyxcclxuICAgIG5hbWU6IHVuZGVmaW5lZCxcclxuICAgIHBhcmFtczoge30sXHJcbiAgICBxdWVyeToge30sXHJcbiAgICBoYXNoOiAnJyxcclxuICAgIGZ1bGxQYXRoOiAnLycsXHJcbiAgICBtYXRjaGVkOiBbXSxcclxuICAgIG1ldGE6IHt9LFxyXG4gICAgcmVkaXJlY3RlZEZyb206IHVuZGVmaW5lZCxcclxufTtcblxuY29uc3QgTmF2aWdhdGlvbkZhaWx1cmVTeW1ib2wgPSAvKiNfX1BVUkVfXyovIFBvbHlTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ25hdmlnYXRpb24gZmFpbHVyZScgOiAnbmYnKTtcclxuLyoqXHJcbiAqIEVudW1lcmF0aW9uIHdpdGggYWxsIHBvc3NpYmxlIHR5cGVzIGZvciBuYXZpZ2F0aW9uIGZhaWx1cmVzLiBDYW4gYmUgcGFzc2VkIHRvXHJcbiAqIHtAbGluayBpc05hdmlnYXRpb25GYWlsdXJlfSB0byBjaGVjayBmb3Igc3BlY2lmaWMgZmFpbHVyZXMuXHJcbiAqL1xyXG52YXIgTmF2aWdhdGlvbkZhaWx1cmVUeXBlO1xyXG4oZnVuY3Rpb24gKE5hdmlnYXRpb25GYWlsdXJlVHlwZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBhYm9ydGVkIG5hdmlnYXRpb24gaXMgYSBuYXZpZ2F0aW9uIHRoYXQgZmFpbGVkIGJlY2F1c2UgYSBuYXZpZ2F0aW9uXHJcbiAgICAgKiBndWFyZCByZXR1cm5lZCBgZmFsc2VgIG9yIGNhbGxlZCBgbmV4dChmYWxzZSlgXHJcbiAgICAgKi9cclxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZVtOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbXCJhYm9ydGVkXCJdID0gNF0gPSBcImFib3J0ZWRcIjtcclxuICAgIC8qKlxyXG4gICAgICogQSBjYW5jZWxsZWQgbmF2aWdhdGlvbiBpcyBhIG5hdmlnYXRpb24gdGhhdCBmYWlsZWQgYmVjYXVzZSBhIG1vcmUgcmVjZW50XHJcbiAgICAgKiBuYXZpZ2F0aW9uIGZpbmlzaGVkIHN0YXJ0ZWQgKG5vdCBuZWNlc3NhcmlseSBmaW5pc2hlZCkuXHJcbiAgICAgKi9cclxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZVtOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbXCJjYW5jZWxsZWRcIl0gPSA4XSA9IFwiY2FuY2VsbGVkXCI7XHJcbiAgICAvKipcclxuICAgICAqIEEgZHVwbGljYXRlZCBuYXZpZ2F0aW9uIGlzIGEgbmF2aWdhdGlvbiB0aGF0IGZhaWxlZCBiZWNhdXNlIGl0IHdhc1xyXG4gICAgICogaW5pdGlhdGVkIHdoaWxlIGFscmVhZHkgYmVpbmcgYXQgdGhlIGV4YWN0IHNhbWUgbG9jYXRpb24uXHJcbiAgICAgKi9cclxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZVtOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbXCJkdXBsaWNhdGVkXCJdID0gMTZdID0gXCJkdXBsaWNhdGVkXCI7XHJcbn0pKE5hdmlnYXRpb25GYWlsdXJlVHlwZSB8fCAoTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0ge30pKTtcclxuLy8gREVWIG9ubHkgZGVidWcgbWVzc2FnZXNcclxuY29uc3QgRXJyb3JUeXBlTWVzc2FnZXMgPSB7XHJcbiAgICBbMSAvKiBNQVRDSEVSX05PVF9GT1VORCAqL10oeyBsb2NhdGlvbiwgY3VycmVudExvY2F0aW9uIH0pIHtcclxuICAgICAgICByZXR1cm4gYE5vIG1hdGNoIGZvclxcbiAke0pTT04uc3RyaW5naWZ5KGxvY2F0aW9uKX0ke2N1cnJlbnRMb2NhdGlvblxyXG4gICAgICAgICAgICA/ICdcXG53aGlsZSBiZWluZyBhdFxcbicgKyBKU09OLnN0cmluZ2lmeShjdXJyZW50TG9jYXRpb24pXHJcbiAgICAgICAgICAgIDogJyd9YDtcclxuICAgIH0sXHJcbiAgICBbMiAvKiBOQVZJR0FUSU9OX0dVQVJEX1JFRElSRUNUICovXSh7IGZyb20sIHRvLCB9KSB7XHJcbiAgICAgICAgcmV0dXJuIGBSZWRpcmVjdGVkIGZyb20gXCIke2Zyb20uZnVsbFBhdGh9XCIgdG8gXCIke3N0cmluZ2lmeVJvdXRlKHRvKX1cIiB2aWEgYSBuYXZpZ2F0aW9uIGd1YXJkLmA7XHJcbiAgICB9LFxyXG4gICAgWzQgLyogTkFWSUdBVElPTl9BQk9SVEVEICovXSh7IGZyb20sIHRvIH0pIHtcclxuICAgICAgICByZXR1cm4gYE5hdmlnYXRpb24gYWJvcnRlZCBmcm9tIFwiJHtmcm9tLmZ1bGxQYXRofVwiIHRvIFwiJHt0by5mdWxsUGF0aH1cIiB2aWEgYSBuYXZpZ2F0aW9uIGd1YXJkLmA7XHJcbiAgICB9LFxyXG4gICAgWzggLyogTkFWSUdBVElPTl9DQU5DRUxMRUQgKi9dKHsgZnJvbSwgdG8gfSkge1xyXG4gICAgICAgIHJldHVybiBgTmF2aWdhdGlvbiBjYW5jZWxsZWQgZnJvbSBcIiR7ZnJvbS5mdWxsUGF0aH1cIiB0byBcIiR7dG8uZnVsbFBhdGh9XCIgd2l0aCBhIG5ldyBuYXZpZ2F0aW9uLmA7XHJcbiAgICB9LFxyXG4gICAgWzE2IC8qIE5BVklHQVRJT05fRFVQTElDQVRFRCAqL10oeyBmcm9tLCB0byB9KSB7XHJcbiAgICAgICAgcmV0dXJuIGBBdm9pZGVkIHJlZHVuZGFudCBuYXZpZ2F0aW9uIHRvIGN1cnJlbnQgbG9jYXRpb246IFwiJHtmcm9tLmZ1bGxQYXRofVwiLmA7XHJcbiAgICB9LFxyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXJFcnJvcih0eXBlLCBwYXJhbXMpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgIXRydWUpIHtcclxuICAgICAgICByZXR1cm4gYXNzaWduKG5ldyBFcnJvcihFcnJvclR5cGVNZXNzYWdlc1t0eXBlXShwYXJhbXMpKSwge1xyXG4gICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICBbTmF2aWdhdGlvbkZhaWx1cmVTeW1ib2xdOiB0cnVlLFxyXG4gICAgICAgIH0sIHBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYXNzaWduKG5ldyBFcnJvcigpLCB7XHJcbiAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgIFtOYXZpZ2F0aW9uRmFpbHVyZVN5bWJvbF06IHRydWUsXHJcbiAgICAgICAgfSwgcGFyYW1zKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc05hdmlnYXRpb25GYWlsdXJlKGVycm9yLCB0eXBlKSB7XHJcbiAgICByZXR1cm4gKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiZcclxuICAgICAgICBOYXZpZ2F0aW9uRmFpbHVyZVN5bWJvbCBpbiBlcnJvciAmJlxyXG4gICAgICAgICh0eXBlID09IG51bGwgfHwgISEoZXJyb3IudHlwZSAmIHR5cGUpKSk7XHJcbn1cclxuY29uc3QgcHJvcGVydGllc1RvTG9nID0gWydwYXJhbXMnLCAncXVlcnknLCAnaGFzaCddO1xyXG5mdW5jdGlvbiBzdHJpbmdpZnlSb3V0ZSh0bykge1xyXG4gICAgaWYgKHR5cGVvZiB0byA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgcmV0dXJuIHRvO1xyXG4gICAgaWYgKCdwYXRoJyBpbiB0bylcclxuICAgICAgICByZXR1cm4gdG8ucGF0aDtcclxuICAgIGNvbnN0IGxvY2F0aW9uID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBwcm9wZXJ0aWVzVG9Mb2cpIHtcclxuICAgICAgICBpZiAoa2V5IGluIHRvKVxyXG4gICAgICAgICAgICBsb2NhdGlvbltrZXldID0gdG9ba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShsb2NhdGlvbiwgbnVsbCwgMik7XHJcbn1cblxuLy8gZGVmYXVsdCBwYXR0ZXJuIGZvciBhIHBhcmFtOiBub24gZ3JlZWR5IGV2ZXJ5dGhpbmcgYnV0IC9cclxuY29uc3QgQkFTRV9QQVJBTV9QQVRURVJOID0gJ1teL10rPyc7XHJcbmNvbnN0IEJBU0VfUEFUSF9QQVJTRVJfT1BUSU9OUyA9IHtcclxuICAgIHNlbnNpdGl2ZTogZmFsc2UsXHJcbiAgICBzdHJpY3Q6IGZhbHNlLFxyXG4gICAgc3RhcnQ6IHRydWUsXHJcbiAgICBlbmQ6IHRydWUsXHJcbn07XHJcbi8vIFNwZWNpYWwgUmVnZXggY2hhcmFjdGVycyB0aGF0IG11c3QgYmUgZXNjYXBlZCBpbiBzdGF0aWMgdG9rZW5zXHJcbmNvbnN0IFJFR0VYX0NIQVJTX1JFID0gL1suKyo/XiR7fSgpW1xcXS9cXFxcXS9nO1xyXG4vKipcclxuICogQ3JlYXRlcyBhIHBhdGggcGFyc2VyIGZyb20gYW4gYXJyYXkgb2YgU2VnbWVudHMgKGEgc2VnbWVudCBpcyBhbiBhcnJheSBvZiBUb2tlbnMpXHJcbiAqXHJcbiAqIEBwYXJhbSBzZWdtZW50cyAtIGFycmF5IG9mIHNlZ21lbnRzIHJldHVybmVkIGJ5IHRva2VuaXplUGF0aFxyXG4gKiBAcGFyYW0gZXh0cmFPcHRpb25zIC0gb3B0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIHJlZ2V4cFxyXG4gKiBAcmV0dXJucyBhIFBhdGhQYXJzZXJcclxuICovXHJcbmZ1bmN0aW9uIHRva2Vuc1RvUGFyc2VyKHNlZ21lbnRzLCBleHRyYU9wdGlvbnMpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBhc3NpZ24oe30sIEJBU0VfUEFUSF9QQVJTRVJfT1BUSU9OUywgZXh0cmFPcHRpb25zKTtcclxuICAgIC8vIHRoZSBhbW91bnQgb2Ygc2NvcmVzIGlzIHRoZSBzYW1lIGFzIHRoZSBsZW5ndGggb2Ygc2VnbWVudHMgZXhjZXB0IGZvciB0aGUgcm9vdCBzZWdtZW50IFwiL1wiXHJcbiAgICBsZXQgc2NvcmUgPSBbXTtcclxuICAgIC8vIHRoZSByZWdleHAgYXMgYSBzdHJpbmdcclxuICAgIGxldCBwYXR0ZXJuID0gb3B0aW9ucy5zdGFydCA/ICdeJyA6ICcnO1xyXG4gICAgLy8gZXh0cmFjdGVkIGtleXNcclxuICAgIGNvbnN0IGtleXMgPSBbXTtcclxuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xyXG4gICAgICAgIC8vIHRoZSByb290IHNlZ21lbnQgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnRcclxuICAgICAgICBjb25zdCBzZWdtZW50U2NvcmVzID0gc2VnbWVudC5sZW5ndGggPyBbXSA6IFs5MCAvKiBSb290ICovXTtcclxuICAgICAgICAvLyBhbGxvdyB0cmFpbGluZyBzbGFzaFxyXG4gICAgICAgIGlmIChvcHRpb25zLnN0cmljdCAmJiAhc2VnbWVudC5sZW5ndGgpXHJcbiAgICAgICAgICAgIHBhdHRlcm4gKz0gJy8nO1xyXG4gICAgICAgIGZvciAobGV0IHRva2VuSW5kZXggPSAwOyB0b2tlbkluZGV4IDwgc2VnbWVudC5sZW5ndGg7IHRva2VuSW5kZXgrKykge1xyXG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IHNlZ21lbnRbdG9rZW5JbmRleF07XHJcbiAgICAgICAgICAgIC8vIHJlc2V0cyB0aGUgc2NvcmUgaWYgd2UgYXJlIGluc2lkZSBhIHN1YiBzZWdtZW50IC86YS1vdGhlci06YlxyXG4gICAgICAgICAgICBsZXQgc3ViU2VnbWVudFNjb3JlID0gNDAgLyogU2VnbWVudCAqLyArXHJcbiAgICAgICAgICAgICAgICAob3B0aW9ucy5zZW5zaXRpdmUgPyAwLjI1IC8qIEJvbnVzQ2FzZVNlbnNpdGl2ZSAqLyA6IDApO1xyXG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gMCAvKiBTdGF0aWMgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIHByZXBlbmQgdGhlIHNsYXNoIGlmIHdlIGFyZSBzdGFydGluZyBhIG5ldyBzZWdtZW50XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRva2VuSW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybiArPSAnLyc7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IHRva2VuLnZhbHVlLnJlcGxhY2UoUkVHRVhfQ0hBUlNfUkUsICdcXFxcJCYnKTtcclxuICAgICAgICAgICAgICAgIHN1YlNlZ21lbnRTY29yZSArPSA0MCAvKiBTdGF0aWMgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gMSAvKiBQYXJhbSAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSwgcmVwZWF0YWJsZSwgb3B0aW9uYWwsIHJlZ2V4cCB9ID0gdG9rZW47XHJcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdGFibGUsXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWwsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlID0gcmVnZXhwID8gcmVnZXhwIDogQkFTRV9QQVJBTV9QQVRURVJOO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIHVzZXIgcHJvdmlkZWQgYSBjdXN0b20gcmVnZXhwIC86aWQoXFxcXGQrKVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlICE9PSBCQVNFX1BBUkFNX1BBVFRFUk4pIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gMTAgLyogQm9udXNDdXN0b21SZWdFeHAgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSByZWdleHAgaXMgdmFsaWQgYmVmb3JlIHVzaW5nIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChgKCR7cmV9KWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjdXN0b20gUmVnRXhwIGZvciBwYXJhbSBcIiR7dmFsdWV9XCIgKCR7cmV9KTogYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB3ZSByZXBlYXQgd2UgbXVzdCB0YWtlIGNhcmUgb2YgdGhlIHJlcGVhdGluZyBsZWFkaW5nIHNsYXNoXHJcbiAgICAgICAgICAgICAgICBsZXQgc3ViUGF0dGVybiA9IHJlcGVhdGFibGUgPyBgKCg/OiR7cmV9KSg/Oi8oPzoke3JlfSkpKilgIDogYCgke3JlfSlgO1xyXG4gICAgICAgICAgICAgICAgLy8gcHJlcGVuZCB0aGUgc2xhc2ggaWYgd2UgYXJlIHN0YXJ0aW5nIGEgbmV3IHNlZ21lbnRcclxuICAgICAgICAgICAgICAgIGlmICghdG9rZW5JbmRleClcclxuICAgICAgICAgICAgICAgICAgICBzdWJQYXR0ZXJuID0gb3B0aW9uYWwgPyBgKD86LyR7c3ViUGF0dGVybn0pYCA6ICcvJyArIHN1YlBhdHRlcm47XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpXHJcbiAgICAgICAgICAgICAgICAgICAgc3ViUGF0dGVybiArPSAnPyc7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IHN1YlBhdHRlcm47XHJcbiAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gMjAgLyogRHluYW1pYyAqLztcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbClcclxuICAgICAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gLTggLyogQm9udXNPcHRpb25hbCAqLztcclxuICAgICAgICAgICAgICAgIGlmIChyZXBlYXRhYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgIHN1YlNlZ21lbnRTY29yZSArPSAtMjAgLyogQm9udXNSZXBlYXRhYmxlICovO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlID09PSAnLionKVxyXG4gICAgICAgICAgICAgICAgICAgIHN1YlNlZ21lbnRTY29yZSArPSAtNTAgLyogQm9udXNXaWxkY2FyZCAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZWdtZW50U2NvcmVzLnB1c2goc3ViU2VnbWVudFNjb3JlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYW4gZW1wdHkgYXJyYXkgbGlrZSAvaG9tZS8gLT4gW1t7aG9tZX1dLCBbXV1cclxuICAgICAgICAvLyBpZiAoIXNlZ21lbnQubGVuZ3RoKSBwYXR0ZXJuICs9ICcvJ1xyXG4gICAgICAgIHNjb3JlLnB1c2goc2VnbWVudFNjb3Jlcyk7XHJcbiAgICB9XHJcbiAgICAvLyBvbmx5IGFwcGx5IHRoZSBzdHJpY3QgYm9udXMgdG8gdGhlIGxhc3Qgc2NvcmVcclxuICAgIGlmIChvcHRpb25zLnN0cmljdCAmJiBvcHRpb25zLmVuZCkge1xyXG4gICAgICAgIGNvbnN0IGkgPSBzY29yZS5sZW5ndGggLSAxO1xyXG4gICAgICAgIHNjb3JlW2ldW3Njb3JlW2ldLmxlbmd0aCAtIDFdICs9IDAuNzAwMDAwMDAwMDAwMDAwMSAvKiBCb251c1N0cmljdCAqLztcclxuICAgIH1cclxuICAgIC8vIFRPRE86IGRldiBvbmx5IHdhcm4gZG91YmxlIHRyYWlsaW5nIHNsYXNoXHJcbiAgICBpZiAoIW9wdGlvbnMuc3RyaWN0KVxyXG4gICAgICAgIHBhdHRlcm4gKz0gJy8/JztcclxuICAgIGlmIChvcHRpb25zLmVuZClcclxuICAgICAgICBwYXR0ZXJuICs9ICckJztcclxuICAgIC8vIGFsbG93IHBhdGhzIGxpa2UgL2R5bmFtaWMgdG8gb25seSBtYXRjaCBkeW5hbWljIG9yIGR5bmFtaWMvLi4uIGJ1dCBub3QgZHluYW1pY19zb21ldGhpbmdfZWxzZVxyXG4gICAgZWxzZSBpZiAob3B0aW9ucy5zdHJpY3QpXHJcbiAgICAgICAgcGF0dGVybiArPSAnKD86L3wkKSc7XHJcbiAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAocGF0dGVybiwgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJyk7XHJcbiAgICBmdW5jdGlvbiBwYXJzZShwYXRoKSB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBwYXRoLm1hdGNoKHJlKTtcclxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7fTtcclxuICAgICAgICBpZiAoIW1hdGNoKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG1hdGNoLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbWF0Y2hbaV0gfHwgJyc7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaSAtIDFdO1xyXG4gICAgICAgICAgICBwYXJhbXNba2V5Lm5hbWVdID0gdmFsdWUgJiYga2V5LnJlcGVhdGFibGUgPyB2YWx1ZS5zcGxpdCgnLycpIDogdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXJhbXM7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzdHJpbmdpZnkocGFyYW1zKSB7XHJcbiAgICAgICAgbGV0IHBhdGggPSAnJztcclxuICAgICAgICAvLyBmb3Igb3B0aW9uYWwgcGFyYW1ldGVycyB0byBhbGxvdyB0byBiZSBlbXB0eVxyXG4gICAgICAgIGxldCBhdm9pZER1cGxpY2F0ZWRTbGFzaCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xyXG4gICAgICAgICAgICBpZiAoIWF2b2lkRHVwbGljYXRlZFNsYXNoIHx8ICFwYXRoLmVuZHNXaXRoKCcvJykpXHJcbiAgICAgICAgICAgICAgICBwYXRoICs9ICcvJztcclxuICAgICAgICAgICAgYXZvaWREdXBsaWNhdGVkU2xhc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBzZWdtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gMCAvKiBTdGF0aWMgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoICs9IHRva2VuLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gMSAvKiBQYXJhbSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIHJlcGVhdGFibGUsIG9wdGlvbmFsIH0gPSB0b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbSA9IHZhbHVlIGluIHBhcmFtcyA/IHBhcmFtc1t2YWx1ZV0gOiAnJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJhbSkgJiYgIXJlcGVhdGFibGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvdmlkZWQgcGFyYW0gXCIke3ZhbHVlfVwiIGlzIGFuIGFycmF5IGJ1dCBpdCBpcyBub3QgcmVwZWF0YWJsZSAoKiBvciArIG1vZGlmaWVycylgKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gQXJyYXkuaXNBcnJheShwYXJhbSkgPyBwYXJhbS5qb2luKCcvJykgOiBwYXJhbTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGxhc3Qgc2xhc2ggYXMgd2UgY291bGQgYmUgYXQgdGhlIGVuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGguZW5kc1dpdGgoJy8nKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gcGF0aC5zbGljZSgwLCAtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkbyBub3QgYXBwZW5kIGEgc2xhc2ggb24gdGhlIG5leHQgaXRlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZvaWREdXBsaWNhdGVkU2xhc2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyByZXF1aXJlZCBwYXJhbSBcIiR7dmFsdWV9XCJgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aCArPSB0ZXh0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZSxcclxuICAgICAgICBzY29yZSxcclxuICAgICAgICBrZXlzLFxyXG4gICAgICAgIHBhcnNlLFxyXG4gICAgICAgIHN0cmluZ2lmeSxcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIENvbXBhcmVzIGFuIGFycmF5IG9mIG51bWJlcnMgYXMgdXNlZCBpbiBQYXRoUGFyc2VyLnNjb3JlIGFuZCByZXR1cm5zIGFcclxuICogbnVtYmVyLiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGBzb3J0YCBhbiBhcnJheVxyXG4gKiBAcGFyYW0gYSAtIGZpcnN0IGFycmF5IG9mIG51bWJlcnNcclxuICogQHBhcmFtIGIgLSBzZWNvbmQgYXJyYXkgb2YgbnVtYmVyc1xyXG4gKiBAcmV0dXJucyAwIGlmIGJvdGggYXJlIGVxdWFsLCA8IDAgaWYgYSBzaG91bGQgYmUgc29ydGVkIGZpcnN0LCA+IDAgaWYgYlxyXG4gKiBzaG91bGQgYmUgc29ydGVkIGZpcnN0XHJcbiAqL1xyXG5mdW5jdGlvbiBjb21wYXJlU2NvcmVBcnJheShhLCBiKSB7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICB3aGlsZSAoaSA8IGEubGVuZ3RoICYmIGkgPCBiLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGRpZmYgPSBiW2ldIC0gYVtpXTtcclxuICAgICAgICAvLyBvbmx5IGtlZXAgZ29pbmcgaWYgZGlmZiA9PT0gMFxyXG4gICAgICAgIGlmIChkaWZmKVxyXG4gICAgICAgICAgICByZXR1cm4gZGlmZjtcclxuICAgICAgICBpKys7XHJcbiAgICB9XHJcbiAgICAvLyBpZiB0aGUgbGFzdCBzdWJzZWdtZW50IHdhcyBTdGF0aWMsIHRoZSBzaG9ydGVyIHNlZ21lbnRzIHNob3VsZCBiZSBzb3J0ZWQgZmlyc3RcclxuICAgIC8vIG90aGVyd2lzZSBzb3J0IHRoZSBsb25nZXN0IHNlZ21lbnQgZmlyc3RcclxuICAgIGlmIChhLmxlbmd0aCA8IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSAxICYmIGFbMF0gPT09IDQwIC8qIFN0YXRpYyAqLyArIDQwIC8qIFNlZ21lbnQgKi9cclxuICAgICAgICAgICAgPyAtMVxyXG4gICAgICAgICAgICA6IDE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhLmxlbmd0aCA+IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoID09PSAxICYmIGJbMF0gPT09IDQwIC8qIFN0YXRpYyAqLyArIDQwIC8qIFNlZ21lbnQgKi9cclxuICAgICAgICAgICAgPyAxXHJcbiAgICAgICAgICAgIDogLTE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gMDtcclxufVxyXG4vKipcclxuICogQ29tcGFyZSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHdpdGggYHNvcnRgIHRvIHNvcnQgYW4gYXJyYXkgb2YgUGF0aFBhcnNlclxyXG4gKiBAcGFyYW0gYSAtIGZpcnN0IFBhdGhQYXJzZXJcclxuICogQHBhcmFtIGIgLSBzZWNvbmQgUGF0aFBhcnNlclxyXG4gKiBAcmV0dXJucyAwIGlmIGJvdGggYXJlIGVxdWFsLCA8IDAgaWYgYSBzaG91bGQgYmUgc29ydGVkIGZpcnN0LCA+IDAgaWYgYlxyXG4gKi9cclxuZnVuY3Rpb24gY29tcGFyZVBhdGhQYXJzZXJTY29yZShhLCBiKSB7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBjb25zdCBhU2NvcmUgPSBhLnNjb3JlO1xyXG4gICAgY29uc3QgYlNjb3JlID0gYi5zY29yZTtcclxuICAgIHdoaWxlIChpIDwgYVNjb3JlLmxlbmd0aCAmJiBpIDwgYlNjb3JlLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGNvbXAgPSBjb21wYXJlU2NvcmVBcnJheShhU2NvcmVbaV0sIGJTY29yZVtpXSk7XHJcbiAgICAgICAgLy8gZG8gbm90IHJldHVybiBpZiBib3RoIGFyZSBlcXVhbFxyXG4gICAgICAgIGlmIChjb21wKVxyXG4gICAgICAgICAgICByZXR1cm4gY29tcDtcclxuICAgICAgICBpKys7XHJcbiAgICB9XHJcbiAgICAvLyBpZiBhIGFuZCBiIHNoYXJlIHRoZSBzYW1lIHNjb3JlIGVudHJpZXMgYnV0IGIgaGFzIG1vcmUsIHNvcnQgYiBmaXJzdFxyXG4gICAgcmV0dXJuIGJTY29yZS5sZW5ndGggLSBhU2NvcmUubGVuZ3RoO1xyXG4gICAgLy8gdGhpcyBpcyB0aGUgdGVybmFyeSB2ZXJzaW9uXHJcbiAgICAvLyByZXR1cm4gYVNjb3JlLmxlbmd0aCA8IGJTY29yZS5sZW5ndGhcclxuICAgIC8vICAgPyAxXHJcbiAgICAvLyAgIDogYVNjb3JlLmxlbmd0aCA+IGJTY29yZS5sZW5ndGhcclxuICAgIC8vICAgPyAtMVxyXG4gICAgLy8gICA6IDBcclxufVxuXG5jb25zdCBST09UX1RPS0VOID0ge1xyXG4gICAgdHlwZTogMCAvKiBTdGF0aWMgKi8sXHJcbiAgICB2YWx1ZTogJycsXHJcbn07XHJcbmNvbnN0IFZBTElEX1BBUkFNX1JFID0gL1thLXpBLVowLTlfXS87XHJcbi8vIEFmdGVyIHNvbWUgcHJvZmlsaW5nLCB0aGUgY2FjaGUgc2VlbXMgdG8gYmUgdW5uZWNlc3NhcnkgYmVjYXVzZSB0b2tlbml6ZVBhdGhcclxuLy8gKHRoZSBzbG93ZXN0IHBhcnQgb2YgYWRkaW5nIGEgcm91dGUpIGlzIHZlcnkgZmFzdFxyXG4vLyBjb25zdCB0b2tlbkNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIFRva2VuW11bXT4oKVxyXG5mdW5jdGlvbiB0b2tlbml6ZVBhdGgocGF0aCkge1xyXG4gICAgaWYgKCFwYXRoKVxyXG4gICAgICAgIHJldHVybiBbW11dO1xyXG4gICAgaWYgKHBhdGggPT09ICcvJylcclxuICAgICAgICByZXR1cm4gW1tST09UX1RPS0VOXV07XHJcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aCgnLycpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgICAgICA/IGBSb3V0ZSBwYXRocyBzaG91bGQgc3RhcnQgd2l0aCBhIFwiL1wiOiBcIiR7cGF0aH1cIiBzaG91bGQgYmUgXCIvJHtwYXRofVwiLmBcclxuICAgICAgICAgICAgOiBgSW52YWxpZCBwYXRoIFwiJHtwYXRofVwiYCk7XHJcbiAgICB9XHJcbiAgICAvLyBpZiAodG9rZW5DYWNoZS5oYXMocGF0aCkpIHJldHVybiB0b2tlbkNhY2hlLmdldChwYXRoKSFcclxuICAgIGZ1bmN0aW9uIGNyYXNoKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVSUiAoJHtzdGF0ZX0pL1wiJHtidWZmZXJ9XCI6ICR7bWVzc2FnZX1gKTtcclxuICAgIH1cclxuICAgIGxldCBzdGF0ZSA9IDAgLyogU3RhdGljICovO1xyXG4gICAgbGV0IHByZXZpb3VzU3RhdGUgPSBzdGF0ZTtcclxuICAgIGNvbnN0IHRva2VucyA9IFtdO1xyXG4gICAgLy8gdGhlIHNlZ21lbnQgd2lsbCBhbHdheXMgYmUgdmFsaWQgYmVjYXVzZSB3ZSBnZXQgaW50byB0aGUgaW5pdGlhbCBzdGF0ZVxyXG4gICAgLy8gd2l0aCB0aGUgbGVhZGluZyAvXHJcbiAgICBsZXQgc2VnbWVudDtcclxuICAgIGZ1bmN0aW9uIGZpbmFsaXplU2VnbWVudCgpIHtcclxuICAgICAgICBpZiAoc2VnbWVudClcclxuICAgICAgICAgICAgdG9rZW5zLnB1c2goc2VnbWVudCk7XHJcbiAgICAgICAgc2VnbWVudCA9IFtdO1xyXG4gICAgfVxyXG4gICAgLy8gaW5kZXggb24gdGhlIHBhdGhcclxuICAgIGxldCBpID0gMDtcclxuICAgIC8vIGNoYXIgYXQgaW5kZXhcclxuICAgIGxldCBjaGFyO1xyXG4gICAgLy8gYnVmZmVyIG9mIHRoZSB2YWx1ZSByZWFkXHJcbiAgICBsZXQgYnVmZmVyID0gJyc7XHJcbiAgICAvLyBjdXN0b20gcmVnZXhwIGZvciBhIHBhcmFtXHJcbiAgICBsZXQgY3VzdG9tUmUgPSAnJztcclxuICAgIGZ1bmN0aW9uIGNvbnN1bWVCdWZmZXIoKSB7XHJcbiAgICAgICAgaWYgKCFidWZmZXIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAoc3RhdGUgPT09IDAgLyogU3RhdGljICovKSB7XHJcbiAgICAgICAgICAgIHNlZ21lbnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAwIC8qIFN0YXRpYyAqLyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBidWZmZXIsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gMSAvKiBQYXJhbSAqLyB8fFxyXG4gICAgICAgICAgICBzdGF0ZSA9PT0gMiAvKiBQYXJhbVJlZ0V4cCAqLyB8fFxyXG4gICAgICAgICAgICBzdGF0ZSA9PT0gMyAvKiBQYXJhbVJlZ0V4cEVuZCAqLykge1xyXG4gICAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiAxICYmIChjaGFyID09PSAnKicgfHwgY2hhciA9PT0gJysnKSlcclxuICAgICAgICAgICAgICAgIGNyYXNoKGBBIHJlcGVhdGFibGUgcGFyYW0gKCR7YnVmZmVyfSkgbXVzdCBiZSBhbG9uZSBpbiBpdHMgc2VnbWVudC4gZWc6ICcvOmlkcysuYCk7XHJcbiAgICAgICAgICAgIHNlZ21lbnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAxIC8qIFBhcmFtICovLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGJ1ZmZlcixcclxuICAgICAgICAgICAgICAgIHJlZ2V4cDogY3VzdG9tUmUsXHJcbiAgICAgICAgICAgICAgICByZXBlYXRhYmxlOiBjaGFyID09PSAnKicgfHwgY2hhciA9PT0gJysnLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uYWw6IGNoYXIgPT09ICcqJyB8fCBjaGFyID09PSAnPycsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY3Jhc2goJ0ludmFsaWQgc3RhdGUgdG8gY29uc3VtZSBidWZmZXInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnVmZmVyID0gJyc7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhZGRDaGFyVG9CdWZmZXIoKSB7XHJcbiAgICAgICAgYnVmZmVyICs9IGNoYXI7XHJcbiAgICB9XHJcbiAgICB3aGlsZSAoaSA8IHBhdGgubGVuZ3RoKSB7XHJcbiAgICAgICAgY2hhciA9IHBhdGhbaSsrXTtcclxuICAgICAgICBpZiAoY2hhciA9PT0gJ1xcXFwnICYmIHN0YXRlICE9PSAyIC8qIFBhcmFtUmVnRXhwICovKSB7XHJcbiAgICAgICAgICAgIHByZXZpb3VzU3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICAgICAgc3RhdGUgPSA0IC8qIEVzY2FwZU5leHQgKi87XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMCAvKiBTdGF0aWMgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJy8nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdW1lQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsaXplU2VnbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gJzonKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3VtZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMSAvKiBQYXJhbSAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZENoYXJUb0J1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNCAvKiBFc2NhcGVOZXh0ICovOlxyXG4gICAgICAgICAgICAgICAgYWRkQ2hhclRvQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxIC8qIFBhcmFtICovOlxyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09ICcoJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMiAvKiBQYXJhbVJlZ0V4cCAqLztcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b21SZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoVkFMSURfUEFSQU1fUkUudGVzdChjaGFyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZENoYXJUb0J1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3VtZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMCAvKiBTdGF0aWMgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ28gYmFjayBvbmUgY2hhcmFjdGVyIGlmIHdlIHdlcmUgbm90IG1vZGlmeWluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyICE9PSAnKicgJiYgY2hhciAhPT0gJz8nICYmIGNoYXIgIT09ICcrJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMiAvKiBQYXJhbVJlZ0V4cCAqLzpcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGlzIGl0IHdvcnRoIGhhbmRsaW5nIG5lc3RlZCByZWdleHA/IGxpa2UgOnAoPzpwcmVmaXhfKFteL10rKV9zdWZmaXgpXHJcbiAgICAgICAgICAgICAgICAvLyBpdCBhbHJlYWR5IHdvcmtzIGJ5IGVzY2FwaW5nIHRoZSBjbG9zaW5nIClcclxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vcGF0aHMuZXNtLmRldi8/cD1BQU1lSmJpQXdRRWNES2JBb0FBa1A2MFBHMlI2UUF2Z05hQTZBRkFDTTJBQnVRQkIjXHJcbiAgICAgICAgICAgICAgICAvLyBpcyB0aGlzIHJlYWxseSBzb21ldGhpbmcgcGVvcGxlIG5lZWQgc2luY2UgeW91IGNhbiBhbHNvIHdyaXRlXHJcbiAgICAgICAgICAgICAgICAvLyAvcHJlZml4XzpwKClfc3VmZml4XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJyknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIHRoZSBlc2NhcGVkIClcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tUmVbY3VzdG9tUmUubGVuZ3RoIC0gMV0gPT0gJ1xcXFwnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21SZSA9IGN1c3RvbVJlLnNsaWNlKDAsIC0xKSArIGNoYXI7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDMgLyogUGFyYW1SZWdFeHBFbmQgKi87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b21SZSArPSBjaGFyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMyAvKiBQYXJhbVJlZ0V4cEVuZCAqLzpcclxuICAgICAgICAgICAgICAgIC8vIHNhbWUgYXMgZmluYWxpemluZyBhIHBhcmFtXHJcbiAgICAgICAgICAgICAgICBjb25zdW1lQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IDAgLyogU3RhdGljICovO1xyXG4gICAgICAgICAgICAgICAgLy8gZ28gYmFjayBvbmUgY2hhcmFjdGVyIGlmIHdlIHdlcmUgbm90IG1vZGlmeWluZ1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgIT09ICcqJyAmJiBjaGFyICE9PSAnPycgJiYgY2hhciAhPT0gJysnKVxyXG4gICAgICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY3Jhc2goJ1Vua25vd24gc3RhdGUnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChzdGF0ZSA9PT0gMiAvKiBQYXJhbVJlZ0V4cCAqLylcclxuICAgICAgICBjcmFzaChgVW5maW5pc2hlZCBjdXN0b20gUmVnRXhwIGZvciBwYXJhbSBcIiR7YnVmZmVyfVwiYCk7XHJcbiAgICBjb25zdW1lQnVmZmVyKCk7XHJcbiAgICBmaW5hbGl6ZVNlZ21lbnQoKTtcclxuICAgIC8vIHRva2VuQ2FjaGUuc2V0KHBhdGgsIHRva2VucylcclxuICAgIHJldHVybiB0b2tlbnM7XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVSZWNvcmRNYXRjaGVyKHJlY29yZCwgcGFyZW50LCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCBwYXJzZXIgPSB0b2tlbnNUb1BhcnNlcih0b2tlbml6ZVBhdGgocmVjb3JkLnBhdGgpLCBvcHRpb25zKTtcclxuICAgIC8vIHdhcm4gYWdhaW5zdCBwYXJhbXMgd2l0aCB0aGUgc2FtZSBuYW1lXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdLZXlzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHBhcnNlci5rZXlzKSB7XHJcbiAgICAgICAgICAgIGlmIChleGlzdGluZ0tleXMuaGFzKGtleS5uYW1lKSlcclxuICAgICAgICAgICAgICAgIHdhcm4oYEZvdW5kIGR1cGxpY2F0ZWQgcGFyYW1zIHdpdGggbmFtZSBcIiR7a2V5Lm5hbWV9XCIgZm9yIHBhdGggXCIke3JlY29yZC5wYXRofVwiLiBPbmx5IHRoZSBsYXN0IG9uZSB3aWxsIGJlIGF2YWlsYWJsZSBvbiBcIiRyb3V0ZS5wYXJhbXNcIi5gKTtcclxuICAgICAgICAgICAgZXhpc3RpbmdLZXlzLmFkZChrZXkubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgbWF0Y2hlciA9IGFzc2lnbihwYXJzZXIsIHtcclxuICAgICAgICByZWNvcmQsXHJcbiAgICAgICAgcGFyZW50LFxyXG4gICAgICAgIC8vIHRoZXNlIG5lZWRzIHRvIGJlIHBvcHVsYXRlZCBieSB0aGUgcGFyZW50XHJcbiAgICAgICAgY2hpbGRyZW46IFtdLFxyXG4gICAgICAgIGFsaWFzOiBbXSxcclxuICAgIH0pO1xyXG4gICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgIC8vIGJvdGggYXJlIGFsaWFzZXMgb3IgYm90aCBhcmUgbm90IGFsaWFzZXNcclxuICAgICAgICAvLyB3ZSBkb24ndCB3YW50IHRvIG1peCB0aGVtIGJlY2F1c2UgdGhlIG9yZGVyIGlzIHVzZWQgd2hlblxyXG4gICAgICAgIC8vIHBhc3Npbmcgb3JpZ2luYWxSZWNvcmQgaW4gTWF0Y2hlci5hZGRSb3V0ZVxyXG4gICAgICAgIGlmICghbWF0Y2hlci5yZWNvcmQuYWxpYXNPZiA9PT0gIXBhcmVudC5yZWNvcmQuYWxpYXNPZilcclxuICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2gobWF0Y2hlcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWF0Y2hlcjtcclxufVxuXG4vKipcclxuICogQ3JlYXRlcyBhIFJvdXRlciBNYXRjaGVyLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICogQHBhcmFtIHJvdXRlcyAtIGFycmF5IG9mIGluaXRpYWwgcm91dGVzXHJcbiAqIEBwYXJhbSBnbG9iYWxPcHRpb25zIC0gZ2xvYmFsIHJvdXRlIG9wdGlvbnNcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlck1hdGNoZXIocm91dGVzLCBnbG9iYWxPcHRpb25zKSB7XHJcbiAgICAvLyBub3JtYWxpemVkIG9yZGVyZWQgYXJyYXkgb2YgbWF0Y2hlcnNcclxuICAgIGNvbnN0IG1hdGNoZXJzID0gW107XHJcbiAgICBjb25zdCBtYXRjaGVyTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgZ2xvYmFsT3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh7IHN0cmljdDogZmFsc2UsIGVuZDogdHJ1ZSwgc2Vuc2l0aXZlOiBmYWxzZSB9LCBnbG9iYWxPcHRpb25zKTtcclxuICAgIGZ1bmN0aW9uIGdldFJlY29yZE1hdGNoZXIobmFtZSkge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVyTWFwLmdldChuYW1lKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZFJvdXRlKHJlY29yZCwgcGFyZW50LCBvcmlnaW5hbFJlY29yZCkge1xyXG4gICAgICAgIC8vIHVzZWQgbGF0ZXIgb24gdG8gcmVtb3ZlIGJ5IG5hbWVcclxuICAgICAgICBsZXQgaXNSb290QWRkID0gIW9yaWdpbmFsUmVjb3JkO1xyXG4gICAgICAgIGxldCBtYWluTm9ybWFsaXplZFJlY29yZCA9IG5vcm1hbGl6ZVJvdXRlUmVjb3JkKHJlY29yZCk7XHJcbiAgICAgICAgLy8gd2UgbWlnaHQgYmUgdGhlIGNoaWxkIG9mIGFuIGFsaWFzXHJcbiAgICAgICAgbWFpbk5vcm1hbGl6ZWRSZWNvcmQuYWxpYXNPZiA9IG9yaWdpbmFsUmVjb3JkICYmIG9yaWdpbmFsUmVjb3JkLnJlY29yZDtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gbWVyZ2VPcHRpb25zKGdsb2JhbE9wdGlvbnMsIHJlY29yZCk7XHJcbiAgICAgICAgLy8gZ2VuZXJhdGUgYW4gYXJyYXkgb2YgcmVjb3JkcyB0byBjb3JyZWN0bHkgaGFuZGxlIGFsaWFzZXNcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkUmVjb3JkcyA9IFtcclxuICAgICAgICAgICAgbWFpbk5vcm1hbGl6ZWRSZWNvcmQsXHJcbiAgICAgICAgXTtcclxuICAgICAgICBpZiAoJ2FsaWFzJyBpbiByZWNvcmQpIHtcclxuICAgICAgICAgICAgY29uc3QgYWxpYXNlcyA9IHR5cGVvZiByZWNvcmQuYWxpYXMgPT09ICdzdHJpbmcnID8gW3JlY29yZC5hbGlhc10gOiByZWNvcmQuYWxpYXM7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgYWxpYXNlcykge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFJlY29yZHMucHVzaChhc3NpZ24oe30sIG1haW5Ob3JtYWxpemVkUmVjb3JkLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBhbGxvd3MgdXMgdG8gaG9sZCBhIGNvcHkgb2YgdGhlIGBjb21wb25lbnRzYCBvcHRpb25cclxuICAgICAgICAgICAgICAgICAgICAvLyBzbyB0aGF0IGFzeW5jIGNvbXBvbmVudHMgY2FjaGUgaXMgaG9sZCBvbiB0aGUgb3JpZ2luYWwgcmVjb3JkXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50czogb3JpZ2luYWxSZWNvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvcmlnaW5hbFJlY29yZC5yZWNvcmQuY29tcG9uZW50c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG1haW5Ob3JtYWxpemVkUmVjb3JkLmNvbXBvbmVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYWxpYXMsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbWlnaHQgYmUgdGhlIGNoaWxkIG9mIGFuIGFsaWFzXHJcbiAgICAgICAgICAgICAgICAgICAgYWxpYXNPZjogb3JpZ2luYWxSZWNvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvcmlnaW5hbFJlY29yZC5yZWNvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBtYWluTm9ybWFsaXplZFJlY29yZCxcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbWF0Y2hlcjtcclxuICAgICAgICBsZXQgb3JpZ2luYWxNYXRjaGVyO1xyXG4gICAgICAgIGZvciAoY29uc3Qgbm9ybWFsaXplZFJlY29yZCBvZiBub3JtYWxpemVkUmVjb3Jkcykge1xyXG4gICAgICAgICAgICBsZXQgeyBwYXRoIH0gPSBub3JtYWxpemVkUmVjb3JkO1xyXG4gICAgICAgICAgICAvLyBCdWlsZCB1cCB0aGUgcGF0aCBmb3IgbmVzdGVkIHJvdXRlcyBpZiB0aGUgY2hpbGQgaXNuJ3QgYW4gYWJzb2x1dGVcclxuICAgICAgICAgICAgLy8gcm91dGUuIE9ubHkgYWRkIHRoZSAvIGRlbGltaXRlciBpZiB0aGUgY2hpbGQgcGF0aCBpc24ndCBlbXB0eSBhbmQgaWYgdGhlXHJcbiAgICAgICAgICAgIC8vIHBhcmVudCBwYXRoIGRvZXNuJ3QgaGF2ZSBhIHRyYWlsaW5nIHNsYXNoXHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQgJiYgcGF0aFswXSAhPT0gJy8nKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudC5yZWNvcmQucGF0aDtcclxuICAgICAgICAgICAgICAgIGxldCBjb25uZWN0aW5nU2xhc2ggPSBwYXJlbnRQYXRoW3BhcmVudFBhdGgubGVuZ3RoIC0gMV0gPT09ICcvJyA/ICcnIDogJy8nO1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFJlY29yZC5wYXRoID1cclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQucmVjb3JkLnBhdGggKyAocGF0aCAmJiBjb25uZWN0aW5nU2xhc2ggKyBwYXRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG5vcm1hbGl6ZWRSZWNvcmQucGF0aCA9PT0gJyonKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhdGNoIGFsbCByb3V0ZXMgKFwiKlwiKSBtdXN0IG5vdyBiZSBkZWZpbmVkIHVzaW5nIGEgcGFyYW0gd2l0aCBhIGN1c3RvbSByZWdleHAuXFxuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NlZSBtb3JlIGF0IGh0dHBzOi8vbmV4dC5yb3V0ZXIudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi8jcmVtb3ZlZC1zdGFyLW9yLWNhdGNoLWFsbC1yb3V0ZXMuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY3JlYXRlIHRoZSBvYmplY3QgYmVmb3JlIGhhbmQgc28gaXQgY2FuIGJlIHBhc3NlZCB0byBjaGlsZHJlblxyXG4gICAgICAgICAgICBtYXRjaGVyID0gY3JlYXRlUm91dGVSZWNvcmRNYXRjaGVyKG5vcm1hbGl6ZWRSZWNvcmQsIHBhcmVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGFyZW50ICYmIHBhdGhbMF0gPT09ICcvJylcclxuICAgICAgICAgICAgICAgIGNoZWNrTWlzc2luZ1BhcmFtc0luQWJzb2x1dGVQYXRoKG1hdGNoZXIsIHBhcmVudCk7XHJcbiAgICAgICAgICAgIC8vIGlmIHdlIGFyZSBhbiBhbGlhcyB3ZSBtdXN0IHRlbGwgdGhlIG9yaWdpbmFsIHJlY29yZCB0aGF0IHdlIGV4aXN0XHJcbiAgICAgICAgICAgIC8vIHNvIHdlIGNhbiBiZSByZW1vdmVkXHJcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbFJlY29yZCkge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxSZWNvcmQuYWxpYXMucHVzaChtYXRjaGVyKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja1NhbWVQYXJhbXMob3JpZ2luYWxSZWNvcmQsIG1hdGNoZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlLCB0aGUgZmlyc3QgcmVjb3JkIGlzIHRoZSBvcmlnaW5hbCBhbmQgb3RoZXJzIGFyZSBhbGlhc2VzXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbE1hdGNoZXIgPSBvcmlnaW5hbE1hdGNoZXIgfHwgbWF0Y2hlcjtcclxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbE1hdGNoZXIgIT09IG1hdGNoZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxNYXRjaGVyLmFsaWFzLnB1c2gobWF0Y2hlcik7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIHJvdXRlIGlmIG5hbWVkIGFuZCBvbmx5IGZvciB0aGUgdG9wIHJlY29yZCAoYXZvaWQgaW4gbmVzdGVkIGNhbGxzKVxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyB3b3JrcyBiZWNhdXNlIHRoZSBvcmlnaW5hbCByZWNvcmQgaXMgdGhlIGZpcnN0IG9uZVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzUm9vdEFkZCAmJiByZWNvcmQubmFtZSAmJiAhaXNBbGlhc1JlY29yZChtYXRjaGVyKSlcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVSb3V0ZShyZWNvcmQubmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCdjaGlsZHJlbicgaW4gbWFpbk5vcm1hbGl6ZWRSZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjaGlsZHJlbiA9IG1haW5Ob3JtYWxpemVkUmVjb3JkLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZFJvdXRlKGNoaWxkcmVuW2ldLCBtYXRjaGVyLCBvcmlnaW5hbFJlY29yZCAmJiBvcmlnaW5hbFJlY29yZC5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgd2FzIG5vIG9yaWdpbmFsIHJlY29yZCwgdGhlbiB0aGUgZmlyc3Qgb25lIHdhcyBub3QgYW4gYWxpYXMgYW5kIGFsbFxyXG4gICAgICAgICAgICAvLyBvdGhlciBhbGlhcyAoaWYgYW55KSBuZWVkIHRvIHJlZmVyZW5jZSB0aGlzIHJlY29yZCB3aGVuIGFkZGluZyBjaGlsZHJlblxyXG4gICAgICAgICAgICBvcmlnaW5hbFJlY29yZCA9IG9yaWdpbmFsUmVjb3JkIHx8IG1hdGNoZXI7XHJcbiAgICAgICAgICAgIGluc2VydE1hdGNoZXIobWF0Y2hlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvcmlnaW5hbE1hdGNoZXJcclxuICAgICAgICAgICAgPyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSBvdGhlciBtYXRjaGVycyBhcmUgYWxpYXNlcywgdGhleSBzaG91bGQgYmUgcmVtb3ZlZCBieSB0aGUgb3JpZ2luYWwgbWF0Y2hlclxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlUm91dGUob3JpZ2luYWxNYXRjaGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IG5vb3A7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVSb3V0ZShtYXRjaGVyUmVmKSB7XHJcbiAgICAgICAgaWYgKGlzUm91dGVOYW1lKG1hdGNoZXJSZWYpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXIgPSBtYXRjaGVyTWFwLmdldChtYXRjaGVyUmVmKTtcclxuICAgICAgICAgICAgaWYgKG1hdGNoZXIpIHtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXJNYXAuZGVsZXRlKG1hdGNoZXJSZWYpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcnMuc3BsaWNlKG1hdGNoZXJzLmluZGV4T2YobWF0Y2hlciksIDEpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlci5jaGlsZHJlbi5mb3JFYWNoKHJlbW92ZVJvdXRlKTtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXIuYWxpYXMuZm9yRWFjaChyZW1vdmVSb3V0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBpbmRleCA9IG1hdGNoZXJzLmluZGV4T2YobWF0Y2hlclJlZik7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZXJSZWYucmVjb3JkLm5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlck1hcC5kZWxldGUobWF0Y2hlclJlZi5yZWNvcmQubmFtZSk7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVyUmVmLmNoaWxkcmVuLmZvckVhY2gocmVtb3ZlUm91dGUpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlclJlZi5hbGlhcy5mb3JFYWNoKHJlbW92ZVJvdXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdldFJvdXRlcygpIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlcnM7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBpbnNlcnRNYXRjaGVyKG1hdGNoZXIpIHtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2kgaXMnLCB7IGkgfSlcclxuICAgICAgICB3aGlsZSAoaSA8IG1hdGNoZXJzLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICBjb21wYXJlUGF0aFBhcnNlclNjb3JlKG1hdGNoZXIsIG1hdGNoZXJzW2ldKSA+PSAwKVxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0VORCBpIGlzJywgeyBpIH0pXHJcbiAgICAgICAgLy8gd2hpbGUgKGkgPCBtYXRjaGVycy5sZW5ndGggJiYgbWF0Y2hlci5zY29yZSA8PSBtYXRjaGVyc1tpXS5zY29yZSkgaSsrXHJcbiAgICAgICAgbWF0Y2hlcnMuc3BsaWNlKGksIDAsIG1hdGNoZXIpO1xyXG4gICAgICAgIC8vIG9ubHkgYWRkIHRoZSBvcmlnaW5hbCByZWNvcmQgdG8gdGhlIG5hbWUgbWFwXHJcbiAgICAgICAgaWYgKG1hdGNoZXIucmVjb3JkLm5hbWUgJiYgIWlzQWxpYXNSZWNvcmQobWF0Y2hlcikpXHJcbiAgICAgICAgICAgIG1hdGNoZXJNYXAuc2V0KG1hdGNoZXIucmVjb3JkLm5hbWUsIG1hdGNoZXIpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVzb2x2ZShsb2NhdGlvbiwgY3VycmVudExvY2F0aW9uKSB7XHJcbiAgICAgICAgbGV0IG1hdGNoZXI7XHJcbiAgICAgICAgbGV0IHBhcmFtcyA9IHt9O1xyXG4gICAgICAgIGxldCBwYXRoO1xyXG4gICAgICAgIGxldCBuYW1lO1xyXG4gICAgICAgIGlmICgnbmFtZScgaW4gbG9jYXRpb24gJiYgbG9jYXRpb24ubmFtZSkge1xyXG4gICAgICAgICAgICBtYXRjaGVyID0gbWF0Y2hlck1hcC5nZXQobG9jYXRpb24ubmFtZSk7XHJcbiAgICAgICAgICAgIGlmICghbWF0Y2hlcilcclxuICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZVJvdXRlckVycm9yKDEgLyogTUFUQ0hFUl9OT1RfRk9VTkQgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBuYW1lID0gbWF0Y2hlci5yZWNvcmQubmFtZTtcclxuICAgICAgICAgICAgcGFyYW1zID0gYXNzaWduKFxyXG4gICAgICAgICAgICAvLyBwYXJhbXNGcm9tTG9jYXRpb24gaXMgYSBuZXcgb2JqZWN0XHJcbiAgICAgICAgICAgIHBhcmFtc0Zyb21Mb2NhdGlvbihjdXJyZW50TG9jYXRpb24ucGFyYW1zLCBcclxuICAgICAgICAgICAgLy8gb25seSBrZWVwIHBhcmFtcyB0aGF0IGV4aXN0IGluIHRoZSByZXNvbHZlZCBsb2NhdGlvblxyXG4gICAgICAgICAgICAvLyBUT0RPOiBvbmx5IGtlZXAgb3B0aW9uYWwgcGFyYW1zIGNvbWluZyBmcm9tIGEgcGFyZW50IHJlY29yZFxyXG4gICAgICAgICAgICBtYXRjaGVyLmtleXMuZmlsdGVyKGsgPT4gIWsub3B0aW9uYWwpLm1hcChrID0+IGsubmFtZSkpLCBsb2NhdGlvbi5wYXJhbXMpO1xyXG4gICAgICAgICAgICAvLyB0aHJvd3MgaWYgY2Fubm90IGJlIHN0cmluZ2lmaWVkXHJcbiAgICAgICAgICAgIHBhdGggPSBtYXRjaGVyLnN0cmluZ2lmeShwYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgncGF0aCcgaW4gbG9jYXRpb24pIHtcclxuICAgICAgICAgICAgLy8gbm8gbmVlZCB0byByZXNvbHZlIHRoZSBwYXRoIHdpdGggdGhlIG1hdGNoZXIgYXMgaXQgd2FzIHByb3ZpZGVkXHJcbiAgICAgICAgICAgIC8vIHRoaXMgYWxzbyBhbGxvd3MgdGhlIHVzZXIgdG8gY29udHJvbCB0aGUgZW5jb2RpbmdcclxuICAgICAgICAgICAgcGF0aCA9IGxvY2F0aW9uLnBhdGg7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXBhdGguc3RhcnRzV2l0aCgnLycpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBUaGUgTWF0Y2hlciBjYW5ub3QgcmVzb2x2ZSByZWxhdGl2ZSBwYXRocyBidXQgcmVjZWl2ZWQgXCIke3BhdGh9XCIuIFVubGVzcyB5b3UgZGlyZWN0bHkgY2FsbGVkIFxcYG1hdGNoZXIucmVzb2x2ZShcIiR7cGF0aH1cIilcXGAsIHRoaXMgaXMgcHJvYmFibHkgYSBidWcgaW4gdnVlLXJvdXRlci4gUGxlYXNlIG9wZW4gYW4gaXNzdWUgYXQgaHR0cHM6Ly9uZXctaXNzdWUudnVlanMub3JnLz9yZXBvPXZ1ZWpzL3Z1ZS1yb3V0ZXItbmV4dC5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYXRjaGVyID0gbWF0Y2hlcnMuZmluZChtID0+IG0ucmUudGVzdChwYXRoKSk7XHJcbiAgICAgICAgICAgIC8vIG1hdGNoZXIgc2hvdWxkIGhhdmUgYSB2YWx1ZSBhZnRlciB0aGUgbG9vcFxyXG4gICAgICAgICAgICBpZiAobWF0Y2hlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogZGV2IHdhcm5pbmcgb2YgdW51c2VkIHBhcmFtcyBpZiBwcm92aWRlZFxyXG4gICAgICAgICAgICAgICAgLy8gd2Uga25vdyB0aGUgbWF0Y2hlciB3b3JrcyBiZWNhdXNlIHdlIHRlc3RlZCB0aGUgcmVnZXhwXHJcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBtYXRjaGVyLnBhcnNlKHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IG1hdGNoZXIucmVjb3JkLm5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbG9jYXRpb24gaXMgYSByZWxhdGl2ZSBwYXRoXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBtYXRjaCBieSBuYW1lIG9yIHBhdGggb2YgY3VycmVudCByb3V0ZVxyXG4gICAgICAgICAgICBtYXRjaGVyID0gY3VycmVudExvY2F0aW9uLm5hbWVcclxuICAgICAgICAgICAgICAgID8gbWF0Y2hlck1hcC5nZXQoY3VycmVudExvY2F0aW9uLm5hbWUpXHJcbiAgICAgICAgICAgICAgICA6IG1hdGNoZXJzLmZpbmQobSA9PiBtLnJlLnRlc3QoY3VycmVudExvY2F0aW9uLnBhdGgpKTtcclxuICAgICAgICAgICAgaWYgKCFtYXRjaGVyKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgY3JlYXRlUm91dGVyRXJyb3IoMSAvKiBNQVRDSEVSX05PVF9GT1VORCAqLywge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBuYW1lID0gbWF0Y2hlci5yZWNvcmQubmFtZTtcclxuICAgICAgICAgICAgLy8gc2luY2Ugd2UgYXJlIG5hdmlnYXRpbmcgdG8gdGhlIHNhbWUgbG9jYXRpb24sIHdlIGRvbid0IG5lZWQgdG8gcGljayB0aGVcclxuICAgICAgICAgICAgLy8gcGFyYW1zIGxpa2Ugd2hlbiBgbmFtZWAgaXMgcHJvdmlkZWRcclxuICAgICAgICAgICAgcGFyYW1zID0gYXNzaWduKHt9LCBjdXJyZW50TG9jYXRpb24ucGFyYW1zLCBsb2NhdGlvbi5wYXJhbXMpO1xyXG4gICAgICAgICAgICBwYXRoID0gbWF0Y2hlci5zdHJpbmdpZnkocGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbWF0Y2hlZCA9IFtdO1xyXG4gICAgICAgIGxldCBwYXJlbnRNYXRjaGVyID0gbWF0Y2hlcjtcclxuICAgICAgICB3aGlsZSAocGFyZW50TWF0Y2hlcikge1xyXG4gICAgICAgICAgICAvLyByZXZlcnNlZCBvcmRlciBzbyBwYXJlbnRzIGFyZSBhdCB0aGUgYmVnaW5uaW5nXHJcbiAgICAgICAgICAgIG1hdGNoZWQudW5zaGlmdChwYXJlbnRNYXRjaGVyLnJlY29yZCk7XHJcbiAgICAgICAgICAgIHBhcmVudE1hdGNoZXIgPSBwYXJlbnRNYXRjaGVyLnBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgcGF0aCxcclxuICAgICAgICAgICAgcGFyYW1zLFxyXG4gICAgICAgICAgICBtYXRjaGVkLFxyXG4gICAgICAgICAgICBtZXRhOiBtZXJnZU1ldGFGaWVsZHMobWF0Y2hlZCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8vIGFkZCBpbml0aWFsIHJvdXRlc1xyXG4gICAgcm91dGVzLmZvckVhY2gocm91dGUgPT4gYWRkUm91dGUocm91dGUpKTtcclxuICAgIHJldHVybiB7IGFkZFJvdXRlLCByZXNvbHZlLCByZW1vdmVSb3V0ZSwgZ2V0Um91dGVzLCBnZXRSZWNvcmRNYXRjaGVyIH07XHJcbn1cclxuZnVuY3Rpb24gcGFyYW1zRnJvbUxvY2F0aW9uKHBhcmFtcywga2V5cykge1xyXG4gICAgbGV0IG5ld1BhcmFtcyA9IHt9O1xyXG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcclxuICAgICAgICBpZiAoa2V5IGluIHBhcmFtcylcclxuICAgICAgICAgICAgbmV3UGFyYW1zW2tleV0gPSBwYXJhbXNba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdQYXJhbXM7XHJcbn1cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZXMgYSBSb3V0ZVJlY29yZFJhdy4gQ3JlYXRlcyBhIGNvcHlcclxuICpcclxuICogQHBhcmFtIHJlY29yZFxyXG4gKiBAcmV0dXJucyB0aGUgbm9ybWFsaXplZCB2ZXJzaW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBub3JtYWxpemVSb3V0ZVJlY29yZChyZWNvcmQpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcGF0aDogcmVjb3JkLnBhdGgsXHJcbiAgICAgICAgcmVkaXJlY3Q6IHJlY29yZC5yZWRpcmVjdCxcclxuICAgICAgICBuYW1lOiByZWNvcmQubmFtZSxcclxuICAgICAgICBtZXRhOiByZWNvcmQubWV0YSB8fCB7fSxcclxuICAgICAgICBhbGlhc09mOiB1bmRlZmluZWQsXHJcbiAgICAgICAgYmVmb3JlRW50ZXI6IHJlY29yZC5iZWZvcmVFbnRlcixcclxuICAgICAgICBwcm9wczogbm9ybWFsaXplUmVjb3JkUHJvcHMocmVjb3JkKSxcclxuICAgICAgICBjaGlsZHJlbjogcmVjb3JkLmNoaWxkcmVuIHx8IFtdLFxyXG4gICAgICAgIGluc3RhbmNlczoge30sXHJcbiAgICAgICAgbGVhdmVHdWFyZHM6IFtdLFxyXG4gICAgICAgIHVwZGF0ZUd1YXJkczogW10sXHJcbiAgICAgICAgZW50ZXJDYWxsYmFja3M6IHt9LFxyXG4gICAgICAgIGNvbXBvbmVudHM6ICdjb21wb25lbnRzJyBpbiByZWNvcmRcclxuICAgICAgICAgICAgPyByZWNvcmQuY29tcG9uZW50cyB8fCB7fVxyXG4gICAgICAgICAgICA6IHsgZGVmYXVsdDogcmVjb3JkLmNvbXBvbmVudCB9LFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogTm9ybWFsaXplIHRoZSBvcHRpb25hbCBgcHJvcHNgIGluIGEgcmVjb3JkIHRvIGFsd2F5cyBiZSBhbiBvYmplY3Qgc2ltaWxhciB0b1xyXG4gKiBjb21wb25lbnRzLiBBbHNvIGFjY2VwdCBhIGJvb2xlYW4gZm9yIGNvbXBvbmVudHMuXHJcbiAqIEBwYXJhbSByZWNvcmRcclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlY29yZFByb3BzKHJlY29yZCkge1xyXG4gICAgY29uc3QgcHJvcHNPYmplY3QgPSB7fTtcclxuICAgIC8vIHByb3BzIGRvZXMgbm90IGV4aXN0IG9uIHJlZGlyZWN0IHJlY29yZHMgYnV0IHdlIGNhbiBzZXQgZmFsc2UgZGlyZWN0bHlcclxuICAgIGNvbnN0IHByb3BzID0gcmVjb3JkLnByb3BzIHx8IGZhbHNlO1xyXG4gICAgaWYgKCdjb21wb25lbnQnIGluIHJlY29yZCkge1xyXG4gICAgICAgIHByb3BzT2JqZWN0LmRlZmF1bHQgPSBwcm9wcztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIE5PVEU6IHdlIGNvdWxkIGFsc28gYWxsb3cgYSBmdW5jdGlvbiB0byBiZSBhcHBsaWVkIHRvIGV2ZXJ5IGNvbXBvbmVudC5cclxuICAgICAgICAvLyBXb3VsZCBuZWVkIHVzZXIgZmVlZGJhY2sgZm9yIHVzZSBjYXNlc1xyXG4gICAgICAgIGZvciAobGV0IG5hbWUgaW4gcmVjb3JkLmNvbXBvbmVudHMpXHJcbiAgICAgICAgICAgIHByb3BzT2JqZWN0W25hbWVdID0gdHlwZW9mIHByb3BzID09PSAnYm9vbGVhbicgPyBwcm9wcyA6IHByb3BzW25hbWVdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3BzT2JqZWN0O1xyXG59XHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYSByZWNvcmQgb3IgYW55IG9mIGl0cyBwYXJlbnQgaXMgYW4gYWxpYXNcclxuICogQHBhcmFtIHJlY29yZFxyXG4gKi9cclxuZnVuY3Rpb24gaXNBbGlhc1JlY29yZChyZWNvcmQpIHtcclxuICAgIHdoaWxlIChyZWNvcmQpIHtcclxuICAgICAgICBpZiAocmVjb3JkLnJlY29yZC5hbGlhc09mKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICByZWNvcmQgPSByZWNvcmQucGFyZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbi8qKlxyXG4gKiBNZXJnZSBtZXRhIGZpZWxkcyBvZiBhbiBhcnJheSBvZiByZWNvcmRzXHJcbiAqXHJcbiAqIEBwYXJhbSBtYXRjaGVkIC0gYXJyYXkgb2YgbWF0Y2hlZCByZWNvcmRzXHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZU1ldGFGaWVsZHMobWF0Y2hlZCkge1xyXG4gICAgcmV0dXJuIG1hdGNoZWQucmVkdWNlKChtZXRhLCByZWNvcmQpID0+IGFzc2lnbihtZXRhLCByZWNvcmQubWV0YSksIHt9KTtcclxufVxyXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMoZGVmYXVsdHMsIHBhcnRpYWxPcHRpb25zKSB7XHJcbiAgICBsZXQgb3B0aW9ucyA9IHt9O1xyXG4gICAgZm9yIChsZXQga2V5IGluIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgb3B0aW9uc1trZXldID1cclxuICAgICAgICAgICAga2V5IGluIHBhcnRpYWxPcHRpb25zID8gcGFydGlhbE9wdGlvbnNba2V5XSA6IGRlZmF1bHRzW2tleV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3B0aW9ucztcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVQYXJhbShhLCBiKSB7XHJcbiAgICByZXR1cm4gKGEubmFtZSA9PT0gYi5uYW1lICYmXHJcbiAgICAgICAgYS5vcHRpb25hbCA9PT0gYi5vcHRpb25hbCAmJlxyXG4gICAgICAgIGEucmVwZWF0YWJsZSA9PT0gYi5yZXBlYXRhYmxlKTtcclxufVxyXG5mdW5jdGlvbiBjaGVja1NhbWVQYXJhbXMoYSwgYikge1xyXG4gICAgZm9yIChsZXQga2V5IG9mIGEua2V5cykge1xyXG4gICAgICAgIGlmICghYi5rZXlzLmZpbmQoaXNTYW1lUGFyYW0uYmluZChudWxsLCBrZXkpKSlcclxuICAgICAgICAgICAgcmV0dXJuIHdhcm4oYEFsaWFzIFwiJHtiLnJlY29yZC5wYXRofVwiIGFuZCB0aGUgb3JpZ2luYWwgcmVjb3JkOiBcIiR7YS5yZWNvcmQucGF0aH1cIiBzaG91bGQgaGF2ZSB0aGUgZXhhY3Qgc2FtZSBwYXJhbSBuYW1lZCBcIiR7a2V5Lm5hbWV9XCJgKTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGtleSBvZiBiLmtleXMpIHtcclxuICAgICAgICBpZiAoIWEua2V5cy5maW5kKGlzU2FtZVBhcmFtLmJpbmQobnVsbCwga2V5KSkpXHJcbiAgICAgICAgICAgIHJldHVybiB3YXJuKGBBbGlhcyBcIiR7Yi5yZWNvcmQucGF0aH1cIiBhbmQgdGhlIG9yaWdpbmFsIHJlY29yZDogXCIke2EucmVjb3JkLnBhdGh9XCIgc2hvdWxkIGhhdmUgdGhlIGV4YWN0IHNhbWUgcGFyYW0gbmFtZWQgXCIke2tleS5uYW1lfVwiYCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY2hlY2tNaXNzaW5nUGFyYW1zSW5BYnNvbHV0ZVBhdGgocmVjb3JkLCBwYXJlbnQpIHtcclxuICAgIGZvciAobGV0IGtleSBvZiBwYXJlbnQua2V5cykge1xyXG4gICAgICAgIGlmICghcmVjb3JkLmtleXMuZmluZChpc1NhbWVQYXJhbS5iaW5kKG51bGwsIGtleSkpKVxyXG4gICAgICAgICAgICByZXR1cm4gd2FybihgQWJzb2x1dGUgcGF0aCBcIiR7cmVjb3JkLnJlY29yZC5wYXRofVwiIHNob3VsZCBoYXZlIHRoZSBleGFjdCBzYW1lIHBhcmFtIG5hbWVkIFwiJHtrZXkubmFtZX1cIiBhcyBpdHMgcGFyZW50IFwiJHtwYXJlbnQucmVjb3JkLnBhdGh9XCIuYCk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEVuY29kaW5nIFJ1bGVzIOKQoyA9IFNwYWNlIFBhdGg6IOKQoyBcIiA8ID4gIyA/IHsgfSBRdWVyeTog4pCjIFwiIDwgPiAjICYgPSBIYXNoOiDikKMgXCJcclxuICogPCA+IGBcclxuICpcclxuICogT24gdG9wIG9mIHRoYXQsIHRoZSBSRkMzOTg2IChodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTIuMilcclxuICogZGVmaW5lcyBzb21lIGV4dHJhIGNoYXJhY3RlcnMgdG8gYmUgZW5jb2RlZC4gTW9zdCBicm93c2VycyBkbyBub3QgZW5jb2RlIHRoZW1cclxuICogaW4gZW5jb2RlVVJJIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvdXJsL2lzc3Vlcy8zNjksIHNvIGl0IG1heSBiZSBzYWZlciB0b1xyXG4gKiBhbHNvIGVuY29kZSBgIScoKSpgLiBMZWF2aW5nIHVuZW5jb2RlZCBvbmx5IEFTQ0lJIGFscGhhbnVtZXJpYyhgYS16QS1aMC05YClcclxuICogcGx1cyBgLS5ffmAuIFRoaXMgZXh0cmEgc2FmZXR5IHNob3VsZCBiZSBhcHBsaWVkIHRvIHF1ZXJ5IGJ5IHBhdGNoaW5nIHRoZVxyXG4gKiBzdHJpbmcgcmV0dXJuZWQgYnkgZW5jb2RlVVJJQ29tcG9uZW50IGVuY29kZVVSSSBhbHNvIGVuY29kZXMgYFtcXF1eYC4gYFxcYFxyXG4gKiBzaG91bGQgYmUgZW5jb2RlZCB0byBhdm9pZCBhbWJpZ3VpdHkuIEJyb3dzZXJzIChJRSwgRkYsIEMpIHRyYW5zZm9ybSBhIGBcXGBcclxuICogaW50byBhIGAvYCBpZiBkaXJlY3RseSB0eXBlZCBpbi4gVGhlIF9iYWNrdGlja18gKGBgYGBgKSBzaG91bGQgYWxzbyBiZVxyXG4gKiBlbmNvZGVkIGV2ZXJ5d2hlcmUgYmVjYXVzZSBzb21lIGJyb3dzZXJzIGxpa2UgRkYgZW5jb2RlIGl0IHdoZW4gZGlyZWN0bHlcclxuICogd3JpdHRlbiB3aGlsZSBvdGhlcnMgZG9uJ3QuIFNhZmFyaSBhbmQgSUUgZG9uJ3QgZW5jb2RlIGBgXCI8Pnt9YGBgIGluIGhhc2guXHJcbiAqL1xyXG4vLyBjb25zdCBFWFRSQV9SRVNFUlZFRF9SRSA9IC9bIScoKSpdL2dcclxuLy8gY29uc3QgZW5jb2RlUmVzZXJ2ZWRSZXBsYWNlciA9IChjOiBzdHJpbmcpID0+ICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNilcclxuY29uc3QgSEFTSF9SRSA9IC8jL2c7IC8vICUyM1xyXG5jb25zdCBBTVBFUlNBTkRfUkUgPSAvJi9nOyAvLyAlMjZcclxuY29uc3QgU0xBU0hfUkUgPSAvXFwvL2c7IC8vICUyRlxyXG5jb25zdCBFUVVBTF9SRSA9IC89L2c7IC8vICUzRFxyXG5jb25zdCBJTV9SRSA9IC9cXD8vZzsgLy8gJTNGXHJcbmNvbnN0IFBMVVNfUkUgPSAvXFwrL2c7IC8vICUyQlxyXG4vKipcclxuICogTk9URTogSXQncyBub3QgY2xlYXIgdG8gbWUgaWYgd2Ugc2hvdWxkIGVuY29kZSB0aGUgKyBzeW1ib2wgaW4gcXVlcmllcywgaXRcclxuICogc2VlbXMgdG8gYmUgbGVzcyBmbGV4aWJsZSB0aGFuIG5vdCBkb2luZyBzbyBhbmQgSSBjYW4ndCBmaW5kIG91dCB0aGUgbGVnYWN5XHJcbiAqIHN5c3RlbXMgcmVxdWlyaW5nIHRoaXMgZm9yIHJlZ3VsYXIgcmVxdWVzdHMgbGlrZSB0ZXh0L2h0bWwuIEluIHRoZSBzdGFuZGFyZCxcclxuICogdGhlIGVuY29kaW5nIG9mIHRoZSBwbHVzIGNoYXJhY3RlciBpcyBvbmx5IG1lbnRpb25lZCBmb3JcclxuICogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXHJcbiAqIChodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybGVuY29kZWQtcGFyc2luZykgYW5kIG1vc3QgYnJvd3NlcnMgc2VlbXMgbG9cclxuICogbGVhdmUgdGhlIHBsdXMgY2hhcmFjdGVyIGFzIGlzIGluIHF1ZXJpZXMuIFRvIGJlIG1vcmUgZmxleGlibGUsIHdlIGFsbG93IHRoZVxyXG4gKiBwbHVzIGNoYXJhY3RlciBvbiB0aGUgcXVlcnkgYnV0IGl0IGNhbiBhbHNvIGJlIG1hbnVhbGx5IGVuY29kZWQgYnkgdGhlIHVzZXIuXHJcbiAqXHJcbiAqIFJlc291cmNlczpcclxuICogLSBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybGVuY29kZWQtcGFyc2luZ1xyXG4gKiAtIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE2MzQyNzEvdXJsLWVuY29kaW5nLXRoZS1zcGFjZS1jaGFyYWN0ZXItb3ItMjBcclxuICovXHJcbmNvbnN0IEVOQ19CUkFDS0VUX09QRU5fUkUgPSAvJTVCL2c7IC8vIFtcclxuY29uc3QgRU5DX0JSQUNLRVRfQ0xPU0VfUkUgPSAvJTVEL2c7IC8vIF1cclxuY29uc3QgRU5DX0NBUkVUX1JFID0gLyU1RS9nOyAvLyBeXHJcbmNvbnN0IEVOQ19CQUNLVElDS19SRSA9IC8lNjAvZzsgLy8gYFxyXG5jb25zdCBFTkNfQ1VSTFlfT1BFTl9SRSA9IC8lN0IvZzsgLy8ge1xyXG5jb25zdCBFTkNfUElQRV9SRSA9IC8lN0MvZzsgLy8gfFxyXG5jb25zdCBFTkNfQ1VSTFlfQ0xPU0VfUkUgPSAvJTdEL2c7IC8vIH1cclxuY29uc3QgRU5DX1NQQUNFX1JFID0gLyUyMC9nOyAvLyB9XHJcbi8qKlxyXG4gKiBFbmNvZGUgY2hhcmFjdGVycyB0aGF0IG5lZWQgdG8gYmUgZW5jb2RlZCBvbiB0aGUgcGF0aCwgc2VhcmNoIGFuZCBoYXNoXHJcbiAqIHNlY3Rpb25zIG9mIHRoZSBVUkwuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKiBAcGFyYW0gdGV4dCAtIHN0cmluZyB0byBlbmNvZGVcclxuICogQHJldHVybnMgZW5jb2RlZCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGNvbW1vbkVuY29kZSh0ZXh0KSB7XHJcbiAgICByZXR1cm4gZW5jb2RlVVJJKCcnICsgdGV4dClcclxuICAgICAgICAucmVwbGFjZShFTkNfUElQRV9SRSwgJ3wnKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19CUkFDS0VUX09QRU5fUkUsICdbJylcclxuICAgICAgICAucmVwbGFjZShFTkNfQlJBQ0tFVF9DTE9TRV9SRSwgJ10nKTtcclxufVxyXG4vKipcclxuICogRW5jb2RlIGNoYXJhY3RlcnMgdGhhdCBuZWVkIHRvIGJlIGVuY29kZWQgb24gdGhlIGhhc2ggc2VjdGlvbiBvZiB0aGUgVVJMLlxyXG4gKlxyXG4gKiBAcGFyYW0gdGV4dCAtIHN0cmluZyB0byBlbmNvZGVcclxuICogQHJldHVybnMgZW5jb2RlZCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGVuY29kZUhhc2godGV4dCkge1xyXG4gICAgcmV0dXJuIGNvbW1vbkVuY29kZSh0ZXh0KVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19DVVJMWV9PUEVOX1JFLCAneycpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0NVUkxZX0NMT1NFX1JFLCAnfScpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0NBUkVUX1JFLCAnXicpO1xyXG59XHJcbi8qKlxyXG4gKiBFbmNvZGUgY2hhcmFjdGVycyB0aGF0IG5lZWQgdG8gYmUgZW5jb2RlZCBxdWVyeSB2YWx1ZXMgb24gdGhlIHF1ZXJ5XHJcbiAqIHNlY3Rpb24gb2YgdGhlIFVSTC5cclxuICpcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZW5jb2RlXHJcbiAqIEByZXR1cm5zIGVuY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNvZGVRdWVyeVZhbHVlKHRleHQpIHtcclxuICAgIHJldHVybiAoY29tbW9uRW5jb2RlKHRleHQpXHJcbiAgICAgICAgLy8gRW5jb2RlIHRoZSBzcGFjZSBhcyArLCBlbmNvZGUgdGhlICsgdG8gZGlmZmVyZW50aWF0ZSBpdCBmcm9tIHRoZSBzcGFjZVxyXG4gICAgICAgIC5yZXBsYWNlKFBMVVNfUkUsICclMkInKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19TUEFDRV9SRSwgJysnKVxyXG4gICAgICAgIC5yZXBsYWNlKEhBU0hfUkUsICclMjMnKVxyXG4gICAgICAgIC5yZXBsYWNlKEFNUEVSU0FORF9SRSwgJyUyNicpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0JBQ0tUSUNLX1JFLCAnYCcpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0NVUkxZX09QRU5fUkUsICd7JylcclxuICAgICAgICAucmVwbGFjZShFTkNfQ1VSTFlfQ0xPU0VfUkUsICd9JylcclxuICAgICAgICAucmVwbGFjZShFTkNfQ0FSRVRfUkUsICdeJykpO1xyXG59XHJcbi8qKlxyXG4gKiBMaWtlIGBlbmNvZGVRdWVyeVZhbHVlYCBidXQgYWxzbyBlbmNvZGVzIHRoZSBgPWAgY2hhcmFjdGVyLlxyXG4gKlxyXG4gKiBAcGFyYW0gdGV4dCAtIHN0cmluZyB0byBlbmNvZGVcclxuICovXHJcbmZ1bmN0aW9uIGVuY29kZVF1ZXJ5S2V5KHRleHQpIHtcclxuICAgIHJldHVybiBlbmNvZGVRdWVyeVZhbHVlKHRleHQpLnJlcGxhY2UoRVFVQUxfUkUsICclM0QnKTtcclxufVxyXG4vKipcclxuICogRW5jb2RlIGNoYXJhY3RlcnMgdGhhdCBuZWVkIHRvIGJlIGVuY29kZWQgb24gdGhlIHBhdGggc2VjdGlvbiBvZiB0aGUgVVJMLlxyXG4gKlxyXG4gKiBAcGFyYW0gdGV4dCAtIHN0cmluZyB0byBlbmNvZGVcclxuICogQHJldHVybnMgZW5jb2RlZCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGVuY29kZVBhdGgodGV4dCkge1xyXG4gICAgcmV0dXJuIGNvbW1vbkVuY29kZSh0ZXh0KS5yZXBsYWNlKEhBU0hfUkUsICclMjMnKS5yZXBsYWNlKElNX1JFLCAnJTNGJyk7XHJcbn1cclxuLyoqXHJcbiAqIEVuY29kZSBjaGFyYWN0ZXJzIHRoYXQgbmVlZCB0byBiZSBlbmNvZGVkIG9uIHRoZSBwYXRoIHNlY3Rpb24gb2YgdGhlIFVSTCBhcyBhXHJcbiAqIHBhcmFtLiBUaGlzIGZ1bmN0aW9uIGVuY29kZXMgZXZlcnl0aGluZyB7QGxpbmsgZW5jb2RlUGF0aH0gZG9lcyBwbHVzIHRoZVxyXG4gKiBzbGFzaCAoYC9gKSBjaGFyYWN0ZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB0ZXh0IC0gc3RyaW5nIHRvIGVuY29kZVxyXG4gKiBAcmV0dXJucyBlbmNvZGVkIHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZW5jb2RlUGFyYW0odGV4dCkge1xyXG4gICAgcmV0dXJuIGVuY29kZVBhdGgodGV4dCkucmVwbGFjZShTTEFTSF9SRSwgJyUyRicpO1xyXG59XHJcbi8qKlxyXG4gKiBEZWNvZGUgdGV4dCB1c2luZyBgZGVjb2RlVVJJQ29tcG9uZW50YC4gUmV0dXJucyB0aGUgb3JpZ2luYWwgdGV4dCBpZiBpdFxyXG4gKiBmYWlscy5cclxuICpcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZGVjb2RlXHJcbiAqIEByZXR1cm5zIGRlY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWNvZGUodGV4dCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KCcnICsgdGV4dCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYEVycm9yIGRlY29kaW5nIFwiJHt0ZXh0fVwiLiBVc2luZyBvcmlnaW5hbCB2YWx1ZWApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICcnICsgdGV4dDtcclxufVxuXG4vKipcclxuICogVHJhbnNmb3JtcyBhIHF1ZXJ5U3RyaW5nIGludG8gYSB7QGxpbmsgTG9jYXRpb25RdWVyeX0gb2JqZWN0LiBBY2NlcHQgYm90aCwgYVxyXG4gKiB2ZXJzaW9uIHdpdGggdGhlIGxlYWRpbmcgYD9gIGFuZCB3aXRob3V0IFNob3VsZCB3b3JrIGFzIFVSTFNlYXJjaFBhcmFtc1xyXG5cbiAqIEBpbnRlcm5hbFxyXG4gKlxyXG4gKiBAcGFyYW0gc2VhcmNoIC0gc2VhcmNoIHN0cmluZyB0byBwYXJzZVxyXG4gKiBAcmV0dXJucyBhIHF1ZXJ5IG9iamVjdFxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VRdWVyeShzZWFyY2gpIHtcclxuICAgIGNvbnN0IHF1ZXJ5ID0ge307XHJcbiAgICAvLyBhdm9pZCBjcmVhdGluZyBhbiBvYmplY3Qgd2l0aCBhbiBlbXB0eSBrZXkgYW5kIGVtcHR5IHZhbHVlXHJcbiAgICAvLyBiZWNhdXNlIG9mIHNwbGl0KCcmJylcclxuICAgIGlmIChzZWFyY2ggPT09ICcnIHx8IHNlYXJjaCA9PT0gJz8nKVxyXG4gICAgICAgIHJldHVybiBxdWVyeTtcclxuICAgIGNvbnN0IGhhc0xlYWRpbmdJTSA9IHNlYXJjaFswXSA9PT0gJz8nO1xyXG4gICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gKGhhc0xlYWRpbmdJTSA/IHNlYXJjaC5zbGljZSgxKSA6IHNlYXJjaCkuc3BsaXQoJyYnKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VhcmNoUGFyYW1zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgLy8gcHJlIGRlY29kZSB0aGUgKyBpbnRvIHNwYWNlXHJcbiAgICAgICAgY29uc3Qgc2VhcmNoUGFyYW0gPSBzZWFyY2hQYXJhbXNbaV0ucmVwbGFjZShQTFVTX1JFLCAnICcpO1xyXG4gICAgICAgIC8vIGFsbG93IHRoZSA9IGNoYXJhY3RlclxyXG4gICAgICAgIGxldCBlcVBvcyA9IHNlYXJjaFBhcmFtLmluZGV4T2YoJz0nKTtcclxuICAgICAgICBsZXQga2V5ID0gZGVjb2RlKGVxUG9zIDwgMCA/IHNlYXJjaFBhcmFtIDogc2VhcmNoUGFyYW0uc2xpY2UoMCwgZXFQb3MpKTtcclxuICAgICAgICBsZXQgdmFsdWUgPSBlcVBvcyA8IDAgPyBudWxsIDogZGVjb2RlKHNlYXJjaFBhcmFtLnNsaWNlKGVxUG9zICsgMSkpO1xyXG4gICAgICAgIGlmIChrZXkgaW4gcXVlcnkpIHtcclxuICAgICAgICAgICAgLy8gYW4gZXh0cmEgdmFyaWFibGUgZm9yIHRzIHR5cGVzXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50VmFsdWUgPSBxdWVyeVtrZXldO1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY3VycmVudFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gcXVlcnlba2V5XSA9IFtjdXJyZW50VmFsdWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZS5wdXNoKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5W2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcXVlcnk7XHJcbn1cclxuLyoqXHJcbiAqIFN0cmluZ2lmaWVzIGEge0BsaW5rIExvY2F0aW9uUXVlcnlSYXd9IG9iamVjdC4gTGlrZSBgVVJMU2VhcmNoUGFyYW1zYCwgaXRcclxuICogZG9lc24ndCBwcmVwZW5kIGEgYD9gXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKlxyXG4gKiBAcGFyYW0gcXVlcnkgLSBxdWVyeSBvYmplY3QgdG8gc3RyaW5naWZ5XHJcbiAqIEByZXR1cm5zIHN0cmluZyB2ZXJzaW9uIG9mIHRoZSBxdWVyeSB3aXRob3V0IHRoZSBsZWFkaW5nIGA/YFxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaW5naWZ5UXVlcnkocXVlcnkpIHtcclxuICAgIGxldCBzZWFyY2ggPSAnJztcclxuICAgIGZvciAobGV0IGtleSBpbiBxdWVyeSkge1xyXG4gICAgICAgIGlmIChzZWFyY2gubGVuZ3RoKVxyXG4gICAgICAgICAgICBzZWFyY2ggKz0gJyYnO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcXVlcnlba2V5XTtcclxuICAgICAgICBrZXkgPSBlbmNvZGVRdWVyeUtleShrZXkpO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgbnVsbCBhZGRzIHRoZSB2YWx1ZVxyXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgIHNlYXJjaCArPSBrZXk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBrZWVwIG51bGwgdmFsdWVzXHJcbiAgICAgICAgbGV0IHZhbHVlcyA9IEFycmF5LmlzQXJyYXkodmFsdWUpXHJcbiAgICAgICAgICAgID8gdmFsdWUubWFwKHYgPT4gdiAmJiBlbmNvZGVRdWVyeVZhbHVlKHYpKVxyXG4gICAgICAgICAgICA6IFt2YWx1ZSAmJiBlbmNvZGVRdWVyeVZhbHVlKHZhbHVlKV07XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gb25seSBhcHBlbmQgJiB3aXRoIGkgPiAwXHJcbiAgICAgICAgICAgIHNlYXJjaCArPSAoaSA/ICcmJyA6ICcnKSArIGtleTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlc1tpXSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgc2VhcmNoICs9ICgnPScgKyB2YWx1ZXNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzZWFyY2g7XHJcbn1cclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgYSB7QGxpbmsgTG9jYXRpb25RdWVyeVJhd30gaW50byBhIHtAbGluayBMb2NhdGlvblF1ZXJ5fSBieSBjYXN0aW5nXHJcbiAqIG51bWJlcnMgaW50byBzdHJpbmdzLCByZW1vdmluZyBrZXlzIHdpdGggYW4gdW5kZWZpbmVkIHZhbHVlIGFuZCByZXBsYWNpbmdcclxuICogdW5kZWZpbmVkIHdpdGggbnVsbCBpbiBhcnJheXNcclxuICpcclxuICogQHBhcmFtIHF1ZXJ5IC0gcXVlcnkgb2JqZWN0IHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyBhIG5vcm1hbGl6ZWQgcXVlcnkgb2JqZWN0XHJcbiAqL1xyXG5mdW5jdGlvbiBub3JtYWxpemVRdWVyeShxdWVyeSkge1xyXG4gICAgY29uc3Qgbm9ybWFsaXplZFF1ZXJ5ID0ge307XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gcXVlcnkpIHtcclxuICAgICAgICBsZXQgdmFsdWUgPSBxdWVyeVtrZXldO1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRRdWVyeVtrZXldID0gQXJyYXkuaXNBcnJheSh2YWx1ZSlcclxuICAgICAgICAgICAgICAgID8gdmFsdWUubWFwKHYgPT4gKHYgPT0gbnVsbCA/IG51bGwgOiAnJyArIHYpKVxyXG4gICAgICAgICAgICAgICAgOiB2YWx1ZSA9PSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIDogJycgKyB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9ybWFsaXplZFF1ZXJ5O1xyXG59XG5cbi8qKlxyXG4gKiBDcmVhdGUgYSBsaXN0IG9mIGNhbGxiYWNrcyB0aGF0IGNhbiBiZSByZXNldC4gVXNlZCB0byBjcmVhdGUgYmVmb3JlIGFuZCBhZnRlciBuYXZpZ2F0aW9uIGd1YXJkcyBsaXN0XHJcbiAqL1xyXG5mdW5jdGlvbiB1c2VDYWxsYmFja3MoKSB7XHJcbiAgICBsZXQgaGFuZGxlcnMgPSBbXTtcclxuICAgIGZ1bmN0aW9uIGFkZChoYW5kbGVyKSB7XHJcbiAgICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gaGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKTtcclxuICAgICAgICAgICAgaWYgKGkgPiAtMSlcclxuICAgICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVzZXQoKSB7XHJcbiAgICAgICAgaGFuZGxlcnMgPSBbXTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYWRkLFxyXG4gICAgICAgIGxpc3Q6ICgpID0+IGhhbmRsZXJzLFxyXG4gICAgICAgIHJlc2V0LFxyXG4gICAgfTtcclxufVxuXG5mdW5jdGlvbiByZWdpc3Rlckd1YXJkKGxpc3QsIGd1YXJkKSB7XHJcbiAgICBjb25zdCByZW1vdmVGcm9tTGlzdCA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGxpc3QuaW5kZXhPZihndWFyZCk7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgIGxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIH07XHJcbiAgICBvblVubW91bnRlZChyZW1vdmVGcm9tTGlzdCk7XHJcbiAgICBvbkRlYWN0aXZhdGVkKHJlbW92ZUZyb21MaXN0KTtcclxuICAgIG9uQWN0aXZhdGVkKCgpID0+IHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGxpc3QuaW5kZXhPZihndWFyZCk7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMClcclxuICAgICAgICAgICAgbGlzdC5wdXNoKGd1YXJkKTtcclxuICAgIH0pO1xyXG4gICAgbGlzdC5wdXNoKGd1YXJkKTtcclxufVxyXG4vKipcclxuICogQWRkIGEgbmF2aWdhdGlvbiBndWFyZCB0aGF0IHRyaWdnZXJzIHdoZW5ldmVyIHRoZSBjb21wb25lbnQgZm9yIHRoZSBjdXJyZW50XHJcbiAqIGxvY2F0aW9uIGlzIGFib3V0IHRvIGJlIGxlZnQuIFNpbWlsYXIgdG8ge0BsaW5rIGJlZm9yZVJvdXRlTGVhdmV9IGJ1dCBjYW4gYmVcclxuICogdXNlZCBpbiBhbnkgY29tcG9uZW50LiBUaGUgZ3VhcmQgaXMgcmVtb3ZlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxyXG4gKlxyXG4gKiBAcGFyYW0gbGVhdmVHdWFyZCAtIHtAbGluayBOYXZpZ2F0aW9uR3VhcmR9XHJcbiAqL1xyXG5mdW5jdGlvbiBvbkJlZm9yZVJvdXRlTGVhdmUobGVhdmVHdWFyZCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZ2V0Q3VycmVudEluc3RhbmNlKCkpIHtcclxuICAgICAgICB3YXJuKCdvbkJlZm9yZVJvdXRlTGVhdmUgbXVzdCBiZSBjYWxsZWQgYXQgdGhlIHRvcCBvZiBhIHNldHVwIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYWN0aXZlUmVjb3JkID0gaW5qZWN0KG1hdGNoZWRSb3V0ZUtleSwge30pLnZhbHVlO1xyXG4gICAgaWYgKCFhY3RpdmVSZWNvcmQpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2Fybignb25CZWZvcmVSb3V0ZUxlYXZlIG11c3QgYmUgY2FsbGVkIGF0IHRoZSB0b3Agb2YgYSBzZXR1cCBmdW5jdGlvbicpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyR3VhcmQoYWN0aXZlUmVjb3JkLmxlYXZlR3VhcmRzLCBsZWF2ZUd1YXJkKTtcclxufVxyXG4vKipcclxuICogQWRkIGEgbmF2aWdhdGlvbiBndWFyZCB0aGF0IHRyaWdnZXJzIHdoZW5ldmVyIHRoZSBjdXJyZW50IGxvY2F0aW9uIGlzIGFib3V0XHJcbiAqIHRvIGJlIHVwZGF0ZWQuIFNpbWlsYXIgdG8ge0BsaW5rIGJlZm9yZVJvdXRlVXBkYXRlfSBidXQgY2FuIGJlIHVzZWQgaW4gYW55XHJcbiAqIGNvbXBvbmVudC4gVGhlIGd1YXJkIGlzIHJlbW92ZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZC5cclxuICpcclxuICogQHBhcmFtIHVwZGF0ZUd1YXJkIC0ge0BsaW5rIE5hdmlnYXRpb25HdWFyZH1cclxuICovXHJcbmZ1bmN0aW9uIG9uQmVmb3JlUm91dGVVcGRhdGUodXBkYXRlR3VhcmQpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWdldEN1cnJlbnRJbnN0YW5jZSgpKSB7XHJcbiAgICAgICAgd2Fybignb25CZWZvcmVSb3V0ZVVwZGF0ZSBtdXN0IGJlIGNhbGxlZCBhdCB0aGUgdG9wIG9mIGEgc2V0dXAgZnVuY3Rpb24nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBhY3RpdmVSZWNvcmQgPSBpbmplY3QobWF0Y2hlZFJvdXRlS2V5LCB7fSkudmFsdWU7XHJcbiAgICBpZiAoIWFjdGl2ZVJlY29yZCkge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICB3YXJuKCdvbkJlZm9yZVJvdXRlVXBkYXRlIG11c3QgYmUgY2FsbGVkIGF0IHRoZSB0b3Agb2YgYSBzZXR1cCBmdW5jdGlvbicpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyR3VhcmQoYWN0aXZlUmVjb3JkLnVwZGF0ZUd1YXJkcywgdXBkYXRlR3VhcmQpO1xyXG59XHJcbmZ1bmN0aW9uIGd1YXJkVG9Qcm9taXNlRm4oZ3VhcmQsIHRvLCBmcm9tLCByZWNvcmQsIG5hbWUpIHtcclxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIGVudGVyQ2FsbGJhY2tBcnJheSB0byBwcmV2ZW50IHB1c2hpbmcgY2FsbGJhY2tzIGlmIGEgbmV3IG5hdmlnYXRpb24gdG9vayBwbGFjZVxyXG4gICAgY29uc3QgZW50ZXJDYWxsYmFja0FycmF5ID0gcmVjb3JkICYmXHJcbiAgICAgICAgLy8gbmFtZSBpcyBkZWZpbmVkIGlmIHJlY29yZCBpcyBiZWNhdXNlIG9mIHRoZSBmdW5jdGlvbiBvdmVybG9hZFxyXG4gICAgICAgIChyZWNvcmQuZW50ZXJDYWxsYmFja3NbbmFtZV0gPSByZWNvcmQuZW50ZXJDYWxsYmFja3NbbmFtZV0gfHwgW10pO1xyXG4gICAgcmV0dXJuICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBjb25zdCBuZXh0ID0gKHZhbGlkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh2YWxpZCA9PT0gZmFsc2UpXHJcbiAgICAgICAgICAgICAgICByZWplY3QoY3JlYXRlUm91dGVyRXJyb3IoNCAvKiBOQVZJR0FUSU9OX0FCT1JURUQgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvLFxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh2YWxpZCBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QodmFsaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUm91dGVMb2NhdGlvbih2YWxpZCkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChjcmVhdGVSb3V0ZXJFcnJvcigyIC8qIE5BVklHQVRJT05fR1VBUkRfUkVESVJFQ1QgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tOiB0byxcclxuICAgICAgICAgICAgICAgICAgICB0bzogdmFsaWQsXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50ZXJDYWxsYmFja0FycmF5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2luY2UgZW50ZXJDYWxsYmFja0FycmF5IGlzIHRydXRoeSwgYm90aCByZWNvcmQgYW5kIG5hbWUgYWxzbyBhcmVcclxuICAgICAgICAgICAgICAgICAgICByZWNvcmQuZW50ZXJDYWxsYmFja3NbbmFtZV0gPT09IGVudGVyQ2FsbGJhY2tBcnJheSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWxpZCA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICBlbnRlckNhbGxiYWNrQXJyYXkucHVzaCh2YWxpZCk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIHdyYXBwaW5nIHdpdGggUHJvbWlzZS5yZXNvbHZlIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYm90aCBhc3luYyBhbmQgc3luYyBndWFyZHNcclxuICAgICAgICBjb25zdCBndWFyZFJldHVybiA9IGd1YXJkLmNhbGwocmVjb3JkICYmIHJlY29yZC5pbnN0YW5jZXNbbmFtZV0sIHRvLCBmcm9tLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBjYW5Pbmx5QmVDYWxsZWRPbmNlKG5leHQsIHRvLCBmcm9tKSA6IG5leHQpO1xyXG4gICAgICAgIGxldCBndWFyZENhbGwgPSBQcm9taXNlLnJlc29sdmUoZ3VhcmRSZXR1cm4pO1xyXG4gICAgICAgIGlmIChndWFyZC5sZW5ndGggPCAzKVxyXG4gICAgICAgICAgICBndWFyZENhbGwgPSBndWFyZENhbGwudGhlbihuZXh0KTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGd1YXJkLmxlbmd0aCA+IDIpIHtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBUaGUgXCJuZXh0XCIgY2FsbGJhY2sgd2FzIG5ldmVyIGNhbGxlZCBpbnNpZGUgb2YgJHtndWFyZC5uYW1lID8gJ1wiJyArIGd1YXJkLm5hbWUgKyAnXCInIDogJyd9OlxcbiR7Z3VhcmQudG9TdHJpbmcoKX1cXG4uIElmIHlvdSBhcmUgcmV0dXJuaW5nIGEgdmFsdWUgaW5zdGVhZCBvZiBjYWxsaW5nIFwibmV4dFwiLCBtYWtlIHN1cmUgdG8gcmVtb3ZlIHRoZSBcIm5leHRcIiBwYXJhbWV0ZXIgZnJvbSB5b3VyIGZ1bmN0aW9uLmA7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ3VhcmRSZXR1cm4gPT09ICdvYmplY3QnICYmICd0aGVuJyBpbiBndWFyZFJldHVybikge1xyXG4gICAgICAgICAgICAgICAgZ3VhcmRDYWxsID0gZ3VhcmRDYWxsLnRoZW4ocmVzb2x2ZWRWYWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZTogX2NhbGxlZCBpcyBhZGRlZCBhdCBjYW5Pbmx5QmVDYWxsZWRPbmNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0Ll9jYWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignSW52YWxpZCBuYXZpZ2F0aW9uIGd1YXJkJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogdGVzdCBtZSFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChndWFyZFJldHVybiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlOiBfY2FsbGVkIGlzIGFkZGVkIGF0IGNhbk9ubHlCZUNhbGxlZE9uY2VcclxuICAgICAgICAgICAgICAgIGlmICghbmV4dC5fY2FsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIG5hdmlnYXRpb24gZ3VhcmQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGd1YXJkQ2FsbC5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gY2FuT25seUJlQ2FsbGVkT25jZShuZXh0LCB0bywgZnJvbSkge1xyXG4gICAgbGV0IGNhbGxlZCA9IDA7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChjYWxsZWQrKyA9PT0gMSlcclxuICAgICAgICAgICAgd2FybihgVGhlIFwibmV4dFwiIGNhbGxiYWNrIHdhcyBjYWxsZWQgbW9yZSB0aGFuIG9uY2UgaW4gb25lIG5hdmlnYXRpb24gZ3VhcmQgd2hlbiBnb2luZyBmcm9tIFwiJHtmcm9tLmZ1bGxQYXRofVwiIHRvIFwiJHt0by5mdWxsUGF0aH1cIi4gSXQgc2hvdWxkIGJlIGNhbGxlZCBleGFjdGx5IG9uZSB0aW1lIGluIGVhY2ggbmF2aWdhdGlvbiBndWFyZC4gVGhpcyB3aWxsIGZhaWwgaW4gcHJvZHVjdGlvbi5gKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlOiB3ZSBwdXQgaXQgaW4gdGhlIG9yaWdpbmFsIG9uZSBiZWNhdXNlIGl0J3MgZWFzaWVyIHRvIGNoZWNrXHJcbiAgICAgICAgbmV4dC5fY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICBpZiAoY2FsbGVkID09PSAxKVxyXG4gICAgICAgICAgICBuZXh0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGV4dHJhY3RDb21wb25lbnRzR3VhcmRzKG1hdGNoZWQsIGd1YXJkVHlwZSwgdG8sIGZyb20pIHtcclxuICAgIGNvbnN0IGd1YXJkcyA9IFtdO1xyXG4gICAgZm9yIChjb25zdCByZWNvcmQgb2YgbWF0Y2hlZCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiByZWNvcmQuY29tcG9uZW50cykge1xyXG4gICAgICAgICAgICBsZXQgcmF3Q29tcG9uZW50ID0gcmVjb3JkLmNvbXBvbmVudHNbbmFtZV07XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmF3Q29tcG9uZW50IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiByYXdDb21wb25lbnQgIT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiByYXdDb21wb25lbnQgIT09ICdmdW5jdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IFwiJHtuYW1lfVwiIGluIHJlY29yZCB3aXRoIHBhdGggXCIke3JlY29yZC5wYXRofVwiIGlzIG5vdGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgIGEgdmFsaWQgY29tcG9uZW50LiBSZWNlaXZlZCBcIiR7U3RyaW5nKHJhd0NvbXBvbmVudCl9XCIuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhyb3cgdG8gZW5zdXJlIHdlIHN0b3AgaGVyZSBidXQgd2FybiB0byBlbnN1cmUgdGhlIG1lc3NhZ2UgaXNuJ3RcclxuICAgICAgICAgICAgICAgICAgICAvLyBtaXNzZWQgYnkgdGhlIHVzZXJcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcm91dGUgY29tcG9uZW50Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgndGhlbicgaW4gcmF3Q29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2FybiBpZiB1c2VyIHdyb3RlIGltcG9ydCgnL2NvbXBvbmVudC52dWUnKSBpbnN0ZWFkIG9mICgpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW1wb3J0KCcuL2NvbXBvbmVudC52dWUnKVxyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBcIiR7bmFtZX1cIiBpbiByZWNvcmQgd2l0aCBwYXRoIFwiJHtyZWNvcmQucGF0aH1cIiBpcyBhIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgUHJvbWlzZSBpbnN0ZWFkIG9mIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgUHJvbWlzZS4gRGlkIHlvdSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYHdyaXRlIFwiaW1wb3J0KCcuL015UGFnZS52dWUnKVwiIGluc3RlYWQgb2YgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcIigpID0+IGltcG9ydCgnLi9NeVBhZ2UudnVlJylcIiA/IFRoaXMgd2lsbCBicmVhayBpbiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYHByb2R1Y3Rpb24gaWYgbm90IGZpeGVkLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm9taXNlID0gcmF3Q29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHJhd0NvbXBvbmVudCA9ICgpID0+IHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gc2tpcCB1cGRhdGUgYW5kIGxlYXZlIGd1YXJkcyBpZiB0aGUgcm91dGUgY29tcG9uZW50IGlzIG5vdCBtb3VudGVkXHJcbiAgICAgICAgICAgIGlmIChndWFyZFR5cGUgIT09ICdiZWZvcmVSb3V0ZUVudGVyJyAmJiAhcmVjb3JkLmluc3RhbmNlc1tuYW1lXSlcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAoaXNSb3V0ZUNvbXBvbmVudChyYXdDb21wb25lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBfX3ZjY09wdHMgaXMgYWRkZWQgYnkgdnVlLWNsYXNzLWNvbXBvbmVudCBhbmQgY29udGFpbiB0aGUgcmVndWxhciBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHJhd0NvbXBvbmVudC5fX3ZjY09wdHMgfHwgcmF3Q29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3VhcmQgPSBvcHRpb25zW2d1YXJkVHlwZV07XHJcbiAgICAgICAgICAgICAgICBndWFyZCAmJiBndWFyZHMucHVzaChndWFyZFRvUHJvbWlzZUZuKGd1YXJkLCB0bywgZnJvbSwgcmVjb3JkLCBuYW1lKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzdGFydCByZXF1ZXN0aW5nIHRoZSBjaHVuayBhbHJlYWR5XHJcbiAgICAgICAgICAgICAgICBsZXQgY29tcG9uZW50UHJvbWlzZSA9IHJhd0NvbXBvbmVudCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhKCdjYXRjaCcgaW4gY29tcG9uZW50UHJvbWlzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgXCIke25hbWV9XCIgaW4gcmVjb3JkIHdpdGggcGF0aCBcIiR7cmVjb3JkLnBhdGh9XCIgaXMgYSBmdW5jdGlvbiB0aGF0IGRvZXMgbm90IHJldHVybiBhIFByb21pc2UuIElmIHlvdSB3ZXJlIHBhc3NpbmcgYSBmdW5jdGlvbmFsIGNvbXBvbmVudCwgbWFrZSBzdXJlIHRvIGFkZCBhIFwiZGlzcGxheU5hbWVcIiB0byB0aGUgY29tcG9uZW50LiBUaGlzIHdpbGwgYnJlYWsgaW4gcHJvZHVjdGlvbiBpZiBub3QgZml4ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb21wb25lbnRQcm9taXNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpc3BsYXkgdGhlIGVycm9yIGlmIGFueVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFByb21pc2UgPSBjb21wb25lbnRQcm9taXNlLmNhdGNoKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGVyciA9PiBlcnIgJiYgd2FybihlcnIpIDogY29uc29sZS5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBndWFyZHMucHVzaCgoKSA9PiBjb21wb25lbnRQcm9taXNlLnRoZW4ocmVzb2x2ZWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzb2x2ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYENvdWxkbid0IHJlc29sdmUgY29tcG9uZW50IFwiJHtuYW1lfVwiIGF0IFwiJHtyZWNvcmQucGF0aH1cImApKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZENvbXBvbmVudCA9IGlzRVNNb2R1bGUocmVzb2x2ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzb2x2ZWQuZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlc29sdmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIHJlc29sdmVkIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZC5jb21wb25lbnRzW25hbWVdID0gcmVzb2x2ZWRDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZTogdGhlIG9wdGlvbnMgdHlwZXMgYXJlIG5vdCBwcm9wYWdhdGVkIHRvIENvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGd1YXJkID0gcmVzb2x2ZWRDb21wb25lbnRbZ3VhcmRUeXBlXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ3VhcmQgJiYgZ3VhcmRUb1Byb21pc2VGbihndWFyZCwgdG8sIGZyb20sIHJlY29yZCwgbmFtZSkoKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBndWFyZHM7XHJcbn1cclxuLyoqXHJcbiAqIEFsbG93cyBkaWZmZXJlbnRpYXRpbmcgbGF6eSBjb21wb25lbnRzIGZyb20gZnVuY3Rpb25hbCBjb21wb25lbnRzIGFuZCB2dWUtY2xhc3MtY29tcG9uZW50XHJcbiAqIEBwYXJhbSBjb21wb25lbnRcclxuICovXHJcbmZ1bmN0aW9uIGlzUm91dGVDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBjb21wb25lbnQgPT09ICdvYmplY3QnIHx8XHJcbiAgICAgICAgJ2Rpc3BsYXlOYW1lJyBpbiBjb21wb25lbnQgfHxcclxuICAgICAgICAncHJvcHMnIGluIGNvbXBvbmVudCB8fFxyXG4gICAgICAgICdfX3ZjY09wdHMnIGluIGNvbXBvbmVudCk7XHJcbn1cblxuLy8gVE9ETzogd2UgY291bGQgYWxsb3cgY3VycmVudFJvdXRlIGFzIGEgcHJvcCB0byBleHBvc2UgYGlzQWN0aXZlYCBhbmRcclxuLy8gYGlzRXhhY3RBY3RpdmVgIGJlaGF2aW9yIHNob3VsZCBnbyB0aHJvdWdoIGFuIFJGQ1xyXG5mdW5jdGlvbiB1c2VMaW5rKHByb3BzKSB7XHJcbiAgICBjb25zdCByb3V0ZXIgPSBpbmplY3Qocm91dGVyS2V5KTtcclxuICAgIGNvbnN0IGN1cnJlbnRSb3V0ZSA9IGluamVjdChyb3V0ZUxvY2F0aW9uS2V5KTtcclxuICAgIGNvbnN0IHJvdXRlID0gY29tcHV0ZWQoKCkgPT4gcm91dGVyLnJlc29sdmUodW5yZWYocHJvcHMudG8pKSk7XHJcbiAgICBjb25zdCBhY3RpdmVSZWNvcmRJbmRleCA9IGNvbXB1dGVkKCgpID0+IHtcclxuICAgICAgICBsZXQgeyBtYXRjaGVkIH0gPSByb3V0ZS52YWx1ZTtcclxuICAgICAgICBsZXQgeyBsZW5ndGggfSA9IG1hdGNoZWQ7XHJcbiAgICAgICAgY29uc3Qgcm91dGVNYXRjaGVkID0gbWF0Y2hlZFtsZW5ndGggLSAxXTtcclxuICAgICAgICBsZXQgY3VycmVudE1hdGNoZWQgPSBjdXJyZW50Um91dGUubWF0Y2hlZDtcclxuICAgICAgICBpZiAoIXJvdXRlTWF0Y2hlZCB8fCAhY3VycmVudE1hdGNoZWQubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gY3VycmVudE1hdGNoZWQuZmluZEluZGV4KGlzU2FtZVJvdXRlUmVjb3JkLmJpbmQobnVsbCwgcm91dGVNYXRjaGVkKSk7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcclxuICAgICAgICAvLyBwb3NzaWJsZSBwYXJlbnQgcmVjb3JkXHJcbiAgICAgICAgbGV0IHBhcmVudFJlY29yZFBhdGggPSBnZXRPcmlnaW5hbFBhdGgobWF0Y2hlZFtsZW5ndGggLSAyXSk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAvLyB3ZSBhcmUgZGVhbGluZyB3aXRoIG5lc3RlZCByb3V0ZXNcclxuICAgICAgICBsZW5ndGggPiAxICYmXHJcbiAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgYW5kIG1hdGNoZWQgcm91dGUgaGF2ZSB0aGUgc2FtZSBwYXRoLCB0aGlzIGxpbmsgaXNcclxuICAgICAgICAgICAgLy8gcmVmZXJyaW5nIHRvIHRoZSBlbXB0eSBjaGlsZC4gT3Igd2UgY3VycmVudGx5IGFyZSBvbiBhIGRpZmZlcmVudFxyXG4gICAgICAgICAgICAvLyBjaGlsZCBvZiB0aGUgc2FtZSBwYXJlbnRcclxuICAgICAgICAgICAgZ2V0T3JpZ2luYWxQYXRoKHJvdXRlTWF0Y2hlZCkgPT09IHBhcmVudFJlY29yZFBhdGggJiZcclxuICAgICAgICAgICAgLy8gYXZvaWQgY29tcGFyaW5nIHRoZSBjaGlsZCB3aXRoIGl0cyBwYXJlbnRcclxuICAgICAgICAgICAgY3VycmVudE1hdGNoZWRbY3VycmVudE1hdGNoZWQubGVuZ3RoIC0gMV0ucGF0aCAhPT0gcGFyZW50UmVjb3JkUGF0aFxyXG4gICAgICAgICAgICA/IGN1cnJlbnRNYXRjaGVkLmZpbmRJbmRleChpc1NhbWVSb3V0ZVJlY29yZC5iaW5kKG51bGwsIG1hdGNoZWRbbGVuZ3RoIC0gMl0pKVxyXG4gICAgICAgICAgICA6IGluZGV4KTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgaXNBY3RpdmUgPSBjb21wdXRlZCgoKSA9PiBhY3RpdmVSZWNvcmRJbmRleC52YWx1ZSA+IC0xICYmXHJcbiAgICAgICAgaW5jbHVkZXNQYXJhbXMoY3VycmVudFJvdXRlLnBhcmFtcywgcm91dGUudmFsdWUucGFyYW1zKSk7XHJcbiAgICBjb25zdCBpc0V4YWN0QWN0aXZlID0gY29tcHV0ZWQoKCkgPT4gYWN0aXZlUmVjb3JkSW5kZXgudmFsdWUgPiAtMSAmJlxyXG4gICAgICAgIGFjdGl2ZVJlY29yZEluZGV4LnZhbHVlID09PSBjdXJyZW50Um91dGUubWF0Y2hlZC5sZW5ndGggLSAxICYmXHJcbiAgICAgICAgaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtcyhjdXJyZW50Um91dGUucGFyYW1zLCByb3V0ZS52YWx1ZS5wYXJhbXMpKTtcclxuICAgIGZ1bmN0aW9uIG5hdmlnYXRlKGUgPSB7fSkge1xyXG4gICAgICAgIGlmIChndWFyZEV2ZW50KGUpKVxyXG4gICAgICAgICAgICByZXR1cm4gcm91dGVyW3VucmVmKHByb3BzLnJlcGxhY2UpID8gJ3JlcGxhY2UnIDogJ3B1c2gnXSh1bnJlZihwcm9wcy50bykpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcm91dGUsXHJcbiAgICAgICAgaHJlZjogY29tcHV0ZWQoKCkgPT4gcm91dGUudmFsdWUuaHJlZiksXHJcbiAgICAgICAgaXNBY3RpdmUsXHJcbiAgICAgICAgaXNFeGFjdEFjdGl2ZSxcclxuICAgICAgICBuYXZpZ2F0ZSxcclxuICAgIH07XHJcbn1cclxuY29uc3QgUm91dGVyTGlua0ltcGwgPSAvKiNfX1BVUkVfXyovIGRlZmluZUNvbXBvbmVudCh7XHJcbiAgICBuYW1lOiAnUm91dGVyTGluaycsXHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIHRvOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF0sXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgICAgICAvLyBpbmFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICAgICAgZXhhY3RBY3RpdmVDbGFzczogU3RyaW5nLFxyXG4gICAgICAgIGN1c3RvbTogQm9vbGVhbixcclxuICAgICAgICBhcmlhQ3VycmVudFZhbHVlOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgZGVmYXVsdDogJ3BhZ2UnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGF0dHJzIH0pIHtcclxuICAgICAgICBjb25zdCBsaW5rID0gcmVhY3RpdmUodXNlTGluayhwcm9wcykpO1xyXG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gaW5qZWN0KHJvdXRlcktleSk7XHJcbiAgICAgICAgY29uc3QgZWxDbGFzcyA9IGNvbXB1dGVkKCgpID0+ICh7XHJcbiAgICAgICAgICAgIFtnZXRMaW5rQ2xhc3MocHJvcHMuYWN0aXZlQ2xhc3MsIG9wdGlvbnMubGlua0FjdGl2ZUNsYXNzLCAncm91dGVyLWxpbmstYWN0aXZlJyldOiBsaW5rLmlzQWN0aXZlLFxyXG4gICAgICAgICAgICAvLyBbZ2V0TGlua0NsYXNzKFxyXG4gICAgICAgICAgICAvLyAgIHByb3BzLmluYWN0aXZlQ2xhc3MsXHJcbiAgICAgICAgICAgIC8vICAgb3B0aW9ucy5saW5rSW5hY3RpdmVDbGFzcyxcclxuICAgICAgICAgICAgLy8gICAncm91dGVyLWxpbmstaW5hY3RpdmUnXHJcbiAgICAgICAgICAgIC8vICldOiAhbGluay5pc0V4YWN0QWN0aXZlLFxyXG4gICAgICAgICAgICBbZ2V0TGlua0NsYXNzKHByb3BzLmV4YWN0QWN0aXZlQ2xhc3MsIG9wdGlvbnMubGlua0V4YWN0QWN0aXZlQ2xhc3MsICdyb3V0ZXItbGluay1leGFjdC1hY3RpdmUnKV06IGxpbmsuaXNFeGFjdEFjdGl2ZSxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQobGluayk7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9wcy5jdXN0b21cclxuICAgICAgICAgICAgICAgID8gY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIDogaCgnYScsIGFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtY3VycmVudCc6IGxpbmsuaXNFeGFjdEFjdGl2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHByb3BzLmFyaWFDdXJyZW50VmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGxpbmsubmF2aWdhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogbGluay5ocmVmLFxyXG4gICAgICAgICAgICAgICAgfSwgYXR0cnMsIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzczogZWxDbGFzcy52YWx1ZSxcclxuICAgICAgICAgICAgICAgIH0pLCBjaGlsZHJlbik7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbn0pO1xyXG4vLyBleHBvcnQgdGhlIHB1YmxpYyB0eXBlIGZvciBoL3RzeCBpbmZlcmVuY2VcclxuLy8gYWxzbyB0byBhdm9pZCBpbmxpbmUgaW1wb3J0KCkgaW4gZ2VuZXJhdGVkIGQudHMgZmlsZXNcclxuLyoqXHJcbiAqIENvbXBvbmVudCB0byByZW5kZXIgYSBsaW5rIHRoYXQgdHJpZ2dlcnMgYSBuYXZpZ2F0aW9uIG9uIGNsaWNrLlxyXG4gKi9cclxuY29uc3QgUm91dGVyTGluayA9IFJvdXRlckxpbmtJbXBsO1xyXG5mdW5jdGlvbiBndWFyZEV2ZW50KGUpIHtcclxuICAgIC8vIGRvbid0IHJlZGlyZWN0IHdpdGggY29udHJvbCBrZXlzXHJcbiAgICBpZiAoZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5KVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIC8vIGRvbid0IHJlZGlyZWN0IHdoZW4gcHJldmVudERlZmF1bHQgY2FsbGVkXHJcbiAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIC8vIGRvbid0IHJlZGlyZWN0IG9uIHJpZ2h0IGNsaWNrXHJcbiAgICBpZiAoZS5idXR0b24gIT09IHVuZGVmaW5lZCAmJiBlLmJ1dHRvbiAhPT0gMClcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBkb24ndCByZWRpcmVjdCBpZiBgdGFyZ2V0PVwiX2JsYW5rXCJgXHJcbiAgICAvLyBAdHMtaWdub3JlIGdldEF0dHJpYnV0ZSBkb2VzIGV4aXN0XHJcbiAgICBpZiAoZS5jdXJyZW50VGFyZ2V0ICYmIGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUpIHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlIGdldEF0dHJpYnV0ZSBleGlzdHNcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKTtcclxuICAgICAgICBpZiAoL1xcYl9ibGFua1xcYi9pLnRlc3QodGFyZ2V0KSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gdGhpcyBtYXkgYmUgYSBXZWV4IGV2ZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSB0aGlzIG1ldGhvZFxyXG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gaW5jbHVkZXNQYXJhbXMob3V0ZXIsIGlubmVyKSB7XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gaW5uZXIpIHtcclxuICAgICAgICBsZXQgaW5uZXJWYWx1ZSA9IGlubmVyW2tleV07XHJcbiAgICAgICAgbGV0IG91dGVyVmFsdWUgPSBvdXRlcltrZXldO1xyXG4gICAgICAgIGlmICh0eXBlb2YgaW5uZXJWYWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKGlubmVyVmFsdWUgIT09IG91dGVyVmFsdWUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob3V0ZXJWYWx1ZSkgfHxcclxuICAgICAgICAgICAgICAgIG91dGVyVmFsdWUubGVuZ3RoICE9PSBpbm5lclZhbHVlLmxlbmd0aCB8fFxyXG4gICAgICAgICAgICAgICAgaW5uZXJWYWx1ZS5zb21lKCh2YWx1ZSwgaSkgPT4gdmFsdWUgIT09IG91dGVyVmFsdWVbaV0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbi8qKlxyXG4gKiBHZXQgdGhlIG9yaWdpbmFsIHBhdGggdmFsdWUgb2YgYSByZWNvcmQgYnkgZm9sbG93aW5nIGl0cyBhbGlhc09mXHJcbiAqIEBwYXJhbSByZWNvcmRcclxuICovXHJcbmZ1bmN0aW9uIGdldE9yaWdpbmFsUGF0aChyZWNvcmQpIHtcclxuICAgIHJldHVybiByZWNvcmQgPyAocmVjb3JkLmFsaWFzT2YgPyByZWNvcmQuYWxpYXNPZi5wYXRoIDogcmVjb3JkLnBhdGgpIDogJyc7XHJcbn1cclxuLyoqXHJcbiAqIFV0aWxpdHkgY2xhc3MgdG8gZ2V0IHRoZSBhY3RpdmUgY2xhc3MgYmFzZWQgb24gZGVmYXVsdHMuXHJcbiAqIEBwYXJhbSBwcm9wQ2xhc3NcclxuICogQHBhcmFtIGdsb2JhbENsYXNzXHJcbiAqIEBwYXJhbSBkZWZhdWx0Q2xhc3NcclxuICovXHJcbmNvbnN0IGdldExpbmtDbGFzcyA9IChwcm9wQ2xhc3MsIGdsb2JhbENsYXNzLCBkZWZhdWx0Q2xhc3MpID0+IHByb3BDbGFzcyAhPSBudWxsXHJcbiAgICA/IHByb3BDbGFzc1xyXG4gICAgOiBnbG9iYWxDbGFzcyAhPSBudWxsXHJcbiAgICAgICAgPyBnbG9iYWxDbGFzc1xyXG4gICAgICAgIDogZGVmYXVsdENsYXNzO1xuXG5jb25zdCBSb3V0ZXJWaWV3SW1wbCA9IC8qI19fUFVSRV9fKi8gZGVmaW5lQ29tcG9uZW50KHtcclxuICAgIG5hbWU6ICdSb3V0ZXJWaWV3JyxcclxuICAgIHByb3BzOiB7XHJcbiAgICAgICAgbmFtZToge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdkZWZhdWx0JyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJvdXRlOiBPYmplY3QsXHJcbiAgICB9LFxyXG4gICAgc2V0dXAocHJvcHMsIHsgYXR0cnMsIHNsb3RzIH0pIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybkRlcHJlY2F0ZWRVc2FnZSgpO1xyXG4gICAgICAgIGNvbnN0IGluamVjdGVkUm91dGUgPSBpbmplY3Qocm91dGVMb2NhdGlvbktleSk7XHJcbiAgICAgICAgY29uc3QgZGVwdGggPSBpbmplY3Qodmlld0RlcHRoS2V5LCAwKTtcclxuICAgICAgICBjb25zdCBtYXRjaGVkUm91dGVSZWYgPSBjb21wdXRlZCgoKSA9PiAocHJvcHMucm91dGUgfHwgaW5qZWN0ZWRSb3V0ZSkubWF0Y2hlZFtkZXB0aF0pO1xyXG4gICAgICAgIHByb3ZpZGUodmlld0RlcHRoS2V5LCBkZXB0aCArIDEpO1xyXG4gICAgICAgIHByb3ZpZGUobWF0Y2hlZFJvdXRlS2V5LCBtYXRjaGVkUm91dGVSZWYpO1xyXG4gICAgICAgIGNvbnN0IHZpZXdSZWYgPSByZWYoKTtcclxuICAgICAgICAvLyB3YXRjaCBhdCB0aGUgc2FtZSB0aW1lIHRoZSBjb21wb25lbnQgaW5zdGFuY2UsIHRoZSByb3V0ZSByZWNvcmQgd2UgYXJlXHJcbiAgICAgICAgLy8gcmVuZGVyaW5nLCBhbmQgdGhlIG5hbWVcclxuICAgICAgICB3YXRjaCgoKSA9PiBbdmlld1JlZi52YWx1ZSwgbWF0Y2hlZFJvdXRlUmVmLnZhbHVlLCBwcm9wcy5uYW1lXSwgKFtpbnN0YW5jZSwgdG8sIG5hbWVdLCBbb2xkSW5zdGFuY2UsIGZyb20sIG9sZE5hbWVdKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNvcHkgcmV1c2VkIGluc3RhbmNlc1xyXG4gICAgICAgICAgICBpZiAodG8pIHtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCB1cGRhdGUgdGhlIGluc3RhbmNlIGZvciBuZXcgaW5zdGFuY2VzIGFzIHdlbGwgYXMgcmV1c2VkXHJcbiAgICAgICAgICAgICAgICAvLyBpbnN0YW5jZXMgd2hlbiBuYXZpZ2F0aW5nIHRvIGEgbmV3IHJvdXRlXHJcbiAgICAgICAgICAgICAgICB0by5pbnN0YW5jZXNbbmFtZV0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBjb21wb25lbnQgaW5zdGFuY2UgaXMgcmV1c2VkIGZvciBhIGRpZmZlcmVudCByb3V0ZSBvciBuYW1lIHNvXHJcbiAgICAgICAgICAgICAgICAvLyB3ZSBjb3B5IGFueSBzYXZlZCB1cGRhdGUgb3IgbGVhdmUgZ3VhcmRzXHJcbiAgICAgICAgICAgICAgICBpZiAoZnJvbSAmJiBpbnN0YW5jZSA9PT0gb2xkSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0by5sZWF2ZUd1YXJkcyA9IGZyb20ubGVhdmVHdWFyZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgdG8udXBkYXRlR3VhcmRzID0gZnJvbS51cGRhdGVHdWFyZHM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdHJpZ2dlciBiZWZvcmVSb3V0ZUVudGVyIG5leHQgY2FsbGJhY2tzXHJcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZSAmJlxyXG4gICAgICAgICAgICAgICAgdG8gJiZcclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIGluc3RhbmNlIGJ1dCB0byBhbmQgZnJvbSBhcmUgdGhlIHNhbWUgdGhpcyBtaWdodCBiZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0IHZpc2l0XHJcbiAgICAgICAgICAgICAgICAoIWZyb20gfHwgIWlzU2FtZVJvdXRlUmVjb3JkKHRvLCBmcm9tKSB8fCAhb2xkSW5zdGFuY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAodG8uZW50ZXJDYWxsYmFja3NbbmFtZV0gfHwgW10pLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHsgZmx1c2g6ICdwb3N0JyB9KTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByb3V0ZSA9IHByb3BzLnJvdXRlIHx8IGluamVjdGVkUm91dGU7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZWRSb3V0ZSA9IG1hdGNoZWRSb3V0ZVJlZi52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgVmlld0NvbXBvbmVudCA9IG1hdGNoZWRSb3V0ZSAmJiBtYXRjaGVkUm91dGUuY29tcG9uZW50c1twcm9wcy5uYW1lXTtcclxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGUgdmFsdWUgYXQgdGhlIHRpbWUgd2UgcmVuZGVyIGJlY2F1c2Ugd2hlbiB3ZSB1bm1vdW50LCB3ZVxyXG4gICAgICAgICAgICAvLyBuYXZpZ2F0ZWQgdG8gYSBkaWZmZXJlbnQgbG9jYXRpb24gc28gdGhlIHZhbHVlIGlzIGRpZmZlcmVudFxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50TmFtZSA9IHByb3BzLm5hbWU7XHJcbiAgICAgICAgICAgIGlmICghVmlld0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNsb3RzLmRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICA/IHNsb3RzLmRlZmF1bHQoeyBDb21wb25lbnQ6IFZpZXdDb21wb25lbnQsIHJvdXRlIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByb3BzIGZyb20gcm91dGUgY29uZmlndXJhdGlvblxyXG4gICAgICAgICAgICBjb25zdCByb3V0ZVByb3BzT3B0aW9uID0gbWF0Y2hlZFJvdXRlLnByb3BzW3Byb3BzLm5hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCByb3V0ZVByb3BzID0gcm91dGVQcm9wc09wdGlvblxyXG4gICAgICAgICAgICAgICAgPyByb3V0ZVByb3BzT3B0aW9uID09PSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgPyByb3V0ZS5wYXJhbXNcclxuICAgICAgICAgICAgICAgICAgICA6IHR5cGVvZiByb3V0ZVByb3BzT3B0aW9uID09PSAnZnVuY3Rpb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcm91dGVQcm9wc09wdGlvbihyb3V0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiByb3V0ZVByb3BzT3B0aW9uXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgIGNvbnN0IG9uVm5vZGVVbm1vdW50ZWQgPSB2bm9kZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGluc3RhbmNlIHJlZmVyZW5jZSB0byBwcmV2ZW50IGxlYWtcclxuICAgICAgICAgICAgICAgIGlmICh2bm9kZS5jb21wb25lbnQuaXNVbm1vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVkUm91dGUuaW5zdGFuY2VzW2N1cnJlbnROYW1lXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGgoVmlld0NvbXBvbmVudCwgYXNzaWduKHt9LCByb3V0ZVByb3BzLCBhdHRycywge1xyXG4gICAgICAgICAgICAgICAgb25Wbm9kZVVubW91bnRlZCxcclxuICAgICAgICAgICAgICAgIHJlZjogdmlld1JlZixcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAvLyBwYXNzIHRoZSB2bm9kZSB0byB0aGUgc2xvdCBhcyBhIHByb3AuXHJcbiAgICAgICAgICAgIC8vIGggYW5kIDxjb21wb25lbnQgOmlzPVwiLi4uXCI+IGJvdGggYWNjZXB0IHZub2Rlc1xyXG4gICAgICAgICAgICBzbG90cy5kZWZhdWx0XHJcbiAgICAgICAgICAgICAgICA/IHNsb3RzLmRlZmF1bHQoeyBDb21wb25lbnQ6IGNvbXBvbmVudCwgcm91dGUgfSlcclxuICAgICAgICAgICAgICAgIDogY29tcG9uZW50KTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XHJcbi8vIGV4cG9ydCB0aGUgcHVibGljIHR5cGUgZm9yIGgvdHN4IGluZmVyZW5jZVxyXG4vLyBhbHNvIHRvIGF2b2lkIGlubGluZSBpbXBvcnQoKSBpbiBnZW5lcmF0ZWQgZC50cyBmaWxlc1xyXG4vKipcclxuICogQ29tcG9uZW50IHRvIGRpc3BsYXkgdGhlIGN1cnJlbnQgcm91dGUgdGhlIHVzZXIgaXMgYXQuXHJcbiAqL1xyXG5jb25zdCBSb3V0ZXJWaWV3ID0gUm91dGVyVmlld0ltcGw7XHJcbi8vIHdhcm4gYWdhaW5zdCBkZXByZWNhdGVkIHVzYWdlIHdpdGggPHRyYW5zaXRpb24+ICYgPGtlZXAtYWxpdmU+XHJcbi8vIGR1ZSB0byBmdW5jdGlvbmFsIGNvbXBvbmVudCBiZWluZyBubyBsb25nZXIgZWFnZXIgaW4gVnVlIDNcclxuZnVuY3Rpb24gd2FybkRlcHJlY2F0ZWRVc2FnZSgpIHtcclxuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICBjb25zdCBwYXJlbnROYW1lID0gaW5zdGFuY2UucGFyZW50ICYmIGluc3RhbmNlLnBhcmVudC50eXBlLm5hbWU7XHJcbiAgICBpZiAocGFyZW50TmFtZSAmJlxyXG4gICAgICAgIChwYXJlbnROYW1lID09PSAnS2VlcEFsaXZlJyB8fCBwYXJlbnROYW1lLmluY2x1ZGVzKCdUcmFuc2l0aW9uJykpKSB7XHJcbiAgICAgICAgY29uc3QgY29tcCA9IHBhcmVudE5hbWUgPT09ICdLZWVwQWxpdmUnID8gJ2tlZXAtYWxpdmUnIDogJ3RyYW5zaXRpb24nO1xyXG4gICAgICAgIHdhcm4oYDxyb3V0ZXItdmlldz4gY2FuIG5vIGxvbmdlciBiZSB1c2VkIGRpcmVjdGx5IGluc2lkZSA8dHJhbnNpdGlvbj4gb3IgPGtlZXAtYWxpdmU+LlxcbmAgK1xyXG4gICAgICAgICAgICBgVXNlIHNsb3QgcHJvcHMgaW5zdGVhZDpcXG5cXG5gICtcclxuICAgICAgICAgICAgYDxyb3V0ZXItdmlldyB2LXNsb3Q9XCJ7IENvbXBvbmVudCB9XCI+XFxuYCArXHJcbiAgICAgICAgICAgIGAgIDwke2NvbXB9PlxcbmAgK1xyXG4gICAgICAgICAgICBgICAgIDxjb21wb25lbnQgOmlzPVwiQ29tcG9uZW50XCIgLz5cXG5gICtcclxuICAgICAgICAgICAgYCAgPC8ke2NvbXB9PlxcbmAgK1xyXG4gICAgICAgICAgICBgPC9yb3V0ZXItdmlldz5gKTtcclxuICAgIH1cclxufVxuXG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIGJhc2VkaXIsIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0ge1xuXHRcdHBhdGg6IGJhc2VkaXIsXG5cdFx0ZXhwb3J0czoge30sXG5cdFx0cmVxdWlyZTogZnVuY3Rpb24gKHBhdGgsIGJhc2UpIHtcblx0XHRcdHJldHVybiBjb21tb25qc1JlcXVpcmUocGF0aCwgKGJhc2UgPT09IHVuZGVmaW5lZCB8fCBiYXNlID09PSBudWxsKSA/IG1vZHVsZS5wYXRoIDogYmFzZSk7XG5cdFx0fVxuXHR9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbmZ1bmN0aW9uIGNvbW1vbmpzUmVxdWlyZSAoKSB7XG5cdHRocm93IG5ldyBFcnJvcignRHluYW1pYyByZXF1aXJlcyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgYnkgQHJvbGx1cC9wbHVnaW4tY29tbW9uanMnKTtcbn1cblxudmFyIGVudiA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaG9vayA9IGV4cG9ydHMudGFyZ2V0ID0gZXhwb3J0cy5pc0Jyb3dzZXIgPSB2b2lkIDA7XG5leHBvcnRzLmlzQnJvd3NlciA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnO1xuZXhwb3J0cy50YXJnZXQgPSBleHBvcnRzLmlzQnJvd3NlclxuICAgID8gd2luZG93XG4gICAgOiB0eXBlb2YgY29tbW9uanNHbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gY29tbW9uanNHbG9iYWxcbiAgICAgICAgOiB7fTtcbmV4cG9ydHMuaG9vayA9IGV4cG9ydHMudGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbn0pO1xuXG52YXIgX2NvbnN0ID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BcGlIb29rRXZlbnRzID0gdm9pZCAwO1xudmFyIEFwaUhvb2tFdmVudHM7XG4oZnVuY3Rpb24gKEFwaUhvb2tFdmVudHMpIHtcbiAgICBBcGlIb29rRXZlbnRzW1wiU0VUVVBfREVWVE9PTFNfUExVR0lOXCJdID0gXCJkZXZ0b29scy1wbHVnaW46c2V0dXBcIjtcbn0pKEFwaUhvb2tFdmVudHMgPSBleHBvcnRzLkFwaUhvb2tFdmVudHMgfHwgKGV4cG9ydHMuQXBpSG9va0V2ZW50cyA9IHt9KSk7XG5cbn0pO1xuXG52YXIgYXBpID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KTtcblxudmFyIGFwcCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSk7XG5cbnZhciBjb21wb25lbnQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pO1xuXG52YXIgY29udGV4dCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSk7XG5cbnZhciBob29rcyA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSG9va3MgPSB2b2lkIDA7XG52YXIgSG9va3M7XG4oZnVuY3Rpb24gKEhvb2tzKSB7XG4gICAgSG9va3NbXCJUUkFOU0ZPUk1fQ0FMTFwiXSA9IFwidHJhbnNmb3JtQ2FsbFwiO1xuICAgIEhvb2tzW1wiR0VUX0FQUF9SRUNPUkRfTkFNRVwiXSA9IFwiZ2V0QXBwUmVjb3JkTmFtZVwiO1xuICAgIEhvb2tzW1wiR0VUX0FQUF9ST09UX0lOU1RBTkNFXCJdID0gXCJnZXRBcHBSb290SW5zdGFuY2VcIjtcbiAgICBIb29rc1tcIlJFR0lTVEVSX0FQUExJQ0FUSU9OXCJdID0gXCJyZWdpc3RlckFwcGxpY2F0aW9uXCI7XG4gICAgSG9va3NbXCJXQUxLX0NPTVBPTkVOVF9UUkVFXCJdID0gXCJ3YWxrQ29tcG9uZW50VHJlZVwiO1xuICAgIEhvb2tzW1wiV0FMS19DT01QT05FTlRfUEFSRU5UU1wiXSA9IFwid2Fsa0NvbXBvbmVudFBhcmVudHNcIjtcbiAgICBIb29rc1tcIklOU1BFQ1RfQ09NUE9ORU5UXCJdID0gXCJpbnNwZWN0Q29tcG9uZW50XCI7XG4gICAgSG9va3NbXCJHRVRfQ09NUE9ORU5UX0JPVU5EU1wiXSA9IFwiZ2V0Q29tcG9uZW50Qm91bmRzXCI7XG4gICAgSG9va3NbXCJHRVRfQ09NUE9ORU5UX05BTUVcIl0gPSBcImdldENvbXBvbmVudE5hbWVcIjtcbiAgICBIb29rc1tcIkdFVF9FTEVNRU5UX0NPTVBPTkVOVFwiXSA9IFwiZ2V0RWxlbWVudENvbXBvbmVudFwiO1xuICAgIEhvb2tzW1wiR0VUX0lOU1BFQ1RPUl9UUkVFXCJdID0gXCJnZXRJbnNwZWN0b3JUcmVlXCI7XG4gICAgSG9va3NbXCJHRVRfSU5TUEVDVE9SX1NUQVRFXCJdID0gXCJnZXRJbnNwZWN0b3JTdGF0ZVwiO1xufSkoSG9va3MgPSBleHBvcnRzLkhvb2tzIHx8IChleHBvcnRzLkhvb2tzID0ge30pKTtcblxufSk7XG5cbnZhciBhcGkkMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAoY29tbW9uanNHbG9iYWwgJiYgY29tbW9uanNHbG9iYWwuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAoY29tbW9uanNHbG9iYWwgJiYgY29tbW9uanNHbG9iYWwuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIoYXBpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihhcHAsIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKGNvbXBvbmVudCwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoY29udGV4dCwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoaG9va3MsIGV4cG9ydHMpO1xuXG59KTtcblxudmFyIGxpYiA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAoY29tbW9uanNHbG9iYWwgJiYgY29tbW9uanNHbG9iYWwuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAoY29tbW9uanNHbG9iYWwgJiYgY29tbW9uanNHbG9iYWwuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldHVwRGV2dG9vbHNQbHVnaW4gPSB2b2lkIDA7XG5cblxuX19leHBvcnRTdGFyKGFwaSQxLCBleHBvcnRzKTtcbmZ1bmN0aW9uIHNldHVwRGV2dG9vbHNQbHVnaW4ocGx1Z2luRGVzY3JpcHRvciwgc2V0dXBGbikge1xuICAgIGlmIChlbnYuaG9vaykge1xuICAgICAgICBlbnYuaG9vay5lbWl0KF9jb25zdC5BcGlIb29rRXZlbnRzLlNFVFVQX0RFVlRPT0xTX1BMVUdJTiwgcGx1Z2luRGVzY3JpcHRvciwgc2V0dXBGbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBsaXN0ID0gZW52LnRhcmdldC5fX1ZVRV9ERVZUT09MU19QTFVHSU5TX18gPSBlbnYudGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1BMVUdJTlNfXyB8fCBbXTtcbiAgICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgICAgIHBsdWdpbkRlc2NyaXB0b3IsXG4gICAgICAgICAgICBzZXR1cEZuXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuc2V0dXBEZXZ0b29sc1BsdWdpbiA9IHNldHVwRGV2dG9vbHNQbHVnaW47XG5cbn0pO1xuXG5mdW5jdGlvbiBmb3JtYXRSb3V0ZUxvY2F0aW9uKHJvdXRlTG9jYXRpb24sIHRvb2x0aXApIHtcclxuICAgIGNvbnN0IGNvcHkgPSB7XHJcbiAgICAgICAgLi4ucm91dGVMb2NhdGlvbixcclxuICAgICAgICAvLyByZW1vdmUgdmFyaWFibGVzIHRoYXQgY2FuIGNvbnRhaW4gdnVlIGluc3RhbmNlc1xyXG4gICAgICAgIG1hdGNoZWQ6IHJvdXRlTG9jYXRpb24ubWF0Y2hlZC5tYXAoKHsgaW5zdGFuY2VzLCBjaGlsZHJlbiwgYWxpYXNPZiwgLi4ucmVzdCB9KSA9PiByZXN0KSxcclxuICAgIH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIF9jdXN0b206IHtcclxuICAgICAgICAgICAgdHlwZTogbnVsbCxcclxuICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IHJvdXRlTG9jYXRpb24uZnVsbFBhdGgsXHJcbiAgICAgICAgICAgIHRvb2x0aXAsXHJcbiAgICAgICAgICAgIHZhbHVlOiBjb3B5LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGZvcm1hdERpc3BsYXkoZGlzcGxheSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBfY3VzdG9tOiB7XHJcbiAgICAgICAgICAgIGRpc3BsYXksXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuLy8gdG8gc3VwcG9ydCBtdWx0aXBsZSByb3V0ZXIgaW5zdGFuY2VzXHJcbmxldCByb3V0ZXJJZCA9IDA7XHJcbmZ1bmN0aW9uIGFkZERldnRvb2xzKGFwcCwgcm91dGVyLCBtYXRjaGVyKSB7XHJcbiAgICAvLyBUYWtlIG92ZXIgcm91dGVyLmJlZm9yZUVhY2ggYW5kIGFmdGVyRWFjaFxyXG4gICAgLy8gaW5jcmVtZW50IHRvIHN1cHBvcnQgbXVsdGlwbGUgcm91dGVyIGluc3RhbmNlc1xyXG4gICAgY29uc3QgaWQgPSByb3V0ZXJJZCsrO1xyXG4gICAgbGliLnNldHVwRGV2dG9vbHNQbHVnaW4oe1xyXG4gICAgICAgIGlkOiAnUm91dGVyJyArIGlkID8gJyAnICsgaWQgOiAnJyxcclxuICAgICAgICBsYWJlbDogJ1JvdXRlciBkZXZ0b29scycsXHJcbiAgICAgICAgYXBwLFxyXG4gICAgfSwgYXBpID0+IHtcclxuICAgICAgICBhcGkub24uaW5zcGVjdENvbXBvbmVudCgocGF5bG9hZCwgY3R4KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwYXlsb2FkLmluc3RhbmNlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgcGF5bG9hZC5pbnN0YW5jZURhdGEuc3RhdGUucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1JvdXRpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGtleTogJyRyb3V0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmb3JtYXRSb3V0ZUxvY2F0aW9uKHJvdXRlci5jdXJyZW50Um91dGUudmFsdWUsICdDdXJyZW50IFJvdXRlJyksXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHdhdGNoKHJvdXRlci5jdXJyZW50Um91dGUsICgpID0+IHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBhcGkubm90aWZ5Q29tcG9uZW50VXBkYXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgbmF2aWdhdGlvbnNMYXllcklkID0gJ3JvdXRlcjpuYXZpZ2F0aW9uczonICsgaWQ7XHJcbiAgICAgICAgYXBpLmFkZFRpbWVsaW5lTGF5ZXIoe1xyXG4gICAgICAgICAgICBpZDogbmF2aWdhdGlvbnNMYXllcklkLFxyXG4gICAgICAgICAgICBsYWJlbDogYFJvdXRlciR7aWQgPyAnICcgKyBpZCA6ICcnfSBOYXZpZ2F0aW9uc2AsXHJcbiAgICAgICAgICAgIGNvbG9yOiAweDQwYThjNCxcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBjb25zdCBlcnJvcnNMYXllcklkID0gJ3JvdXRlcjplcnJvcnMnXHJcbiAgICAgICAgLy8gYXBpLmFkZFRpbWVsaW5lTGF5ZXIoe1xyXG4gICAgICAgIC8vICAgaWQ6IGVycm9yc0xheWVySWQsXHJcbiAgICAgICAgLy8gICBsYWJlbDogJ1JvdXRlciBFcnJvcnMnLFxyXG4gICAgICAgIC8vICAgY29sb3I6IDB4ZWE1NDU1LFxyXG4gICAgICAgIC8vIH0pXHJcbiAgICAgICAgcm91dGVyLm9uRXJyb3IoZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICBhcGkuYWRkVGltZWxpbmVFdmVudCh7XHJcbiAgICAgICAgICAgICAgICBsYXllcklkOiBuYXZpZ2F0aW9uc0xheWVySWQsXHJcbiAgICAgICAgICAgICAgICBldmVudDoge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBsb2dUeXBlOiAnZXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBlcnJvciB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcm91dGVyLmJlZm9yZUVhY2goKHRvLCBmcm9tKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBndWFyZDogZm9ybWF0RGlzcGxheSgnYmVmb3JlRWFjaCcpLFxyXG4gICAgICAgICAgICAgICAgZnJvbTogZm9ybWF0Um91dGVMb2NhdGlvbihmcm9tLCAnQ3VycmVudCBMb2NhdGlvbiBkdXJpbmcgdGhpcyBuYXZpZ2F0aW9uJyksXHJcbiAgICAgICAgICAgICAgICB0bzogZm9ybWF0Um91dGVMb2NhdGlvbih0bywgJ1RhcmdldCBsb2NhdGlvbicpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBhcGkuYWRkVGltZWxpbmVFdmVudCh7XHJcbiAgICAgICAgICAgICAgICBsYXllcklkOiBuYXZpZ2F0aW9uc0xheWVySWQsXHJcbiAgICAgICAgICAgICAgICBldmVudDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgbWV0YToge30sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJvdXRlci5hZnRlckVhY2goKHRvLCBmcm9tLCBmYWlsdXJlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBndWFyZDogZm9ybWF0RGlzcGxheSgnYWZ0ZXJFYWNoJyksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChmYWlsdXJlKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhLmZhaWx1cmUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2N1c3RvbToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBFcnJvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhaWx1cmUgPyBmYWlsdXJlLm1lc3NhZ2UgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogJ05hdmlnYXRpb24gRmFpbHVyZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmYWlsdXJlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSBmb3JtYXREaXNwbGF5KCfinYwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gZm9ybWF0RGlzcGxheSgn4pyFJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gd2Ugc2V0IGhlcmUgdG8gaGF2ZSB0aGUgcmlnaHQgb3JkZXJcclxuICAgICAgICAgICAgZGF0YS5mcm9tID0gZm9ybWF0Um91dGVMb2NhdGlvbihmcm9tLCAnQ3VycmVudCBMb2NhdGlvbiBkdXJpbmcgdGhpcyBuYXZpZ2F0aW9uJyk7XHJcbiAgICAgICAgICAgIGRhdGEudG8gPSBmb3JtYXRSb3V0ZUxvY2F0aW9uKHRvLCAnVGFyZ2V0IGxvY2F0aW9uJyk7XHJcbiAgICAgICAgICAgIGFwaS5hZGRUaW1lbGluZUV2ZW50KHtcclxuICAgICAgICAgICAgICAgIGxheWVySWQ6IG5hdmlnYXRpb25zTGF5ZXJJZCxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICBsb2dUeXBlOiBmYWlsdXJlID8gJ3dhcm5pbmcnIDogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGE6IHt9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3Qgcm91dGVySW5zcGVjdG9ySWQgPSAncm91dGVyLWluc3BlY3RvcjonICsgaWQ7XHJcbiAgICAgICAgYXBpLmFkZEluc3BlY3Rvcih7XHJcbiAgICAgICAgICAgIGlkOiByb3V0ZXJJbnNwZWN0b3JJZCxcclxuICAgICAgICAgICAgbGFiZWw6ICdSb3V0ZXMnICsgKGlkID8gJyAnICsgaWQgOiAnJyksXHJcbiAgICAgICAgICAgIGljb246ICdib29rJyxcclxuICAgICAgICAgICAgdHJlZUZpbHRlclBsYWNlaG9sZGVyOiAnU2VhcmNoIHJvdXRlcycsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXBpLm9uLmdldEluc3BlY3RvclRyZWUocGF5bG9hZCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwYXlsb2FkLmFwcCA9PT0gYXBwICYmIHBheWxvYWQuaW5zcGVjdG9ySWQgPT09IHJvdXRlckluc3BlY3RvcklkKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcm91dGVzID0gbWF0Y2hlci5nZXRSb3V0ZXMoKTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLmZpbHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlcyA9IHJvdXRlcy5maWx0ZXIocm91dGUgPT4gIXJvdXRlLnBhcmVudCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzYXZlIGlzQWN0aXZlIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUm91dGVNYXRjaGluZyhyb3V0ZSwgcGF5bG9hZC5maWx0ZXIudG9Mb3dlckNhc2UoKSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgbWF0Y2ggc3RhdGUgaWYgbm8gZmlsdGVyIGlzIHByb3ZpZGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoIXBheWxvYWQuZmlsdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm91dGVzLmZvckVhY2gocm91dGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZS5fX3ZkX21hdGNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwYXlsb2FkLnJvb3ROb2RlcyA9IHJvdXRlcy5tYXAoZm9ybWF0Um91dGVSZWNvcmRGb3JJbnNwZWN0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXBpLm9uLmdldEluc3BlY3RvclN0YXRlKHBheWxvYWQgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGF5bG9hZC5hcHAgPT09IGFwcCAmJiBwYXlsb2FkLmluc3BlY3RvcklkID09PSByb3V0ZXJJbnNwZWN0b3JJZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm91dGVzID0gbWF0Y2hlci5nZXRSb3V0ZXMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvdXRlID0gcm91dGVzLmZpbmQocm91dGUgPT4gcm91dGUucmVjb3JkLnBhdGggPT09IHBheWxvYWQubm9kZUlkKTtcclxuICAgICAgICAgICAgICAgIGlmIChyb3V0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGZvcm1hdFJvdXRlUmVjb3JkTWF0Y2hlckZvclN0YXRlSW5zcGVjdG9yKHJvdXRlKSxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBtb2RpZmllckZvcktleShrZXkpIHtcclxuICAgIGlmIChrZXkub3B0aW9uYWwpIHtcclxuICAgICAgICByZXR1cm4ga2V5LnJlcGVhdGFibGUgPyAnKicgOiAnPyc7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4ga2V5LnJlcGVhdGFibGUgPyAnKycgOiAnJztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBmb3JtYXRSb3V0ZVJlY29yZE1hdGNoZXJGb3JTdGF0ZUluc3BlY3Rvcihyb3V0ZSkge1xyXG4gICAgY29uc3QgeyByZWNvcmQgfSA9IHJvdXRlO1xyXG4gICAgY29uc3QgZmllbGRzID0gW1xyXG4gICAgICAgIHsgZWRpdGFibGU6IGZhbHNlLCBrZXk6ICdwYXRoJywgdmFsdWU6IHJlY29yZC5wYXRoIH0sXHJcbiAgICBdO1xyXG4gICAgaWYgKHJlY29yZC5uYW1lICE9IG51bGwpXHJcbiAgICAgICAgZmllbGRzLnB1c2goe1xyXG4gICAgICAgICAgICBlZGl0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGtleTogJ25hbWUnLFxyXG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLm5hbWUsXHJcbiAgICAgICAgfSk7XHJcbiAgICBmaWVsZHMucHVzaCh7IGVkaXRhYmxlOiBmYWxzZSwga2V5OiAncmVnZXhwJywgdmFsdWU6IHJvdXRlLnJlIH0pO1xyXG4gICAgaWYgKHJvdXRlLmtleXMubGVuZ3RoKVxyXG4gICAgICAgIGZpZWxkcy5wdXNoKHtcclxuICAgICAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBrZXk6ICdrZXlzJyxcclxuICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIF9jdXN0b206IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHJvdXRlLmtleXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChrZXkgPT4gYCR7a2V5Lm5hbWV9JHttb2RpZmllckZvcktleShrZXkpfWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcgJyksXHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogJ1BhcmFtIGtleXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiByb3V0ZS5rZXlzLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIGlmIChyZWNvcmQucmVkaXJlY3QgIT0gbnVsbClcclxuICAgICAgICBmaWVsZHMucHVzaCh7XHJcbiAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAga2V5OiAncmVkaXJlY3QnLFxyXG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLnJlZGlyZWN0LFxyXG4gICAgICAgIH0pO1xyXG4gICAgaWYgKHJvdXRlLmFsaWFzLmxlbmd0aClcclxuICAgICAgICBmaWVsZHMucHVzaCh7XHJcbiAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAga2V5OiAnYWxpYXNlcycsXHJcbiAgICAgICAgICAgIHZhbHVlOiByb3V0ZS5hbGlhcy5tYXAoYWxpYXMgPT4gYWxpYXMucmVjb3JkLnBhdGgpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgZmllbGRzLnB1c2goe1xyXG4gICAgICAgIGtleTogJ3Njb3JlJyxcclxuICAgICAgICBlZGl0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgX2N1c3RvbToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogcm91dGUuc2NvcmUubWFwKHNjb3JlID0+IHNjb3JlLmpvaW4oJywgJykpLmpvaW4oJyB8ICcpLFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDogJ1Njb3JlIHVzZWQgdG8gc29ydCByb3V0ZXMnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHJvdXRlLnNjb3JlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBmaWVsZHM7XHJcbn1cclxuZnVuY3Rpb24gZm9ybWF0Um91dGVSZWNvcmRGb3JJbnNwZWN0b3Iocm91dGUpIHtcclxuICAgIGNvbnN0IHRhZ3MgPSBbXTtcclxuICAgIGNvbnN0IHsgcmVjb3JkIH0gPSByb3V0ZTtcclxuICAgIGlmIChyZWNvcmQubmFtZSAhPSBudWxsKSB7XHJcbiAgICAgICAgdGFncy5wdXNoKHtcclxuICAgICAgICAgICAgbGFiZWw6IFN0cmluZyhyZWNvcmQubmFtZSksXHJcbiAgICAgICAgICAgIHRleHRDb2xvcjogMCxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAweDAwYmNkNCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChyZWNvcmQuYWxpYXNPZikge1xyXG4gICAgICAgIHRhZ3MucHVzaCh7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnYWxpYXMnLFxyXG4gICAgICAgICAgICB0ZXh0Q29sb3I6IDAsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogMHhmZjk4NGYsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAocm91dGUuX192ZF9tYXRjaCkge1xyXG4gICAgICAgIHRhZ3MucHVzaCh7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnbWF0Y2hlcycsXHJcbiAgICAgICAgICAgIHRleHRDb2xvcjogMCxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAweGY0ZjRmNCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChyZWNvcmQucmVkaXJlY3QpIHtcclxuICAgICAgICB0YWdzLnB1c2goe1xyXG4gICAgICAgICAgICBsYWJlbDogJ3JlZGlyZWN0OiAnICtcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgcmVjb3JkLnJlZGlyZWN0ID09PSAnc3RyaW5nJyA/IHJlY29yZC5yZWRpcmVjdCA6ICdPYmplY3QnKSxcclxuICAgICAgICAgICAgdGV4dENvbG9yOiAweGZmZmZmZixcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAweDY2NjY2NixcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaWQ6IHJlY29yZC5wYXRoLFxyXG4gICAgICAgIGxhYmVsOiByZWNvcmQucGF0aCxcclxuICAgICAgICB0YWdzLFxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBjaGlsZHJlbjogcm91dGUuY2hpbGRyZW4ubWFwKGZvcm1hdFJvdXRlUmVjb3JkRm9ySW5zcGVjdG9yKSxcclxuICAgIH07XHJcbn1cclxuY29uc3QgRVhUUkFDVF9SRUdFWFBfUkUgPSAvXlxcLyguKilcXC8oW2Etel0qKSQvO1xyXG5mdW5jdGlvbiBpc1JvdXRlTWF0Y2hpbmcocm91dGUsIGZpbHRlcikge1xyXG4gICAgY29uc3QgZm91bmQgPSBTdHJpbmcocm91dGUucmUpLm1hdGNoKEVYVFJBQ1RfUkVHRVhQX1JFKTtcclxuICAgIHJvdXRlLl9fdmRfbWF0Y2ggPSBmYWxzZTtcclxuICAgIGlmICghZm91bmQgfHwgZm91bmQubGVuZ3RoIDwgMylcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAvLyB1c2UgYSByZWdleHAgd2l0aG91dCAkIGF0IHRoZSBlbmQgdG8gbWF0Y2ggbmVzdGVkIHJvdXRlcyBiZXR0ZXJcclxuICAgIGNvbnN0IG5vbkVuZGluZ1JFID0gbmV3IFJlZ0V4cChmb3VuZFsxXS5yZXBsYWNlKC9cXCQkLywgJycpLCBmb3VuZFsyXSk7XHJcbiAgICBpZiAobm9uRW5kaW5nUkUudGVzdChmaWx0ZXIpKSB7XHJcbiAgICAgICAgLy8gbWFyayBjaGlsZHJlbiBhcyBtYXRjaGVzXHJcbiAgICAgICAgcm91dGUuY2hpbGRyZW4uc29tZShjaGlsZCA9PiBpc1JvdXRlTWF0Y2hpbmcoY2hpbGQsIGZpbHRlcikpO1xyXG4gICAgICAgIC8vIGV4Y2VwdGlvbiBjYXNlOiBgL2BcclxuICAgICAgICBpZiAocm91dGUucmVjb3JkLnBhdGggIT09ICcvJyB8fCBmaWx0ZXIgPT09ICcvJykge1xyXG4gICAgICAgICAgICByb3V0ZS5fX3ZkX21hdGNoID0gcm91dGUucmUudGVzdChmaWx0ZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaGlkZSB0aGUgLyByb3V0ZVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBhdGggPSByb3V0ZS5yZWNvcmQucGF0aC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgY29uc3QgZGVjb2RlZFBhdGggPSBkZWNvZGUocGF0aCk7XHJcbiAgICAvLyBhbHNvIGFsbG93IHBhcnRpYWwgbWF0Y2hpbmcgb24gdGhlIHBhdGhcclxuICAgIGlmICghZmlsdGVyLnN0YXJ0c1dpdGgoJy8nKSAmJlxyXG4gICAgICAgIChkZWNvZGVkUGF0aC5pbmNsdWRlcyhmaWx0ZXIpIHx8IHBhdGguaW5jbHVkZXMoZmlsdGVyKSkpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICBpZiAoZGVjb2RlZFBhdGguc3RhcnRzV2l0aChmaWx0ZXIpIHx8IHBhdGguc3RhcnRzV2l0aChmaWx0ZXIpKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgaWYgKHJvdXRlLnJlY29yZC5uYW1lICYmIFN0cmluZyhyb3V0ZS5yZWNvcmQubmFtZSkuaW5jbHVkZXMoZmlsdGVyKSlcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiByb3V0ZS5jaGlsZHJlbi5zb21lKGNoaWxkID0+IGlzUm91dGVNYXRjaGluZyhjaGlsZCwgZmlsdGVyKSk7XHJcbn1cblxuLyoqXHJcbiAqIENyZWF0ZXMgYSBSb3V0ZXIgaW5zdGFuY2UgdGhhdCBjYW4gYmUgdXNlZCBieSBhIFZ1ZSBhcHAuXHJcbiAqXHJcbiAqIEBwYXJhbSBvcHRpb25zIC0ge0BsaW5rIFJvdXRlck9wdGlvbnN9XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXIob3B0aW9ucykge1xyXG4gICAgY29uc3QgbWF0Y2hlciA9IGNyZWF0ZVJvdXRlck1hdGNoZXIob3B0aW9ucy5yb3V0ZXMsIG9wdGlvbnMpO1xyXG4gICAgbGV0IHBhcnNlUXVlcnkkMSA9IG9wdGlvbnMucGFyc2VRdWVyeSB8fCBwYXJzZVF1ZXJ5O1xyXG4gICAgbGV0IHN0cmluZ2lmeVF1ZXJ5JDEgPSBvcHRpb25zLnN0cmluZ2lmeVF1ZXJ5IHx8IHN0cmluZ2lmeVF1ZXJ5O1xyXG4gICAgbGV0IHsgc2Nyb2xsQmVoYXZpb3IgfSA9IG9wdGlvbnM7XHJcbiAgICBsZXQgcm91dGVySGlzdG9yeSA9IG9wdGlvbnMuaGlzdG9yeTtcclxuICAgIGNvbnN0IGJlZm9yZUd1YXJkcyA9IHVzZUNhbGxiYWNrcygpO1xyXG4gICAgY29uc3QgYmVmb3JlUmVzb2x2ZUd1YXJkcyA9IHVzZUNhbGxiYWNrcygpO1xyXG4gICAgY29uc3QgYWZ0ZXJHdWFyZHMgPSB1c2VDYWxsYmFja3MoKTtcclxuICAgIGNvbnN0IGN1cnJlbnRSb3V0ZSA9IHNoYWxsb3dSZWYoU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCk7XHJcbiAgICBsZXQgcGVuZGluZ0xvY2F0aW9uID0gU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRDtcclxuICAgIC8vIGxlYXZlIHRoZSBzY3JvbGxSZXN0b3JhdGlvbiBpZiBubyBzY3JvbGxCZWhhdmlvciBpcyBwcm92aWRlZFxyXG4gICAgaWYgKGlzQnJvd3NlciAmJiBzY3JvbGxCZWhhdmlvciAmJiAnc2Nyb2xsUmVzdG9yYXRpb24nIGluIGhpc3RvcnkpIHtcclxuICAgICAgICBoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gJ21hbnVhbCc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBub3JtYWxpemVQYXJhbXMgPSBhcHBseVRvUGFyYW1zLmJpbmQobnVsbCwgcGFyYW1WYWx1ZSA9PiAnJyArIHBhcmFtVmFsdWUpO1xyXG4gICAgY29uc3QgZW5jb2RlUGFyYW1zID0gYXBwbHlUb1BhcmFtcy5iaW5kKG51bGwsIGVuY29kZVBhcmFtKTtcclxuICAgIGNvbnN0IGRlY29kZVBhcmFtcyA9IGFwcGx5VG9QYXJhbXMuYmluZChudWxsLCBkZWNvZGUpO1xyXG4gICAgZnVuY3Rpb24gYWRkUm91dGUocGFyZW50T3JSb3V0ZSwgcm91dGUpIHtcclxuICAgICAgICBsZXQgcGFyZW50O1xyXG4gICAgICAgIGxldCByZWNvcmQ7XHJcbiAgICAgICAgaWYgKGlzUm91dGVOYW1lKHBhcmVudE9yUm91dGUpKSB7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IG1hdGNoZXIuZ2V0UmVjb3JkTWF0Y2hlcihwYXJlbnRPclJvdXRlKTtcclxuICAgICAgICAgICAgcmVjb3JkID0gcm91dGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZWNvcmQgPSBwYXJlbnRPclJvdXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWF0Y2hlci5hZGRSb3V0ZShyZWNvcmQsIHBhcmVudCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVSb3V0ZShuYW1lKSB7XHJcbiAgICAgICAgbGV0IHJlY29yZE1hdGNoZXIgPSBtYXRjaGVyLmdldFJlY29yZE1hdGNoZXIobmFtZSk7XHJcbiAgICAgICAgaWYgKHJlY29yZE1hdGNoZXIpIHtcclxuICAgICAgICAgICAgbWF0Y2hlci5yZW1vdmVSb3V0ZShyZWNvcmRNYXRjaGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYENhbm5vdCByZW1vdmUgbm9uLWV4aXN0ZW50IHJvdXRlIFwiJHtTdHJpbmcobmFtZSl9XCJgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnZXRSb3V0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIuZ2V0Um91dGVzKCkubWFwKHJvdXRlTWF0Y2hlciA9PiByb3V0ZU1hdGNoZXIucmVjb3JkKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGhhc1JvdXRlKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gISFtYXRjaGVyLmdldFJlY29yZE1hdGNoZXIobmFtZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXNvbHZlKHJhd0xvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24pIHtcclxuICAgICAgICAvLyBjb25zdCBvYmplY3RMb2NhdGlvbiA9IHJvdXRlckxvY2F0aW9uQXNPYmplY3QocmF3TG9jYXRpb24pXHJcbiAgICAgICAgLy8gd2UgY3JlYXRlIGEgY29weSB0byBtb2RpZnkgaXQgbGF0ZXJcclxuICAgICAgICBjdXJyZW50TG9jYXRpb24gPSBhc3NpZ24oe30sIGN1cnJlbnRMb2NhdGlvbiB8fCBjdXJyZW50Um91dGUudmFsdWUpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmF3TG9jYXRpb24gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGxldCBsb2NhdGlvbk5vcm1hbGl6ZWQgPSBwYXJzZVVSTChwYXJzZVF1ZXJ5JDEsIHJhd0xvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24ucGF0aCk7XHJcbiAgICAgICAgICAgIGxldCBtYXRjaGVkUm91dGUgPSBtYXRjaGVyLnJlc29sdmUoeyBwYXRoOiBsb2NhdGlvbk5vcm1hbGl6ZWQucGF0aCB9LCBjdXJyZW50TG9jYXRpb24pO1xyXG4gICAgICAgICAgICBsZXQgaHJlZiA9IHJvdXRlckhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbk5vcm1hbGl6ZWQuZnVsbFBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaHJlZi5zdGFydHNXaXRoKCcvLycpKVxyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYExvY2F0aW9uIFwiJHtyYXdMb2NhdGlvbn1cIiByZXNvbHZlZCB0byBcIiR7aHJlZn1cIi4gQSByZXNvbHZlZCBsb2NhdGlvbiBjYW5ub3Qgc3RhcnQgd2l0aCBtdWx0aXBsZSBzbGFzaGVzLmApO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIW1hdGNoZWRSb3V0ZS5tYXRjaGVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYE5vIG1hdGNoIGZvdW5kIGZvciBsb2NhdGlvbiB3aXRoIHBhdGggXCIke3Jhd0xvY2F0aW9ufVwiYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbG9jYXRpb25Ob3JtYWxpemVkIGlzIGFsd2F5cyBhIG5ldyBvYmplY3RcclxuICAgICAgICAgICAgcmV0dXJuIGFzc2lnbihsb2NhdGlvbk5vcm1hbGl6ZWQsIG1hdGNoZWRSb3V0ZSwge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBkZWNvZGVQYXJhbXMobWF0Y2hlZFJvdXRlLnBhcmFtcyksXHJcbiAgICAgICAgICAgICAgICBoYXNoOiBkZWNvZGUobG9jYXRpb25Ob3JtYWxpemVkLmhhc2gpLFxyXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RlZEZyb206IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIGhyZWYsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbWF0Y2hlckxvY2F0aW9uO1xyXG4gICAgICAgIC8vIHBhdGggY291bGQgYmUgcmVsYXRpdmUgaW4gb2JqZWN0IGFzIHdlbGxcclxuICAgICAgICBpZiAoJ3BhdGgnIGluIHJhd0xvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICdwYXJhbXMnIGluIHJhd0xvY2F0aW9uICYmXHJcbiAgICAgICAgICAgICAgICAhKCduYW1lJyBpbiByYXdMb2NhdGlvbikgJiZcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHJhd0xvY2F0aW9uLnBhcmFtcykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBQYXRoIFwiJHtyYXdMb2NhdGlvbi5wYXRofVwiIHdhcyBwYXNzZWQgd2l0aCBwYXJhbXMgYnV0IHRoZXkgd2lsbCBiZSBpZ25vcmVkLiBVc2UgYSBuYW1lZCByb3V0ZSBhbG9uZ3NpZGUgcGFyYW1zIGluc3RlYWQuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWF0Y2hlckxvY2F0aW9uID0gYXNzaWduKHt9LCByYXdMb2NhdGlvbiwge1xyXG4gICAgICAgICAgICAgICAgcGF0aDogcGFyc2VVUkwocGFyc2VRdWVyeSQxLCByYXdMb2NhdGlvbi5wYXRoLCBjdXJyZW50TG9jYXRpb24ucGF0aCkucGF0aCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBwYXNzIGVuY29kZWQgdmFsdWVzIHRvIHRoZSBtYXRjaGVyIHNvIGl0IGNhbiBwcm9kdWNlIGVuY29kZWQgcGF0aCBhbmQgZnVsbFBhdGhcclxuICAgICAgICAgICAgbWF0Y2hlckxvY2F0aW9uID0gYXNzaWduKHt9LCByYXdMb2NhdGlvbiwge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBlbmNvZGVQYXJhbXMocmF3TG9jYXRpb24ucGFyYW1zKSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgbG9jYXRpb24gcGFyYW1zIGFyZSBkZWNvZGVkLCB3ZSBuZWVkIHRvIGVuY29kZSB0aGVtIGluIGNhc2UgdGhlXHJcbiAgICAgICAgICAgIC8vIG1hdGNoZXIgbWVyZ2VzIHRoZSBwYXJhbXNcclxuICAgICAgICAgICAgY3VycmVudExvY2F0aW9uLnBhcmFtcyA9IGVuY29kZVBhcmFtcyhjdXJyZW50TG9jYXRpb24ucGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG1hdGNoZWRSb3V0ZSA9IG1hdGNoZXIucmVzb2x2ZShtYXRjaGVyTG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbik7XHJcbiAgICAgICAgY29uc3QgaGFzaCA9IHJhd0xvY2F0aW9uLmhhc2ggfHwgJyc7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBoYXNoICYmICFoYXNoLnN0YXJ0c1dpdGgoJyMnKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBBIFxcYGhhc2hcXGAgc2hvdWxkIGFsd2F5cyBzdGFydCB3aXRoIHRoZSBjaGFyYWN0ZXIgXCIjXCIuIFJlcGxhY2UgXCIke2hhc2h9XCIgd2l0aCBcIiMke2hhc2h9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGRlY29kaW5nIHRoZW0pIHRoZSBtYXRjaGVyIG1pZ2h0IGhhdmUgbWVyZ2VkIGN1cnJlbnQgbG9jYXRpb24gcGFyYW1zIHNvXHJcbiAgICAgICAgLy8gd2UgbmVlZCB0byBydW4gdGhlIGRlY29kaW5nIGFnYWluXHJcbiAgICAgICAgbWF0Y2hlZFJvdXRlLnBhcmFtcyA9IG5vcm1hbGl6ZVBhcmFtcyhkZWNvZGVQYXJhbXMobWF0Y2hlZFJvdXRlLnBhcmFtcykpO1xyXG4gICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gc3RyaW5naWZ5VVJMKHN0cmluZ2lmeVF1ZXJ5JDEsIGFzc2lnbih7fSwgcmF3TG9jYXRpb24sIHtcclxuICAgICAgICAgICAgaGFzaDogZW5jb2RlSGFzaChoYXNoKSxcclxuICAgICAgICAgICAgcGF0aDogbWF0Y2hlZFJvdXRlLnBhdGgsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIGxldCBocmVmID0gcm91dGVySGlzdG9yeS5jcmVhdGVIcmVmKGZ1bGxQYXRoKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGlmIChocmVmLnN0YXJ0c1dpdGgoJy8vJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYExvY2F0aW9uIFwiJHtyYXdMb2NhdGlvbn1cIiByZXNvbHZlZCB0byBcIiR7aHJlZn1cIi4gQSByZXNvbHZlZCBsb2NhdGlvbiBjYW5ub3Qgc3RhcnQgd2l0aCBtdWx0aXBsZSBzbGFzaGVzLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFtYXRjaGVkUm91dGUubWF0Y2hlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYE5vIG1hdGNoIGZvdW5kIGZvciBsb2NhdGlvbiB3aXRoIHBhdGggXCIkeydwYXRoJyBpbiByYXdMb2NhdGlvbiA/IHJhd0xvY2F0aW9uLnBhdGggOiByYXdMb2NhdGlvbn1cImApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhc3NpZ24oe1xyXG4gICAgICAgICAgICBmdWxsUGF0aCxcclxuICAgICAgICAgICAgLy8ga2VlcCB0aGUgaGFzaCBlbmNvZGVkIHNvIGZ1bGxQYXRoIGlzIGVmZmVjdGl2ZWx5IHBhdGggKyBlbmNvZGVkUXVlcnkgK1xyXG4gICAgICAgICAgICAvLyBoYXNoXHJcbiAgICAgICAgICAgIGhhc2gsXHJcbiAgICAgICAgICAgIHF1ZXJ5OiBcclxuICAgICAgICAgICAgLy8gaWYgdGhlIHVzZXIgaXMgdXNpbmcgYSBjdXN0b20gcXVlcnkgbGliIGxpa2UgcXMsIHdlIG1pZ2h0IGhhdmVcclxuICAgICAgICAgICAgLy8gbmVzdGVkIG9iamVjdHMsIHNvIHdlIGtlZXAgdGhlIHF1ZXJ5IGFzIGlzLCBtZWFuaW5nIGl0IGNhbiBjb250YWluXHJcbiAgICAgICAgICAgIC8vIG51bWJlcnMgYXQgYCRyb3V0ZS5xdWVyeWAsIGJ1dCBhdCB0aGUgcG9pbnQsIHRoZSB1c2VyIHdpbGwgaGF2ZSB0b1xyXG4gICAgICAgICAgICAvLyB1c2UgdGhlaXIgb3duIHR5cGUgYW55d2F5LlxyXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci1uZXh0L2lzc3Vlcy8zMjgjaXNzdWVjb21tZW50LTY0OTQ4MTU2N1xyXG4gICAgICAgICAgICBzdHJpbmdpZnlRdWVyeSQxID09PSBzdHJpbmdpZnlRdWVyeVxyXG4gICAgICAgICAgICAgICAgPyBub3JtYWxpemVRdWVyeShyYXdMb2NhdGlvbi5xdWVyeSlcclxuICAgICAgICAgICAgICAgIDogcmF3TG9jYXRpb24ucXVlcnksXHJcbiAgICAgICAgfSwgbWF0Y2hlZFJvdXRlLCB7XHJcbiAgICAgICAgICAgIHJlZGlyZWN0ZWRGcm9tOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIGhyZWYsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBsb2NhdGlvbkFzT2JqZWN0KHRvKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB7IHBhdGg6IHRvIH0gOiBhc3NpZ24oe30sIHRvKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uKHRvLCBmcm9tKSB7XHJcbiAgICAgICAgaWYgKHBlbmRpbmdMb2NhdGlvbiAhPT0gdG8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJvdXRlckVycm9yKDggLyogTkFWSUdBVElPTl9DQU5DRUxMRUQgKi8sIHtcclxuICAgICAgICAgICAgICAgIGZyb20sXHJcbiAgICAgICAgICAgICAgICB0byxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcHVzaCh0bykge1xyXG4gICAgICAgIHJldHVybiBwdXNoV2l0aFJlZGlyZWN0KHRvKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlcGxhY2UodG8pIHtcclxuICAgICAgICByZXR1cm4gcHVzaChhc3NpZ24obG9jYXRpb25Bc09iamVjdCh0byksIHsgcmVwbGFjZTogdHJ1ZSB9KSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBoYW5kbGVSZWRpcmVjdFJlY29yZCh0bykge1xyXG4gICAgICAgIGNvbnN0IGxhc3RNYXRjaGVkID0gdG8ubWF0Y2hlZFt0by5tYXRjaGVkLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIGlmIChsYXN0TWF0Y2hlZCAmJiBsYXN0TWF0Y2hlZC5yZWRpcmVjdCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHJlZGlyZWN0IH0gPSBsYXN0TWF0Y2hlZDtcclxuICAgICAgICAgICAgLy8gdHJhbnNmb3JtIGl0IGludG8gYW4gb2JqZWN0IHRvIHBhc3MgdGhlIG9yaWdpbmFsIFJvdXRlTG9jYWxlT3B0aW9uc1xyXG4gICAgICAgICAgICBsZXQgbmV3VGFyZ2V0TG9jYXRpb24gPSBsb2NhdGlvbkFzT2JqZWN0KHR5cGVvZiByZWRpcmVjdCA9PT0gJ2Z1bmN0aW9uJyA/IHJlZGlyZWN0KHRvKSA6IHJlZGlyZWN0KTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgISgncGF0aCcgaW4gbmV3VGFyZ2V0TG9jYXRpb24pICYmXHJcbiAgICAgICAgICAgICAgICAhKCduYW1lJyBpbiBuZXdUYXJnZXRMb2NhdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYEludmFsaWQgcmVkaXJlY3QgZm91bmQ6XFxuJHtKU09OLnN0cmluZ2lmeShuZXdUYXJnZXRMb2NhdGlvbiwgbnVsbCwgMil9XFxuIHdoZW4gbmF2aWdhdGluZyB0byBcIiR7dG8uZnVsbFBhdGh9XCIuIEEgcmVkaXJlY3QgbXVzdCBjb250YWluIGEgbmFtZSBvciBwYXRoLiBUaGlzIHdpbGwgYnJlYWsgaW4gcHJvZHVjdGlvbi5gKTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCByZWRpcmVjdCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHRvLnF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgaGFzaDogdG8uaGFzaCxcclxuICAgICAgICAgICAgICAgIHBhcmFtczogdG8ucGFyYW1zLFxyXG4gICAgICAgICAgICB9LCBuZXdUYXJnZXRMb2NhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcHVzaFdpdGhSZWRpcmVjdCh0bywgcmVkaXJlY3RlZEZyb20pIHtcclxuICAgICAgICBjb25zdCB0YXJnZXRMb2NhdGlvbiA9IChwZW5kaW5nTG9jYXRpb24gPSByZXNvbHZlKHRvKSk7XHJcbiAgICAgICAgY29uc3QgZnJvbSA9IGN1cnJlbnRSb3V0ZS52YWx1ZTtcclxuICAgICAgICBjb25zdCBkYXRhID0gdG8uc3RhdGU7XHJcbiAgICAgICAgY29uc3QgZm9yY2UgPSB0by5mb3JjZTtcclxuICAgICAgICAvLyB0byBjb3VsZCBiZSBhIHN0cmluZyB3aGVyZSBgcmVwbGFjZWAgaXMgYSBmdW5jdGlvblxyXG4gICAgICAgIGNvbnN0IHJlcGxhY2UgPSB0by5yZXBsYWNlID09PSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IHNob3VsZFJlZGlyZWN0ID0gaGFuZGxlUmVkaXJlY3RSZWNvcmQodGFyZ2V0TG9jYXRpb24pO1xyXG4gICAgICAgIGlmIChzaG91bGRSZWRpcmVjdClcclxuICAgICAgICAgICAgcmV0dXJuIHB1c2hXaXRoUmVkaXJlY3QoYXNzaWduKHNob3VsZFJlZGlyZWN0LCB7IHN0YXRlOiBkYXRhLCBmb3JjZSwgcmVwbGFjZSB9KSwgXHJcbiAgICAgICAgICAgIC8vIGtlZXAgb3JpZ2luYWwgcmVkaXJlY3RlZEZyb20gaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgICAgIHJlZGlyZWN0ZWRGcm9tIHx8IHRhcmdldExvY2F0aW9uKTtcclxuICAgICAgICAvLyBpZiBpdCB3YXMgYSByZWRpcmVjdCB3ZSBhbHJlYWR5IGNhbGxlZCBgcHVzaFdpdGhSZWRpcmVjdGAgYWJvdmVcclxuICAgICAgICBjb25zdCB0b0xvY2F0aW9uID0gdGFyZ2V0TG9jYXRpb247XHJcbiAgICAgICAgdG9Mb2NhdGlvbi5yZWRpcmVjdGVkRnJvbSA9IHJlZGlyZWN0ZWRGcm9tO1xyXG4gICAgICAgIGxldCBmYWlsdXJlO1xyXG4gICAgICAgIGlmICghZm9yY2UgJiYgaXNTYW1lUm91dGVMb2NhdGlvbihzdHJpbmdpZnlRdWVyeSQxLCBmcm9tLCB0YXJnZXRMb2NhdGlvbikpIHtcclxuICAgICAgICAgICAgZmFpbHVyZSA9IGNyZWF0ZVJvdXRlckVycm9yKDE2IC8qIE5BVklHQVRJT05fRFVQTElDQVRFRCAqLywgeyB0bzogdG9Mb2NhdGlvbiwgZnJvbSB9KTtcclxuICAgICAgICAgICAgLy8gdHJpZ2dlciBzY3JvbGwgdG8gYWxsb3cgc2Nyb2xsaW5nIHRvIHRoZSBzYW1lIGFuY2hvclxyXG4gICAgICAgICAgICBoYW5kbGVTY3JvbGwoZnJvbSwgZnJvbSwgXHJcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgYSBwdXNoLCB0aGUgb25seSB3YXkgZm9yIGl0IHRvIGJlIHRyaWdnZXJlZCBmcm9tIGFcclxuICAgICAgICAgICAgLy8gaGlzdG9yeS5saXN0ZW4gaXMgd2l0aCBhIHJlZGlyZWN0LCB3aGljaCBtYWtlcyBpdCBiZWNvbWUgYSBwdXNoXHJcbiAgICAgICAgICAgIHRydWUsIFxyXG4gICAgICAgICAgICAvLyBUaGlzIGNhbm5vdCBiZSB0aGUgZmlyc3QgbmF2aWdhdGlvbiBiZWNhdXNlIHRoZSBpbml0aWFsIGxvY2F0aW9uXHJcbiAgICAgICAgICAgIC8vIGNhbm5vdCBiZSBtYW51YWxseSBuYXZpZ2F0ZWQgdG9cclxuICAgICAgICAgICAgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKGZhaWx1cmUgPyBQcm9taXNlLnJlc29sdmUoZmFpbHVyZSkgOiBuYXZpZ2F0ZSh0b0xvY2F0aW9uLCBmcm9tKSlcclxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnJvcilcclxuICAgICAgICAgICAgPyBlcnJvclxyXG4gICAgICAgICAgICA6IC8vIHJlamVjdCBhbnkgdW5rbm93biBlcnJvclxyXG4gICAgICAgICAgICAgICAgdHJpZ2dlckVycm9yKGVycm9yKSlcclxuICAgICAgICAgICAgLnRoZW4oKGZhaWx1cmUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGZhaWx1cmUsIDIgLyogTkFWSUdBVElPTl9HVUFSRF9SRURJUkVDVCAqLykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSByZWRpcmVjdGluZyB0byB0aGUgc2FtZSBsb2NhdGlvbiB3ZSB3ZXJlIGFscmVhZHkgYXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTYW1lUm91dGVMb2NhdGlvbihzdHJpbmdpZnlRdWVyeSQxLCByZXNvbHZlKGZhaWx1cmUudG8pLCB0b0xvY2F0aW9uKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgd2UgaGF2ZSBkb25lIGl0IGEgY291cGxlIG9mIHRpbWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0ZWRGcm9tICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHJlZGlyZWN0ZWRGcm9tLl9jb3VudCA9IHJlZGlyZWN0ZWRGcm9tLl9jb3VudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RlZEZyb20uX2NvdW50ICsgMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxKSA+IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYERldGVjdGVkIGFuIGluZmluaXRlIHJlZGlyZWN0aW9uIGluIGEgbmF2aWdhdGlvbiBndWFyZCB3aGVuIGdvaW5nIGZyb20gXCIke2Zyb20uZnVsbFBhdGh9XCIgdG8gXCIke3RvTG9jYXRpb24uZnVsbFBhdGh9XCIuIEFib3J0aW5nIHRvIGF2b2lkIGEgU3RhY2sgT3ZlcmZsb3cuIFRoaXMgd2lsbCBicmVhayBpbiBwcm9kdWN0aW9uIGlmIG5vdCBmaXhlZC5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignSW5maW5pdGUgcmVkaXJlY3QgaW4gbmF2aWdhdGlvbiBndWFyZCcpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHB1c2hXaXRoUmVkaXJlY3QoXHJcbiAgICAgICAgICAgICAgICAgICAgLy8ga2VlcCBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduKGxvY2F0aW9uQXNPYmplY3QoZmFpbHVyZS50byksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLCBcclxuICAgICAgICAgICAgICAgICAgICAvLyBwcmVzZXJ2ZSB0aGUgb3JpZ2luYWwgcmVkaXJlY3RlZEZyb20gaWYgYW55XHJcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RlZEZyb20gfHwgdG9Mb2NhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBmYWlsIHdlIGRvbid0IGZpbmFsaXplIHRoZSBuYXZpZ2F0aW9uXHJcbiAgICAgICAgICAgICAgICBmYWlsdXJlID0gZmluYWxpemVOYXZpZ2F0aW9uKHRvTG9jYXRpb24sIGZyb20sIHRydWUsIHJlcGxhY2UsIGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyaWdnZXJBZnRlckVhY2godG9Mb2NhdGlvbiwgZnJvbSwgZmFpbHVyZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgdG8gcmVqZWN0IGFuZCBza2lwIGFsbCBuYXZpZ2F0aW9uIGd1YXJkcyBpZiBhIG5ldyBuYXZpZ2F0aW9uIGhhcHBlbmVkXHJcbiAgICAgKiBAcGFyYW0gdG9cclxuICAgICAqIEBwYXJhbSBmcm9tXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uQW5kUmVqZWN0KHRvLCBmcm9tKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBjaGVja0NhbmNlbGVkTmF2aWdhdGlvbih0bywgZnJvbSk7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yID8gUHJvbWlzZS5yZWplY3QoZXJyb3IpIDogUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICAvLyBUT0RPOiByZWZhY3RvciB0aGUgd2hvbGUgYmVmb3JlIGd1YXJkcyBieSBpbnRlcm5hbGx5IHVzaW5nIHJvdXRlci5iZWZvcmVFYWNoXHJcbiAgICBmdW5jdGlvbiBuYXZpZ2F0ZSh0bywgZnJvbSkge1xyXG4gICAgICAgIGxldCBndWFyZHM7XHJcbiAgICAgICAgY29uc3QgW2xlYXZpbmdSZWNvcmRzLCB1cGRhdGluZ1JlY29yZHMsIGVudGVyaW5nUmVjb3JkcyxdID0gZXh0cmFjdENoYW5naW5nUmVjb3Jkcyh0bywgZnJvbSk7XHJcbiAgICAgICAgLy8gYWxsIGNvbXBvbmVudHMgaGVyZSBoYXZlIGJlZW4gcmVzb2x2ZWQgb25jZSBiZWNhdXNlIHdlIGFyZSBsZWF2aW5nXHJcbiAgICAgICAgZ3VhcmRzID0gZXh0cmFjdENvbXBvbmVudHNHdWFyZHMobGVhdmluZ1JlY29yZHMucmV2ZXJzZSgpLCAnYmVmb3JlUm91dGVMZWF2ZScsIHRvLCBmcm9tKTtcclxuICAgICAgICAvLyBsZWF2aW5nUmVjb3JkcyBpcyBhbHJlYWR5IHJldmVyc2VkXHJcbiAgICAgICAgZm9yIChjb25zdCByZWNvcmQgb2YgbGVhdmluZ1JlY29yZHMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBndWFyZCBvZiByZWNvcmQubGVhdmVHdWFyZHMpIHtcclxuICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkVG9Qcm9taXNlRm4oZ3VhcmQsIHRvLCBmcm9tKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY2FuY2VsZWROYXZpZ2F0aW9uQ2hlY2sgPSBjaGVja0NhbmNlbGVkTmF2aWdhdGlvbkFuZFJlamVjdC5iaW5kKG51bGwsIHRvLCBmcm9tKTtcclxuICAgICAgICBndWFyZHMucHVzaChjYW5jZWxlZE5hdmlnYXRpb25DaGVjayk7XHJcbiAgICAgICAgLy8gcnVuIHRoZSBxdWV1ZSBvZiBwZXIgcm91dGUgYmVmb3JlUm91dGVMZWF2ZSBndWFyZHNcclxuICAgICAgICByZXR1cm4gKHJ1bkd1YXJkUXVldWUoZ3VhcmRzKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGdsb2JhbCBndWFyZHMgYmVmb3JlRWFjaFxyXG4gICAgICAgICAgICBndWFyZHMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBndWFyZCBvZiBiZWZvcmVHdWFyZHMubGlzdCgpKSB7XHJcbiAgICAgICAgICAgICAgICBndWFyZHMucHVzaChndWFyZFRvUHJvbWlzZUZuKGd1YXJkLCB0bywgZnJvbSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGd1YXJkcy5wdXNoKGNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJ1bkd1YXJkUXVldWUoZ3VhcmRzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGluIGNvbXBvbmVudHMgYmVmb3JlUm91dGVVcGRhdGVcclxuICAgICAgICAgICAgZ3VhcmRzID0gZXh0cmFjdENvbXBvbmVudHNHdWFyZHModXBkYXRpbmdSZWNvcmRzLCAnYmVmb3JlUm91dGVVcGRhdGUnLCB0bywgZnJvbSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIHVwZGF0aW5nUmVjb3Jkcykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBndWFyZCBvZiByZWNvcmQudXBkYXRlR3VhcmRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3VhcmRzLnB1c2goZ3VhcmRUb1Byb21pc2VGbihndWFyZCwgdG8sIGZyb20pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBndWFyZHMucHVzaChjYW5jZWxlZE5hdmlnYXRpb25DaGVjayk7XHJcbiAgICAgICAgICAgIC8vIHJ1biB0aGUgcXVldWUgb2YgcGVyIHJvdXRlIGJlZm9yZUVudGVyIGd1YXJkc1xyXG4gICAgICAgICAgICByZXR1cm4gcnVuR3VhcmRRdWV1ZShndWFyZHMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgdGhlIHJvdXRlIGJlZm9yZUVudGVyXHJcbiAgICAgICAgICAgIGd1YXJkcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiB0by5tYXRjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBkbyBub3QgdHJpZ2dlciBiZWZvcmVFbnRlciBvbiByZXVzZWQgdmlld3NcclxuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQuYmVmb3JlRW50ZXIgJiYgZnJvbS5tYXRjaGVkLmluZGV4T2YocmVjb3JkKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWNvcmQuYmVmb3JlRW50ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYmVmb3JlRW50ZXIgb2YgcmVjb3JkLmJlZm9yZUVudGVyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3VhcmRzLnB1c2goZ3VhcmRUb1Byb21pc2VGbihiZWZvcmVFbnRlciwgdG8sIGZyb20pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkVG9Qcm9taXNlRm4ocmVjb3JkLmJlZm9yZUVudGVyLCB0bywgZnJvbSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBndWFyZHMucHVzaChjYW5jZWxlZE5hdmlnYXRpb25DaGVjayk7XHJcbiAgICAgICAgICAgIC8vIHJ1biB0aGUgcXVldWUgb2YgcGVyIHJvdXRlIGJlZm9yZUVudGVyIGd1YXJkc1xyXG4gICAgICAgICAgICByZXR1cm4gcnVuR3VhcmRRdWV1ZShndWFyZHMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gTk9URTogYXQgdGhpcyBwb2ludCB0by5tYXRjaGVkIGlzIG5vcm1hbGl6ZWQgYW5kIGRvZXMgbm90IGNvbnRhaW4gYW55ICgpID0+IFByb21pc2U8Q29tcG9uZW50PlxyXG4gICAgICAgICAgICAvLyBjbGVhciBleGlzdGluZyBlbnRlckNhbGxiYWNrcywgdGhlc2UgYXJlIGFkZGVkIGJ5IGV4dHJhY3RDb21wb25lbnRzR3VhcmRzXHJcbiAgICAgICAgICAgIHRvLm1hdGNoZWQuZm9yRWFjaChyZWNvcmQgPT4gKHJlY29yZC5lbnRlckNhbGxiYWNrcyA9IHt9KSk7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGluLWNvbXBvbmVudCBiZWZvcmVSb3V0ZUVudGVyXHJcbiAgICAgICAgICAgIGd1YXJkcyA9IGV4dHJhY3RDb21wb25lbnRzR3VhcmRzKGVudGVyaW5nUmVjb3JkcywgJ2JlZm9yZVJvdXRlRW50ZXInLCB0bywgZnJvbSk7XHJcbiAgICAgICAgICAgIGd1YXJkcy5wdXNoKGNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrKTtcclxuICAgICAgICAgICAgLy8gcnVuIHRoZSBxdWV1ZSBvZiBwZXIgcm91dGUgYmVmb3JlRW50ZXIgZ3VhcmRzXHJcbiAgICAgICAgICAgIHJldHVybiBydW5HdWFyZFF1ZXVlKGd1YXJkcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBnbG9iYWwgZ3VhcmRzIGJlZm9yZVJlc29sdmVcclxuICAgICAgICAgICAgZ3VhcmRzID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZ3VhcmQgb2YgYmVmb3JlUmVzb2x2ZUd1YXJkcy5saXN0KCkpIHtcclxuICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkVG9Qcm9taXNlRm4oZ3VhcmQsIHRvLCBmcm9tKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3VhcmRzLnB1c2goY2FuY2VsZWROYXZpZ2F0aW9uQ2hlY2spO1xyXG4gICAgICAgICAgICByZXR1cm4gcnVuR3VhcmRRdWV1ZShndWFyZHMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC8vIGNhdGNoIGFueSBuYXZpZ2F0aW9uIGNhbmNlbGVkXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnIsIDggLyogTkFWSUdBVElPTl9DQU5DRUxMRUQgKi8pXHJcbiAgICAgICAgICAgID8gZXJyXHJcbiAgICAgICAgICAgIDogUHJvbWlzZS5yZWplY3QoZXJyKSkpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdHJpZ2dlckFmdGVyRWFjaCh0bywgZnJvbSwgZmFpbHVyZSkge1xyXG4gICAgICAgIC8vIG5hdmlnYXRpb24gaXMgY29uZmlybWVkLCBjYWxsIGFmdGVyR3VhcmRzXHJcbiAgICAgICAgLy8gVE9ETzogd3JhcCB3aXRoIGVycm9yIGhhbmRsZXJzXHJcbiAgICAgICAgZm9yIChjb25zdCBndWFyZCBvZiBhZnRlckd1YXJkcy5saXN0KCkpXHJcbiAgICAgICAgICAgIGd1YXJkKHRvLCBmcm9tLCBmYWlsdXJlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogLSBDbGVhbnMgdXAgYW55IG5hdmlnYXRpb24gZ3VhcmRzXHJcbiAgICAgKiAtIENoYW5nZXMgdGhlIHVybCBpZiBuZWNlc3NhcnlcclxuICAgICAqIC0gQ2FsbHMgdGhlIHNjcm9sbEJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGZpbmFsaXplTmF2aWdhdGlvbih0b0xvY2F0aW9uLCBmcm9tLCBpc1B1c2gsIHJlcGxhY2UsIGRhdGEpIHtcclxuICAgICAgICAvLyBhIG1vcmUgcmVjZW50IG5hdmlnYXRpb24gdG9vayBwbGFjZVxyXG4gICAgICAgIGNvbnN0IGVycm9yID0gY2hlY2tDYW5jZWxlZE5hdmlnYXRpb24odG9Mb2NhdGlvbiwgZnJvbSk7XHJcbiAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgLy8gb25seSBjb25zaWRlciBhcyBwdXNoIGlmIGl0J3Mgbm90IHRoZSBmaXJzdCBuYXZpZ2F0aW9uXHJcbiAgICAgICAgY29uc3QgaXNGaXJzdE5hdmlnYXRpb24gPSBmcm9tID09PSBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gIWlzQnJvd3NlciA/IHt9IDogaGlzdG9yeS5zdGF0ZTtcclxuICAgICAgICAvLyBjaGFuZ2UgVVJMIG9ubHkgaWYgdGhlIHVzZXIgZGlkIGEgcHVzaC9yZXBsYWNlIGFuZCBpZiBpdCdzIG5vdCB0aGUgaW5pdGlhbCBuYXZpZ2F0aW9uIGJlY2F1c2VcclxuICAgICAgICAvLyBpdCdzIGp1c3QgcmVmbGVjdGluZyB0aGUgdXJsXHJcbiAgICAgICAgaWYgKGlzUHVzaCkge1xyXG4gICAgICAgICAgICAvLyBvbiB0aGUgaW5pdGlhbCBuYXZpZ2F0aW9uLCB3ZSB3YW50IHRvIHJldXNlIHRoZSBzY3JvbGwgcG9zaXRpb24gZnJvbVxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YXRlIGlmIGl0IGV4aXN0c1xyXG4gICAgICAgICAgICBpZiAocmVwbGFjZSB8fCBpc0ZpcnN0TmF2aWdhdGlvbilcclxuICAgICAgICAgICAgICAgIHJvdXRlckhpc3RvcnkucmVwbGFjZSh0b0xvY2F0aW9uLmZ1bGxQYXRoLCBhc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogaXNGaXJzdE5hdmlnYXRpb24gJiYgc3RhdGUgJiYgc3RhdGUuc2Nyb2xsLFxyXG4gICAgICAgICAgICAgICAgfSwgZGF0YSkpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByb3V0ZXJIaXN0b3J5LnB1c2godG9Mb2NhdGlvbi5mdWxsUGF0aCwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFjY2VwdCBjdXJyZW50IG5hdmlnYXRpb25cclxuICAgICAgICBjdXJyZW50Um91dGUudmFsdWUgPSB0b0xvY2F0aW9uO1xyXG4gICAgICAgIGhhbmRsZVNjcm9sbCh0b0xvY2F0aW9uLCBmcm9tLCBpc1B1c2gsIGlzRmlyc3ROYXZpZ2F0aW9uKTtcclxuICAgICAgICBtYXJrQXNSZWFkeSgpO1xyXG4gICAgfVxyXG4gICAgbGV0IHJlbW92ZUhpc3RvcnlMaXN0ZW5lcjtcclxuICAgIC8vIGF0dGFjaCBsaXN0ZW5lciB0byBoaXN0b3J5IHRvIHRyaWdnZXIgbmF2aWdhdGlvbnNcclxuICAgIGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHJlbW92ZUhpc3RvcnlMaXN0ZW5lciA9IHJvdXRlckhpc3RvcnkubGlzdGVuKCh0bywgX2Zyb20sIGluZm8pID0+IHtcclxuICAgICAgICAgICAgLy8gY2Fubm90IGJlIGEgcmVkaXJlY3Qgcm91dGUgYmVjYXVzZSBpdCB3YXMgaW4gaGlzdG9yeVxyXG4gICAgICAgICAgICBsZXQgdG9Mb2NhdGlvbiA9IHJlc29sdmUodG8pO1xyXG4gICAgICAgICAgICAvLyBkdWUgdG8gZHluYW1pYyByb3V0aW5nLCBhbmQgdG8gaGFzaCBoaXN0b3J5IHdpdGggbWFudWFsIG5hdmlnYXRpb25cclxuICAgICAgICAgICAgLy8gKG1hbnVhbGx5IGNoYW5naW5nIHRoZSB1cmwgb3IgY2FsbGluZyBoaXN0b3J5Lmhhc2ggPSAnIy9zb21ld2hlcmUnKSxcclxuICAgICAgICAgICAgLy8gdGhlcmUgY291bGQgYmUgYSByZWRpcmVjdCByZWNvcmQgaW4gaGlzdG9yeVxyXG4gICAgICAgICAgICBjb25zdCBzaG91bGRSZWRpcmVjdCA9IGhhbmRsZVJlZGlyZWN0UmVjb3JkKHRvTG9jYXRpb24pO1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkUmVkaXJlY3QpIHtcclxuICAgICAgICAgICAgICAgIHB1c2hXaXRoUmVkaXJlY3QoYXNzaWduKHNob3VsZFJlZGlyZWN0LCB7IHJlcGxhY2U6IHRydWUgfSksIHRvTG9jYXRpb24pLmNhdGNoKG5vb3ApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IHRvTG9jYXRpb247XHJcbiAgICAgICAgICAgIGNvbnN0IGZyb20gPSBjdXJyZW50Um91dGUudmFsdWU7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBtb3ZlZCB0byB3ZWIgaGlzdG9yeT9cclxuICAgICAgICAgICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICAgICAgc2F2ZVNjcm9sbFBvc2l0aW9uKGdldFNjcm9sbEtleShmcm9tLmZ1bGxQYXRoLCBpbmZvLmRlbHRhKSwgY29tcHV0ZVNjcm9sbFBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5hdmlnYXRlKHRvTG9jYXRpb24sIGZyb20pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnJvciwgNCAvKiBOQVZJR0FUSU9OX0FCT1JURUQgKi8gfCA4IC8qIE5BVklHQVRJT05fQ0FOQ0VMTEVEICovKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGVycm9yLCAyIC8qIE5BVklHQVRJT05fR1VBUkRfUkVESVJFQ1QgKi8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZG8gbm90IHJlc3RvcmUgaGlzdG9yeSBvbiB1bmtub3duIGRpcmVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmRlbHRhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJIaXN0b3J5LmdvKC1pbmZvLmRlbHRhLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGVycm9yIGlzIGFscmVhZHkgaGFuZGxlZCBieSByb3V0ZXIucHVzaCB3ZSBqdXN0IHdhbnQgdG8gYXZvaWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBsb2dnaW5nIHRoZSBlcnJvclxyXG4gICAgICAgICAgICAgICAgICAgIHB1c2hXaXRoUmVkaXJlY3QoXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogc2hvdWxkIHdlIGZvcmNlIHJlcGxhY2U6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICBlcnJvci50bywgdG9Mb2NhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGF2b2lkIGFuIHVuY2F1Z2h0IHJlamVjdGlvbiwgbGV0IHB1c2ggY2FsbCB0cmlnZ2VyRXJyb3JcclxuICAgICAgICAgICAgICAgICAgICApLmNhdGNoKG5vb3ApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGF2b2lkIHRoZSB0aGVuIGJyYW5jaFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gZG8gbm90IHJlc3RvcmUgaGlzdG9yeSBvbiB1bmtub3duIGRpcmVjdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKGluZm8uZGVsdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgcm91dGVySGlzdG9yeS5nbygtaW5mby5kZWx0YSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgLy8gdW5yZWNvZ25pemVkIGVycm9yLCB0cmFuc2ZlciB0byB0aGUgZ2xvYmFsIGhhbmRsZXJcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmlnZ2VyRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKGZhaWx1cmUpID0+IHtcclxuICAgICAgICAgICAgICAgIGZhaWx1cmUgPVxyXG4gICAgICAgICAgICAgICAgICAgIGZhaWx1cmUgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxpemVOYXZpZ2F0aW9uKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZnRlciBuYXZpZ2F0aW9uLCBhbGwgbWF0Y2hlZCBjb21wb25lbnRzIGFyZSByZXNvbHZlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b0xvY2F0aW9uLCBmcm9tLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAvLyByZXZlcnQgdGhlIG5hdmlnYXRpb25cclxuICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlICYmIGluZm8uZGVsdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgcm91dGVySGlzdG9yeS5nbygtaW5mby5kZWx0YSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlckFmdGVyRWFjaCh0b0xvY2F0aW9uLCBmcm9tLCBmYWlsdXJlKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChub29wKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIEluaXRpYWxpemF0aW9uIGFuZCBFcnJvcnNcclxuICAgIGxldCByZWFkeUhhbmRsZXJzID0gdXNlQ2FsbGJhY2tzKCk7XHJcbiAgICBsZXQgZXJyb3JIYW5kbGVycyA9IHVzZUNhbGxiYWNrcygpO1xyXG4gICAgbGV0IHJlYWR5O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VyIGVycm9ySGFuZGxlcnMgYWRkZWQgdmlhIG9uRXJyb3IgYW5kIHRocm93cyB0aGUgZXJyb3IgYXMgd2VsbFxyXG4gICAgICogQHBhcmFtIGVycm9yIC0gZXJyb3IgdG8gdGhyb3dcclxuICAgICAqIEByZXR1cm5zIHRoZSBlcnJvciBhcyBhIHJlamVjdGVkIHByb21pc2VcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdHJpZ2dlckVycm9yKGVycm9yKSB7XHJcbiAgICAgICAgbWFya0FzUmVhZHkoZXJyb3IpO1xyXG4gICAgICAgIGVycm9ySGFuZGxlcnMubGlzdCgpLmZvckVhY2goaGFuZGxlciA9PiBoYW5kbGVyKGVycm9yKSk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGlzUmVhZHkoKSB7XHJcbiAgICAgICAgaWYgKHJlYWR5ICYmIGN1cnJlbnRSb3V0ZS52YWx1ZSAhPT0gU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRClcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHJlYWR5SGFuZGxlcnMuYWRkKFtyZXNvbHZlLCByZWplY3RdKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTWFyayB0aGUgcm91dGVyIGFzIHJlYWR5LCByZXNvbHZpbmcgdGhlIHByb21pc2VkIHJldHVybmVkIGJ5IGlzUmVhZHkoKS4gQ2FuXHJcbiAgICAgKiBvbmx5IGJlIGNhbGxlZCBvbmNlLCBvdGhlcndpc2UgZG9lcyBub3RoaW5nLlxyXG4gICAgICogQHBhcmFtIGVyciAtIG9wdGlvbmFsIGVycm9yXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIG1hcmtBc1JlYWR5KGVycikge1xyXG4gICAgICAgIGlmIChyZWFkeSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHJlYWR5ID0gdHJ1ZTtcclxuICAgICAgICBzZXR1cExpc3RlbmVycygpO1xyXG4gICAgICAgIHJlYWR5SGFuZGxlcnNcclxuICAgICAgICAgICAgLmxpc3QoKVxyXG4gICAgICAgICAgICAuZm9yRWFjaCgoW3Jlc29sdmUsIHJlamVjdF0pID0+IChlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKSkpO1xyXG4gICAgICAgIHJlYWR5SGFuZGxlcnMucmVzZXQoKTtcclxuICAgIH1cclxuICAgIC8vIFNjcm9sbCBiZWhhdmlvclxyXG4gICAgZnVuY3Rpb24gaGFuZGxlU2Nyb2xsKHRvLCBmcm9tLCBpc1B1c2gsIGlzRmlyc3ROYXZpZ2F0aW9uKSB7XHJcbiAgICAgICAgaWYgKCFpc0Jyb3dzZXIgfHwgIXNjcm9sbEJlaGF2aW9yKVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgbGV0IHNjcm9sbFBvc2l0aW9uID0gKCFpc1B1c2ggJiYgZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihnZXRTY3JvbGxLZXkodG8uZnVsbFBhdGgsIDApKSkgfHxcclxuICAgICAgICAgICAgKChpc0ZpcnN0TmF2aWdhdGlvbiB8fCAhaXNQdXNoKSAmJlxyXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5zdGF0ZSAmJlxyXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5zdGF0ZS5zY3JvbGwpIHx8XHJcbiAgICAgICAgICAgIG51bGw7XHJcbiAgICAgICAgcmV0dXJuIG5leHRUaWNrKClcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gc2Nyb2xsQmVoYXZpb3IodG8sIGZyb20sIHNjcm9sbFBvc2l0aW9uKSlcclxuICAgICAgICAgICAgLnRoZW4ocG9zaXRpb24gPT4gcG9zaXRpb24gJiYgc2Nyb2xsVG9Qb3NpdGlvbihwb3NpdGlvbikpXHJcbiAgICAgICAgICAgIC5jYXRjaCh0cmlnZ2VyRXJyb3IpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZ28gPSAoZGVsdGEpID0+IHJvdXRlckhpc3RvcnkuZ28oZGVsdGEpO1xyXG4gICAgbGV0IHN0YXJ0ZWQ7XHJcbiAgICBjb25zdCBpbnN0YWxsZWRBcHBzID0gbmV3IFNldCgpO1xyXG4gICAgY29uc3Qgcm91dGVyID0ge1xyXG4gICAgICAgIGN1cnJlbnRSb3V0ZSxcclxuICAgICAgICBhZGRSb3V0ZSxcclxuICAgICAgICByZW1vdmVSb3V0ZSxcclxuICAgICAgICBoYXNSb3V0ZSxcclxuICAgICAgICBnZXRSb3V0ZXMsXHJcbiAgICAgICAgcmVzb2x2ZSxcclxuICAgICAgICBvcHRpb25zLFxyXG4gICAgICAgIHB1c2gsXHJcbiAgICAgICAgcmVwbGFjZSxcclxuICAgICAgICBnbyxcclxuICAgICAgICBiYWNrOiAoKSA9PiBnbygtMSksXHJcbiAgICAgICAgZm9yd2FyZDogKCkgPT4gZ28oMSksXHJcbiAgICAgICAgYmVmb3JlRWFjaDogYmVmb3JlR3VhcmRzLmFkZCxcclxuICAgICAgICBiZWZvcmVSZXNvbHZlOiBiZWZvcmVSZXNvbHZlR3VhcmRzLmFkZCxcclxuICAgICAgICBhZnRlckVhY2g6IGFmdGVyR3VhcmRzLmFkZCxcclxuICAgICAgICBvbkVycm9yOiBlcnJvckhhbmRsZXJzLmFkZCxcclxuICAgICAgICBpc1JlYWR5LFxyXG4gICAgICAgIGluc3RhbGwoYXBwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlciA9IHRoaXM7XHJcbiAgICAgICAgICAgIGFwcC5jb21wb25lbnQoJ1JvdXRlckxpbmsnLCBSb3V0ZXJMaW5rKTtcclxuICAgICAgICAgICAgYXBwLmNvbXBvbmVudCgnUm91dGVyVmlldycsIFJvdXRlclZpZXcpO1xyXG4gICAgICAgICAgICBhcHAuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJHJvdXRlciA9IHJvdXRlcjtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywgJyRyb3V0ZScsIHtcclxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gdW5yZWYoY3VycmVudFJvdXRlKSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgaW5pdGlhbCBuYXZpZ2F0aW9uIGlzIG9ubHkgbmVjZXNzYXJ5IG9uIGNsaWVudCwgb24gc2VydmVyIGl0IGRvZXNuJ3RcclxuICAgICAgICAgICAgLy8gbWFrZSBzZW5zZSBiZWNhdXNlIGl0IHdpbGwgY3JlYXRlIGFuIGV4dHJhIHVubmVjZXNzYXJ5IG5hdmlnYXRpb24gYW5kIGNvdWxkXHJcbiAgICAgICAgICAgIC8vIGxlYWQgdG8gcHJvYmxlbXNcclxuICAgICAgICAgICAgaWYgKGlzQnJvd3NlciAmJlxyXG4gICAgICAgICAgICAgICAgLy8gdXNlZCBmb3IgdGhlIGluaXRpYWwgbmF2aWdhdGlvbiBjbGllbnQgc2lkZSB0byBhdm9pZCBwdXNoaW5nXHJcbiAgICAgICAgICAgICAgICAvLyBtdWx0aXBsZSB0aW1lcyB3aGVuIHRoZSByb3V0ZXIgaXMgdXNlZCBpbiBtdWx0aXBsZSBhcHBzXHJcbiAgICAgICAgICAgICAgICAhc3RhcnRlZCAmJlxyXG4gICAgICAgICAgICAgICAgY3VycmVudFJvdXRlLnZhbHVlID09PSBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZWUgYWJvdmVcclxuICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcHVzaChyb3V0ZXJIaXN0b3J5LmxvY2F0aW9uKS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ1VuZXhwZWN0ZWQgZXJyb3Igd2hlbiBzdGFydGluZyB0aGUgcm91dGVyOicsIGVycik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByZWFjdGl2ZVJvdXRlID0ge307XHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlOiB0aGUga2V5IG1hdGNoZXNcclxuICAgICAgICAgICAgICAgIHJlYWN0aXZlUm91dGVba2V5XSA9IGNvbXB1dGVkKCgpID0+IGN1cnJlbnRSb3V0ZS52YWx1ZVtrZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhcHAucHJvdmlkZShyb3V0ZXJLZXksIHJvdXRlcik7XHJcbiAgICAgICAgICAgIGFwcC5wcm92aWRlKHJvdXRlTG9jYXRpb25LZXksIHJlYWN0aXZlKHJlYWN0aXZlUm91dGUpKTtcclxuICAgICAgICAgICAgbGV0IHVubW91bnRBcHAgPSBhcHAudW5tb3VudDtcclxuICAgICAgICAgICAgaW5zdGFsbGVkQXBwcy5hZGQoYXBwKTtcclxuICAgICAgICAgICAgYXBwLnVubW91bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YWxsZWRBcHBzLmRlbGV0ZShhcHApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbGxlZEFwcHMuc2l6ZSA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVIaXN0b3J5TGlzdGVuZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Um91dGUudmFsdWUgPSBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICByZWFkeSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdW5tb3VudEFwcC5jYWxsKHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmICgoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykgJiYgdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgYWRkRGV2dG9vbHMoYXBwLCByb3V0ZXIsIG1hdGNoZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbiAgICByZXR1cm4gcm91dGVyO1xyXG59XHJcbmZ1bmN0aW9uIHJ1bkd1YXJkUXVldWUoZ3VhcmRzKSB7XHJcbiAgICByZXR1cm4gZ3VhcmRzLnJlZHVjZSgocHJvbWlzZSwgZ3VhcmQpID0+IHByb21pc2UudGhlbigoKSA9PiBndWFyZCgpKSwgUHJvbWlzZS5yZXNvbHZlKCkpO1xyXG59XHJcbmZ1bmN0aW9uIGV4dHJhY3RDaGFuZ2luZ1JlY29yZHModG8sIGZyb20pIHtcclxuICAgIGNvbnN0IGxlYXZpbmdSZWNvcmRzID0gW107XHJcbiAgICBjb25zdCB1cGRhdGluZ1JlY29yZHMgPSBbXTtcclxuICAgIGNvbnN0IGVudGVyaW5nUmVjb3JkcyA9IFtdO1xyXG4gICAgY29uc3QgbGVuID0gTWF0aC5tYXgoZnJvbS5tYXRjaGVkLmxlbmd0aCwgdG8ubWF0Y2hlZC5sZW5ndGgpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHJlY29yZEZyb20gPSBmcm9tLm1hdGNoZWRbaV07XHJcbiAgICAgICAgaWYgKHJlY29yZEZyb20pIHtcclxuICAgICAgICAgICAgaWYgKHRvLm1hdGNoZWQuaW5kZXhPZihyZWNvcmRGcm9tKSA8IDApXHJcbiAgICAgICAgICAgICAgICBsZWF2aW5nUmVjb3Jkcy5wdXNoKHJlY29yZEZyb20pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB1cGRhdGluZ1JlY29yZHMucHVzaChyZWNvcmRGcm9tKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVjb3JkVG8gPSB0by5tYXRjaGVkW2ldO1xyXG4gICAgICAgIGlmIChyZWNvcmRUbykge1xyXG4gICAgICAgICAgICAvLyB0aGUgdHlwZSBkb2Vzbid0IG1hdHRlciBiZWNhdXNlIHdlIGFyZSBjb21wYXJpbmcgcGVyIHJlZmVyZW5jZVxyXG4gICAgICAgICAgICBpZiAoZnJvbS5tYXRjaGVkLmluZGV4T2YocmVjb3JkVG8pIDwgMClcclxuICAgICAgICAgICAgICAgIGVudGVyaW5nUmVjb3Jkcy5wdXNoKHJlY29yZFRvKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW2xlYXZpbmdSZWNvcmRzLCB1cGRhdGluZ1JlY29yZHMsIGVudGVyaW5nUmVjb3Jkc107XHJcbn1cblxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHJvdXRlciBpbnN0YW5jZS4gRXF1aXZhbGVudCB0byB1c2luZyBgJHJvdXRlcmAgaW5zaWRlXHJcbiAqIHRlbXBsYXRlcy5cclxuICovXHJcbmZ1bmN0aW9uIHVzZVJvdXRlcigpIHtcclxuICAgIHJldHVybiBpbmplY3Qocm91dGVyS2V5KTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB0aGUgY3VycmVudCByb3V0ZSBsb2NhdGlvbi4gRXF1aXZhbGVudCB0byB1c2luZyBgJHJvdXRlYCBpbnNpZGVcclxuICogdGVtcGxhdGVzLlxyXG4gKi9cclxuZnVuY3Rpb24gdXNlUm91dGUoKSB7XHJcbiAgICByZXR1cm4gaW5qZWN0KHJvdXRlTG9jYXRpb25LZXkpO1xyXG59XG5cbmV4cG9ydCB7IE5hdmlnYXRpb25GYWlsdXJlVHlwZSwgUm91dGVyTGluaywgUm91dGVyVmlldywgU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCBhcyBTVEFSVF9MT0NBVElPTiwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlUm91dGVyLCBjcmVhdGVSb3V0ZXJNYXRjaGVyLCBjcmVhdGVXZWJIYXNoSGlzdG9yeSwgY3JlYXRlV2ViSGlzdG9yeSwgaXNOYXZpZ2F0aW9uRmFpbHVyZSwgb25CZWZvcmVSb3V0ZUxlYXZlLCBvbkJlZm9yZVJvdXRlVXBkYXRlLCBwYXJzZVF1ZXJ5LCByb3V0ZUxvY2F0aW9uS2V5LCByb3V0ZXJLZXksIHN0cmluZ2lmeVF1ZXJ5LCB1c2VMaW5rLCB1c2VSb3V0ZSwgdXNlUm91dGVyIH07XG4iLCJpbXBvcnQgeyBzZXREZXZ0b29sc0hvb2ssIGluaXRDdXN0b21Gb3JtYXR0ZXIsIHdhcm4gfSBmcm9tICdAdnVlL3J1bnRpbWUtZG9tJztcbmV4cG9ydCAqIGZyb20gJ0B2dWUvcnVudGltZS1kb20nO1xuaW1wb3J0IHsgZ2V0R2xvYmFsVGhpcyB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuZnVuY3Rpb24gaW5pdERldigpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IGdldEdsb2JhbFRoaXMoKTtcclxuICAgIHRhcmdldC5fX1ZVRV9fID0gdHJ1ZTtcclxuICAgIHNldERldnRvb2xzSG9vayh0YXJnZXQuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyk7XHJcbiAgICB7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKGBZb3UgYXJlIHJ1bm5pbmcgYSBkZXZlbG9wbWVudCBidWlsZCBvZiBWdWUuXFxuYCArXHJcbiAgICAgICAgICAgIGBNYWtlIHN1cmUgdG8gdXNlIHRoZSBwcm9kdWN0aW9uIGJ1aWxkICgqLnByb2QuanMpIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLmApO1xyXG4gICAgICAgIGluaXRDdXN0b21Gb3JtYXR0ZXIoKTtcclxuICAgIH1cclxufVxuXG4vLyBUaGlzIGVudHJ5IGV4cG9ydHMgdGhlIHJ1bnRpbWUgb25seSwgYW5kIGlzIGJ1aWx0IGFzXHJcbihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpbml0RGV2KCk7XHJcbmNvbnN0IGNvbXBpbGUgPSAoKSA9PiB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgUnVudGltZSBjb21waWxhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnVpbGQgb2YgVnVlLmAgK1xyXG4gICAgICAgICAgICAoIGAgQ29uZmlndXJlIHlvdXIgYnVuZGxlciB0byBhbGlhcyBcInZ1ZVwiIHRvIFwidnVlL2Rpc3QvdnVlLmVzbS1idW5kbGVyLmpzXCIuYFxyXG4gICAgICAgICAgICAgICAgKSAvKiBzaG91bGQgbm90IGhhcHBlbiAqLyk7XHJcbiAgICB9XHJcbn07XG5cbmV4cG9ydCB7IGNvbXBpbGUgfTtcbiIsImltcG9ydCB7Y3JlYXRlUm91dGVyLGNyZWF0ZVdlYkhhc2hIaXN0b3J5fSBmcm9tICd2dWUtcm91dGVyJ1xyXG4vLyBpbXBvcnQgeyBmcm9tIH0gZnJvbSBcImNvcmUtanMvZm4vYXJyYXlcIlxyXG5cclxuY29uc3Qgcm91dGVzID0gW1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6Jy8nLGNvbXBvbmVudDogKCkgPT5pbXBvcnQoJy4vY29tcG9uZW50cy9JbmRleC52dWUnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBwYXRoOicvaW5kZXgnLGNvbXBvbmVudDogKCkgPT5pbXBvcnQoJy4vY29tcG9uZW50cy9JbmRleC52dWUnKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBwYXRoOicvdGVzdCcsY29tcG9uZW50OiAoKSA9PmltcG9ydCgnLi9jb21wb25lbnRzL1Rlc3QudnVlJylcclxuICAgIH1cclxuXVxyXG5jb25zdCByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoe1xyXG4gICAgaGlzdG9yeTogY3JlYXRlV2ViSGFzaEhpc3RvcnkoKSxcclxuICAgIHJvdXRlcyxcclxuICB9KTtcclxuZXhwb3J0IGRlZmF1bHQgcm91dGVyIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcXG4udXBsb2FkX2ZpbGVbZGF0YS12LTQ0ZDg0N2Q4XXtcXHJcXG4gICAgICAgYmFja2dyb3VuZDpub25lOyBvdXRsaW5lOm5vbmU7IGJvcmRlcjpub25lO1xcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9JbmRleC52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQTZCSTtPQUNHLGVBQWUsRUFBRSxZQUFZLEVBQUUsV0FBVztBQUM3Q1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImluZGV4XFxcIj5cXHJcXG4gICAgICAgIDxpbnB1dCB0eXBlPVxcXCJmaWxlXFxcIiBjbGFzcz1cXFwidXBsb2FkX2ZpbGVcXFwiPlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L3RlbXBsYXRlPlxcclxcblxcclxcbjxzY3JpcHQ+XFxyXFxuICAgIGV4cG9ydCBkZWZhdWx0e1xcclxcbiAgICAgICAgZGF0YSgpIHtcXHJcXG4gICAgICAgICAgICByZXR1cm4ge1xcclxcbiAgICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9LFxcclxcbiAgICAgICAgY3JlYXRlZCgpIHtcXHJcXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh3aW5kb3cubG9jYXRpb24pXFxyXFxuICAgICAgICAgICAgdmFyIG9yaWdpbiAgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luO1xcclxcbiAgICAgICAgICAgJC5hamF4KHtcXHJcXG4gICAgICAgICAgICAgICB0eXBlOidwb3N0JyxcXHJcXG4gICAgICAgICAgICAgICB1cmw6b3JpZ2luK1xcXCJ1cGxvYWRcXFwiLFxcclxcbiAgICAgICAgICAgICAgIHN1Y2Nlc3M6ZnVuY3Rpb24ocmVzKXtcXHJcXG4gICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKVxcclxcbiAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgIH0pXFxyXFxuICAgICAgICB9LFxcclxcbiAgICB9XFxyXFxuPC9zY3JpcHQ+XFxyXFxuXFxyXFxuXFxyXFxuPHN0eWxlIHNjb3BlZD5cXHJcXG4gICAgLnVwbG9hZF9maWxle1xcclxcbiAgICAgICBiYWNrZ3JvdW5kOm5vbmU7IG91dGxpbmU6bm9uZTsgYm9yZGVyOm5vbmU7IFxcclxcbiAgICB9XFxyXFxuPC9zdHlsZT5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc2NmQxODM3JmJpbmRpbmdzPXt9XCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbnNjcmlwdC5yZW5kZXIgPSByZW5kZXJcblxuZXhwb3J0IGRlZmF1bHQgc2NyaXB0IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s4XS51c2VbMF0hLi9JbmRleC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00NGQ4NDdkOCZzY29wZWQ9dHJ1ZSZsYW5nPWNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL0luZGV4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00NGQ4NDdkOCZzY29wZWQ9dHJ1ZSZiaW5kaW5ncz17fVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9JbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL0luZGV4LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTQ0ZDg0N2Q4JnNjb3BlZD10cnVlJmxhbmc9Y3NzXCJcbnNjcmlwdC5yZW5kZXIgPSByZW5kZXJcbnNjcmlwdC5fX3Njb3BlSWQgPSBcImRhdGEtdi00NGQ4NDdkOFwiXG5cbmV4cG9ydCBkZWZhdWx0IHNjcmlwdCIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL1Rlc3QudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWFmYTY5N2JhJmJpbmRpbmdzPXt9XCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vVGVzdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vVGVzdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuc2NyaXB0LnJlbmRlciA9IHJlbmRlclxuXG5leHBvcnQgZGVmYXVsdCBzY3JpcHQiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IG1vZHVsZVsnZGVmYXVsdCddIDpcblx0XHQoKSA9PiBtb2R1bGU7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHtjcmVhdGVBcHB9IGZyb20gJ3Z1ZSdcclxuaW1wb3J0IEFwcCBmcm9tICcuL3NyYy9BcHAudnVlJ1xyXG5pbXBvcnQgcm91dGVyIGZyb20gXCIuL3NyYy9yb3V0ZXJcIjtcclxuLy8gaW1wb3J0IFZpZXdVSSBmcm9tICd2aWV3LWRlc2lnbic7XHJcbi8vIGltcG9ydCAndmlldy1kZXNpZ24vZGlzdC9zdHlsZXMvaXZpZXcuY3NzJztcclxuLy8gaW1wb3J0IHN0cm9lIGZyb20gJy4vc3RvcmUvc3RvcmUnXHJcbmNyZWF0ZUFwcChBcHApLnVzZShyb3V0ZXIpLm1vdW50KCcjcm9vdCcpIl0sInNvdXJjZVJvb3QiOiIifQ==